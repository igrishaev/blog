<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ivan Grishaev's blog</title>
    <description>Writing on programming, education, books and negotiations.
</description>
    <link>https://grishaev.me/</link>
    <atom:link href="https://grishaev.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 15 Jul 2025 07:37:18 +0000</pubDate>
    <lastBuildDate>Tue, 15 Jul 2025 07:37:18 +0000</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>Пустая истина (3)</title>
        <description>
&lt;p&gt;После второго раунда обсуждений стало ясно, почему every от пустого множества
дает истину. Читатель &lt;a href=&quot;https://t.me/themishkun&quot;&gt;Миша Левченко&lt;/a&gt; внятное объяснение, которое понятно
мне как программисту. Оно не опирается на кванторы и логику. И хотя вывод все
равно не нравится, приведу объяснение здесь.&lt;/p&gt;

&lt;p&gt;Дело в том, что операции над списками нужно рассматривать как свертку. Есть
такая функция &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt; (она же &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fold&lt;/code&gt;), которая принимает функцию двух
аргументов и коллекцию. Результат функции такой:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fn(fn(fn(fn(item0, item1), item2), item3), item4)...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Например, для сложения чисел 1, 2, 3, 4 получим форму:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(((1 + 2) + 3) + 4)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reduce&lt;/code&gt; может накапливать в том числе другую коллекцию: словарь или список. Это
вообще очень мощная функция. Про себя я называю ее царицей функций, потому что
через reduce можно выразить что угодно.&lt;/p&gt;

&lt;p&gt;Reduce выше прекрасно работает, если элементов два и более. Когда их один или
ноль, начинаются граничные случаи. Одно из решений в том, что &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt; может
принимать т.к. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; — первичный элемент, который подставляется в начало
цепочки. Чаще всего он выступает коллекцией-аккумулятором, но может быть и
простым скаляром.&lt;/p&gt;

&lt;p&gt;Если передать &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt;, форма будет такой:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fn(fn(fn(init, item0), item1), item2)...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Другими словами, он гарантирует, что элементов больше нуля. Если основной список
пустой, просто вернем init.&lt;/p&gt;

&lt;p&gt;Так вот, в терминах свертки функция &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALL&lt;/code&gt; (которую я раньше называл &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;every?&lt;/code&gt;)
выглядит так:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(func ALL [fn-pred items]
  (reduce (fn [x y]
         (and x (fn-pred y)))
       true
       items))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Демо:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(ALL int? [1 2 3])
true

(ALL int? [1 nil 3])
false

(ALL int? [])
true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;А вот функция &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANY&lt;/code&gt; (что хотя бы один элемент вернул истину для предиката):&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(func ANY [fn-pred items]
  (reduce (fn [x y]
         (or x (fn-pred y)))
       false
       items))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Демо:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(ANY int? [1 nil 3])
true

(ANY int? [nil nil nil])
false

(ANY int? [])
false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Аналогично работают функции суммирования: это &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt;, где начальные элементы
равны 0 и 1. Поэтому &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(+)&lt;/code&gt; дает 0, а &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(*)&lt;/code&gt; — 1.&lt;/p&gt;

&lt;p&gt;Как видим, все это можно объяснить без греческих букв и терминов. А пустая
истина, о которой я писал ранее, считается истиной только потому, что таков
начальный элемент свертки.&lt;/p&gt;

&lt;p&gt;Другое дело, что такой подход все равно мне не нравится. В каждом их них скрыт
начальный элемент: для &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALL&lt;/code&gt; — &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;, для &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANY&lt;/code&gt; — &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;, единица для
умножения и так далее. Считается очевидным, что он должен быть именно таким. А
мне это не очевидно. Я спотыкаюсь, когда вижу, что произведение элементов
пустого списка равно единице. Я бы предпочел неопределённость — то есть null.&lt;/p&gt;

&lt;p&gt;Я в курсе про нейтральный элемент: ноль для сложения, единица для умножения. Но
на пустых списках это как-то не очень. Душа не принимает, если совсем честно.&lt;/p&gt;

&lt;p&gt;В самом деле, в математике оператор умножения — бинарный, ему нужно два
операнда. Нельзя записать что-то вроде &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5 * = 5&lt;/code&gt; — тут не хватает операнда
справа. С какой стати мы обходим математические правила — не ясно.&lt;/p&gt;

&lt;p&gt;Я часто использую &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt; и вывел правило: всегда указываю начальный
элемент. Например, чтобы сложить список чисел, я пишу так:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(reduce + 0 numbers)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;вместо&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(apply + numbers)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Потому что во втором случае не очевидно, во что накапливается результат.&lt;/p&gt;

&lt;p&gt;Словом, пока что меня отпустило на тему пустой истины. Все оказалось просто: это
свертка, где начальный элемент — истина. Крайне неочевидно, на мой взгляд. Чтобы
не отстрелить ногу, либо проверяйте коллекцию на пустоту, либо пишите явный
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt;, где начальный элемент — ложь, если того требует контекст.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Jul 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/vacuous-truth-3/</link>
        <guid isPermaLink="true">https://grishaev.me/vacuous-truth-3/</guid>
        
        <category>programming</category>
        
        <category>logic</category>
        
        
      </item>
    
      <item>
        <title>Пустая истина (2)</title>
        <description>&lt;p&gt;После прошлой заметки мне стали приходить, что называется, письма читателей. Их
можно разделить на два вида.&lt;/p&gt;

&lt;p&gt;Первый — ты не шаришь в логике, сейчас я все объясню. Гляди… (далее километр
греческих букв, термины “антецедент”, “консеквент” и другие). Вывалив все это,
человек считает, что открыл мне глаза. Я ничего из этого не понимаю, поэтому
прошу — не утруждайтесь подобными доказательствами.&lt;/p&gt;

&lt;p&gt;Второй тип писем — в языке X предикат every работает так же: для пустого
множества вернет истину независимо от предиката. Да, согласен. Еще пять лет
назад выполнил в Постгресе такой запрос:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;, получил истину и опечалился. Если же поменять &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALL&lt;/code&gt; на &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANY&lt;/code&gt;, получим
противоположный результат:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ANY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Здесь мы уподобляемся Джаваскриптерам: подаем нелепый ввод, получаем нелепый
вывод. При этом силимся подвести его под какую-то базу: антецеденты-консеквенты,
кванторы и прочее.&lt;/p&gt;

&lt;p&gt;А дело в другом: аппарат логики не учитывает неопределенность. Это утопичная
модель, где есть только истина и ложь — третьего не дано. В тех местах, где
модель не ложится на реальность, начинаются подтасовки: истину раз — и обозвали
“пустой”. То есть как бы истина, но не совсем.&lt;/p&gt;

&lt;p&gt;Меня это страшно бесит, прям так, что не передать словами. Если результат
отличен от истины и лжи, заведи под него тип. Переработай модель логики, в конце
концов. Признай, что старая модель ограничена и не подходит под прикладные
задачи. И уж чего точно я не пойму, так это того, почему в языках
программирования мы опираемся на логику бог знает какой давности. Нужно делать
так, чтобы удобно здесь и сейчас, а не как принято в учебнике логики.&lt;/p&gt;

&lt;p&gt;Правильный ответ в том, что в функции every пустое множество — это
неопределенность, краевой случай. То же самое, что получить первый элемент
массива, когда он пуст. В зависимости от языка мы получим null или исключение,
но точно не число 42 с пометкой “пустое” — это нонсенс.&lt;/p&gt;

&lt;p&gt;Обратимся к более достойной науке, чем логика — математике. Рассмотрим функцию
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y = 1/x&lt;/code&gt; (см. график ниже). Прелесть этой функции в том, что в точке 0 ее
значение не определено. Если точнее, при &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x=0&lt;/code&gt; результат будет бесконечностью,
причем даже нельзя сказать, какой именно — положительной или отрицательной. В
зависимости от того, с какой стороны приближаться к нулю — правой или левой —
функция будет уходить в плюс- и минус-бесконечность.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/vacuous-truth-2/1.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Область определения этой функции записывается так: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(-inf, 0);(0, +inf)&lt;/code&gt;. В нуле
функция не определена — и при этом никто не умер. Бывают функции и с большим
количеством точек и даже целых областей, где они не определены. И ничего — нас
это устраивает, с функцией можно работать.&lt;/p&gt;

&lt;p&gt;(В скобках отмечу, стандарт чисел с плавающей запятой предусматривает комбинации
битов, которые трактуются как обычная бесконечность, а также плюс- и
минус-версии. То же самое касается нуля: может быть ноль, минус ноль и плюс
ноль. Это помогает при сходимости рядов, когда мы пришли к нулю и хотим знать
откуда — справа или слева. По крайней мере в Фортране этими штуками
пользовались).&lt;/p&gt;

&lt;p&gt;Другой пример из математики — решение квадратного уравнения вида &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ax^2 + bx + c
= 0&lt;/code&gt;. У него может быть либо два корня, либо один, либо никаких. Во втором
случае еще можно слукавить: сказать, что один корень — это два
одинаковых. Ладно, но с третьим вариантом это не прокатит. Нельзя вернуть
какое-то левое число и сказать, что это пустой корень. Они не определены.&lt;/p&gt;

&lt;p&gt;Пример из географии: чтобы попасть на северный полюс, нужно идти на
сервер. Каким же будет северное направление на Северном полюсе? Ответ — никаким,
оно не определено.&lt;/p&gt;

&lt;p&gt;То же самое с предикатами: когда нас просят сказать, что все камни белые, но
камней нет, это неопределенность. Потому что если сказать да, оказывается, что
камни в том числе черные, прозрачные, резиновые — и все это одновременно. Этого
не было, если бы every возвращал NULL — я имею в виду не в коде, а на уровне
логики.&lt;/p&gt;

&lt;p&gt;Уж не говорю, что пустая истина совершенно неприемлема на бытовом уровне. Это
либо троллинг, либо саботаж, либо неразбериха.&lt;/p&gt;

&lt;p&gt;Когда я читаю в документации: &lt;em&gt;if the stream is empty then true is returned and
the predicate is not evaluated&lt;/em&gt; — мне немного плохеет. Выходит так, что функция
возвращает один и тот же результат при РАЗНЫХ случаях. А значит, ответственность
перекладывается на тебя — будь добр сам проверяй, пустое множество или не
пустое.&lt;/p&gt;

&lt;p&gt;Это просто плохой API — что, в общем-то, не редкость. Надо это признать и больше
так не делать. А вот оправдываться логикой и чепухой а-ля “антецедент-квантор” —
это отстой.&lt;/p&gt;

&lt;p&gt;Под конец напомню вам о Булгакове. Если свежесть отлична от первой, это уже не
свежесть. Если перед истиной стоит какой-то тег — пустая, неполная, вторичная —
то это не истина. Вот и все, что нужно запомнить. И это — истина.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Jul 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/vacuous-truth-2/</link>
        <guid isPermaLink="true">https://grishaev.me/vacuous-truth-2/</guid>
        
        <category>programming</category>
        
        <category>logic</category>
        
        
      </item>
    
      <item>
        <title>Пустая истина (1)</title>
        <description>&lt;p&gt;Расскажу, как однажды погорел на забавной вещи под названием “пустая
истина”. Это было лет пять назад, когда я ничего про это не знал.&lt;/p&gt;

&lt;p&gt;Значит, смотрите: когда мускулистые греки работали над логикой, они ввели в том
числе предикаты. Например, белый? – это предикат. Если применить его к любому
предмету, получим истину или ложь.&lt;/p&gt;

&lt;p&gt;Также греки придумали пакетную версию предикатов, батч, так сказать. Это
супер-предикаты “каждый из”, “любой из”, “ни один из”. Все они принимают другой
предикат и множество объектов. Далее они редьюсят множество логических
результатов в один (простите за функциональные термины).&lt;/p&gt;

&lt;p&gt;Если на столе три белых камня, то выражение “все камни – белые” вернет
истину. Если один – тоже истину. Если сто белых и один черный – ложь. А что
случится, если камней нет? Греки почесали бороды и сказали – будет тоже истина,
только назовем ее пустой.&lt;/p&gt;

&lt;p&gt;В результате: если на столе нет камней, выражение “все камни – белые” будет
истинно. Таким же истинным будет выражение “все камни – черные”, в крапинку и
полоску. Все камни обладают какими угодно свойствами одновременно. Одна беда –
их нет.&lt;/p&gt;

&lt;p&gt;На мой взгляд, греки подложили нам свинью. Истина, как известно, одна – не
бывает двух разных истин. Когда вводят истину с какой-то характеристикой,
получается черт знает что. Вроде бы это истина, но какая-то другая, что требует
особого обращения с ней.&lt;/p&gt;

&lt;p&gt;Напоминает диалог Булгакова об осетрине второй свежести: голубчик, это вздор!
Свежесть бывает только одна – первая, она же последняя. Если осетрина второй
свежести, значит, она тухлая.&lt;/p&gt;

&lt;p&gt;Знал же человек!&lt;/p&gt;

&lt;p&gt;Интересно, что греческая вторая свежесть, тьфу, пустая истина идеально ложится
на быдлокод! Это при том, что программировать греки не умели.&lt;/p&gt;

&lt;p&gt;Предположим, нужно написать функцию, которая принимает предикат и список
объектов. Функция возвращает истину, если предикат справедлив для каждого
элемента. Вот как выглядит самая тупая реализация:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func is_every(fn_pred, items):
  for item in items:
    if not fn_pred(item):
      return false;
  return true;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Все просто: бежим по списку, как только предикат вернул ложь, мы тоже возвращаем
ложь. Если прошли по всем элементам, значит, лжи ни разу не было, и мы
возвращаем истину. Если список пуст, мы благополучно пропустим цикл и перейдем к
выражению с истиной.&lt;/p&gt;

&lt;p&gt;Как это связано с моей работой? Несколько лет назад в Exoscale я делал систему
прав доступа, аналог IAM в Амазоне. Из базы читались разрешения, и нужно было
проверить, что каждое из них совпадает с политикой ресурса. Для этого я вызывал
кложурную функцию &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;every?&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(every? policy-match? permissions)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Оказалось, Рич Хикки знал эти штучки, и для пустого множества &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;every?&lt;/code&gt;
возвращает истину. Это легко проверить:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(every? int? [1 2 3])
true

(every? int? [1 &quot;a&quot; 3])
false

(every? int? [])
true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Вышло так, что если у пользователя вообще не было прав, то список был пуст и
every? возвращала истину. В результате пользователь, который не имел доступа ни
к чему, имел доступ ко всему – из-за моих бедных знаний в этой области.&lt;/p&gt;

&lt;p&gt;С тех пор у меня отпечаталось в подкорке, что перед &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;every?&lt;/code&gt; должна быть
проверка на пустоту. Пустая истина может трактоваться как угодно, но мне нужна
точность.&lt;/p&gt;

&lt;p&gt;Второе – я не согласен с греками. Видимо, они еще не знали про NULL и
неопределенность, плохо понимали троичную логику. Увы, наш мир сложнее, чем
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; и &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;, есть нуллы и другие досадные вещи. Но нужно жить с ними, а не
сводить к каким-то сомнительным истинам.&lt;/p&gt;

&lt;p&gt;Кстати, пустая истина позволяет сказать жене: все мои любовницы – брюнетки. Если
у вас нет любовниц, это тоже будет истиной. Разве что придется потратить время
на объяснение, но ничего. Истина дороже.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Jul 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/vacuous-truth-1/</link>
        <guid isPermaLink="true">https://grishaev.me/vacuous-truth-1/</guid>
        
        <category>programming</category>
        
        <category>logic</category>
        
        
      </item>
    
      <item>
        <title>Подорожание Google Workspace</title>
        <description>&lt;p&gt;Гугл пишет, что поднимет цену на подписку Google Workspace. Это для тех, кто
привязял домен к Гуглу и тем самым создал мини-организацию из одного
человека. Правда, со временем я открыл учетки для других членов семьи, включая
маму, потому что никто не помнит пароль, да и пройдет авторизацию Гугла сегодня
не каждый. Так что сейчас в моей организации пять человек.&lt;/p&gt;

&lt;p&gt;Интересна причина роста цен — это внедрение AI и некие фичи:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The updated subscription pricing reflects the significant added AI value, as
well as the many new features we have introduced and are launching to Google
Workspace editions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;В тот момент я подумал: Гугл напоминает российский Газпром. Потому что все
развлечения Газпрома оплачивает потребитель — покупку футбольных клубов,
километры списанных труб, бонусы менеждеров. За все это платит простолюдин,
неважно какие успехи рапортует Газпром по телевизору.&lt;/p&gt;

&lt;p&gt;То же самое с Гуглом — казалось бы, он и так гребет деньги лопатой за рекламу;
собирает и продает личные данные; везде где можно предлагает платный Gemini. И
все равно этого мало, поэтому пусть заплатит потребитель.&lt;/p&gt;

&lt;p&gt;Тем чудикам, которые топят за ИИ, советую подумать: на ровном месте мы получили
прибавку к цене только потому, что компания внедряет ИИ. Такая вот новая
нормальность.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Jul 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/google-prices/</link>
        <guid isPermaLink="true">https://grishaev.me/google-prices/</guid>
        
        <category>google</category>
        
        <category>ai</category>
        
        
      </item>
    
      <item>
        <title>Кнопки в Гитхабе</title>
        <description>&lt;p&gt;У Гитхаба странный интерфейс — посмотрите на картинки ниже.&lt;/p&gt;

&lt;p&gt;Первая картинка: я хочу смержить пул-реквест. Нажимаю кнопку Squash and merge,
ожидаю, что произойдет то, что написано на кнопке — логично же?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/github-buttons/1.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Но мерджа не происходит. Вместо этого появляется форма с двумя полями, а кнопка
Confirm squash and merge проваливается ниже. Как у Чуковского: “и подушка как
лягушка ускакала от меня”. Нужно мотать вниз и жать ее еще раз.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/github-buttons/2.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Вот эти убегающие кнопки — бич Гитхаба. Вроде нажал, а всплыло что-то
другое. Кстати, после мерджа обычно я удаляю ветку, и кнопка Delete branch
оказывается на 10 сантиметров ВЫШЕ. То есть сначала нажал кнопку на высоте X,
потом X+10 см, потом снова X-10 см.  Дизайнеру Гитхаба это норм — не жмет, не
чешется.&lt;/p&gt;

&lt;p&gt;Вы, конечно, скажете: надо запросить описание коммита. Ну вот ниже на картинке
есть форма комментариев — она статична и не появляется по клику. Можно сделать
такой же статичный инбокс для мерджа. Еще лучше — сделать так, чтобы кнопка не
уплывала вниз, а оставалась на месте, при этом поле повляется ПОД ней. Чаще
всего я ничего не пишу, поэтому просто нажал бы кнопку еще раз.&lt;/p&gt;

&lt;p&gt;Решений может быть много, но то, что сейчас — крайне неудачно.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Jul 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/github-buttons/</link>
        <guid isPermaLink="true">https://grishaev.me/github-buttons/</guid>
        
        <category>ui</category>
        
        <category>github</category>
        
        
      </item>
    
      <item>
        <title>Игрушечный парсер</title>
        <description>
&lt;p&gt;Месяц назад я помогал одной студентке с домашней работой по Кложе. Да, я тоже
удивился: есть вуз, где на первом курсе пишут парсеры на этом языке. Сомневаюсь,
что у студентов что-то останется в голове: после интенсива Кложи их перебросили
на Пролог, и в чем замысел такого обучения — загадка.&lt;/p&gt;

&lt;p&gt;Тем не менее была домашка, которую нужно было сделать. Я помогал с двумя
заданиями: написать комбинаторные парсеры для разбора постфиксной и инфиксной
нотаций. Я всегда любил парсеры, и хоть не силен в них, не прочь что-нибудь
распарсить своими силами.&lt;/p&gt;

&lt;p&gt;Так что если вы студент(ка) и пишете парсеры, &lt;a href=&quot;https://github.com/igrishaev/toy-parser&quot;&gt;загляните в репозиторий&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Там простой модуль с комментариями и базовыми парсерами. Также есть два модуля
demo1 и demo2. В одном пример с префиксной нотацией, во втором — с
инфиксной. Второй пример интересен тем, что там используется рекурсивный парсер,
и поэтому нужны конструкции declare и var.&lt;/p&gt;

&lt;p&gt;Эти парсеры в высшей степени просты, и по-хорошему им нужна доработка. Скажем, в
случае ошибки возвращать не nil, а сообщение о том, что пошло не так. Это
сделано нарочно, чтобы акцент остался на главном: парсинге и комбинации
парсеров.&lt;/p&gt;

&lt;p&gt;Если будут вопросы, пишите.&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Jul 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/toy-parser/</link>
        <guid isPermaLink="true">https://grishaev.me/toy-parser/</guid>
        
        <category>programming</category>
        
        <category>clojure</category>
        
        
      </item>
    
      <item>
        <title>Поддежка и Джира</title>
        <description>&lt;p&gt;Как-то раз я общался с поддержкой крупного сервиса. У них что-то поплыло,
консоль залита кровью, все ответы — 500. В углу виджет поддержки, и я пишу:
ребята, у вас все плохо. Хром такой-то, вот скриншот.&lt;/p&gt;

&lt;p&gt;Сотрудник отвечает: ах, спасибо, что известили, сейчас поправим. Скажите, какой
у вас хром? Я говорю, вот же написал: версия 100500.42. Он такой — отлично,
считайте уже сделали.&lt;/p&gt;

&lt;p&gt;Через минуту: еще одна деталь, какая у вас операционная система? Мак,
говорю. Отлично, чиним в поте лица.&lt;/p&gt;

&lt;p&gt;Через минуту: а какая версия системы? 14 с копейками. Спасибо, уже патчим прод.&lt;/p&gt;

&lt;p&gt;Через минуту: какая у вас часовая зона? Тут я слегка разозлился и ответил, что
хватит приседать на уши. На что сотрудник ответил, что ему нужно заполнить тикет
в Джире: там 20 полей, и все обязательны. Уже заполнили 6, осталось 14. Без
заполнения он не сможет создать заявку, и она не пойдет программистам. И вообще
ничего не будет.&lt;/p&gt;

&lt;p&gt;Конечно, ничего я заполнять не стал и закрыл окно. Все это рассказал затем,
чтобы вы знали, как иной раз работает поддержка. Нет ответа на вопрос — нечего
ввести в поле — нет заявки — нет проблемы.&lt;/p&gt;

&lt;p&gt;Вот и отлично!&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Jul 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/support-jira/</link>
        <guid isPermaLink="true">https://grishaev.me/support-jira/</guid>
        
        <category>support</category>
        
        <category>jira</category>
        
        
      </item>
    
      <item>
        <title>Неэффективный ввод и вывод</title>
        <description>&lt;p&gt;Мое частое замечание к коду — неэффективный ввод-вывод. Примеры:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;чтобы пройтись по строкам файла, человек читает его в память целиком и
разбивает символами &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\r\n&lt;/code&gt;. Рано или поздно прилетает CSV на 5 гигабайт, и
машине становится плохо.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;То же самое с джейсоном: есть стрим, но разработчик читает его в гигантскую
строку, а потом парсит ее.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Нужно записать в файл 100 тысяч строк? Человек джойнит их разделителем,
получает километровую строку и пишет в файл.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Различные кодирования — base64, gzip и другие — делаются также: данные
читаются в память целиком, из них получается результат тоже в памяти.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;При загрузке файла в S3 он целиком читается в байтовый массив, затем массив
передается в запрос.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;При этом разработчик обмазывает код вызовами gc в надежде, что это поможет.&lt;/p&gt;

&lt;p&gt;Сколько подобных ошибок я исправил — не перечесть. В числе прочего был сервис,
который падал от недостатка памяти, хотя ее было выделено запредельное
количество. Оказалось, разработчик делал все из списка выше. Он получал огромные
файлы, читал их в память, парсил, кодировал в JSON и gzip, используя строки и
массивы. Когда код падал от OOM, он поднимал лимиты в облаке.&lt;/p&gt;

&lt;p&gt;Это лишний раз подтверждает: сколько памяти ни дай, плохой код сожрет ее всю.&lt;/p&gt;

&lt;p&gt;А решение простое — байтовые и символьные потоки. Ту же Джаву можно ругать за
многое, но в ней очень хорошие потоки (абстрактные классы &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Input-&lt;/code&gt; и
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OutputStream&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reader&lt;/code&gt; и &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Writer&lt;/code&gt;). У них много наследников, каждый из которых
делает свою работу. Например, буферизирующий поток, который сглаживает
неравномерность сети и файлов. Потоки для сжатия, когда пишешь в него, а данные
сжимаются в полете. Потоки, связанные с файлами, сокетами или
устройствами. Потоки с подсчетом текущей строки и символа, потоки-пайпы (piped)
для “переливания” данных между тредами — всего этого навалом.&lt;/p&gt;

&lt;p&gt;Легко найти сторонние потоки для подсчета MD5 и других хешей. Например, пишешь в
условный &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MD5OutputStream&lt;/code&gt;, и хеш считается в полете. В конце вызываешь
.getHash, и готово.&lt;/p&gt;

&lt;p&gt;Часто задача решается тем, что нужно построить стек потоков и скормить ему
данные. Это труднее, чем прочитать файл в память и разбить на строки. Но не
придется чинить в пятницу вечером.&lt;/p&gt;

&lt;p&gt;Уделите время потокам ввода-вывода. Это прям очень полезная вещь.&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Jul 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/poor-io/</link>
        <guid isPermaLink="true">https://grishaev.me/poor-io/</guid>
        
        <category>programming</category>
        
        <category>io</category>
        
        
      </item>
    
      <item>
        <title>У заказчика праздник</title>
        <description>&lt;p&gt;Когда у заказчика праздник — это праздник для меня, потому что я могу поработать
спокойно. Нет созвонов и трескотни в чатах. Даже если заглушено все что можно,
шум настигает все равно.&lt;/p&gt;

&lt;p&gt;Заметил, что важно само ощущение того, что тебя никто не беспокоит. Так сказать,
предвкушение тихого дня. Бывает, в такой день делаешь то, что собирался
неделями.&lt;/p&gt;

&lt;p&gt;Сегодня как раз такой случай. У заказчика выходной, и я сделал то, что долго
планировал. Формально никто не мешал сделать это в обычные дни, но уверенность в
том, что никто не потревожит, дала прилив сил.&lt;/p&gt;

&lt;p&gt;Честное слово, нам нужны дни, когда нет ни созвонов, ни чатов, ни почты. Дни,
когда можно поработать в полном отрыве от команды и вечером написать, как много
сделал.&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Jul 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/no-calls/</link>
        <guid isPermaLink="true">https://grishaev.me/no-calls/</guid>
        
        <category>work</category>
        
        <category>life</category>
        
        
      </item>
    
      <item>
        <title>Австралийское время</title>
        <description>&lt;p&gt;Несколько раз я упоминал про один австралийский стартап. При всех минусах
кодовой базы у него было и преимущество: разница во времени с
заказчиком. Пересечение было совсем небольшим, буквально два-три часа. День
начинался с созвона, мне давали задачу, мы ее обсуждали. Потом народ из
Австралии шел ужинать, и день был полностью моим. Без созвонов, чатов и
обсуждений. При этом я всегда имел две активных задачи, чтобы в случае зависания
одной переключиться на другую. Утром я докладывал, что сделал вчера, и все были
довольны.&lt;/p&gt;

&lt;p&gt;Много воды с тех пор утекло, но порой я скучаю по такому формату. Разница с
заказчиком в час-два означает, что ты не делишь с ним головные боли и причуды:
планинги, ретро, спринты, тимбилдинги, уведомления в Тимс. Иной раз хочется,
чтобы ничего этого не было. Чтобы был только git pull и git push, ну и
зарплата. А на тимбилдинге и без меня обойдутся.&lt;/p&gt;

&lt;p&gt;Это так, минутка малодушия. Вздохнул и пошел дальше.&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Jul 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/no-calls-2/</link>
        <guid isPermaLink="true">https://grishaev.me/no-calls-2/</guid>
        
        <category>work</category>
        
        <category>australia</category>
        
        
      </item>
    
  </channel>
</rss>
