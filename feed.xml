<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ivan Grishaev's blog</title>
    <description>Writing on programming, education, books and negotiations.
</description>
    <link>https://grishaev.me/</link>
    <atom:link href="https://grishaev.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 12 Dec 2023 12:18:39 +0000</pubDate>
    <lastBuildDate>Tue, 12 Dec 2023 12:18:39 +0000</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>Java</title>
        <description>&lt;p&gt;У меня появился пет-проект, и самое главное — он не на Кложе, а на Джаве. Пишу
уже две недели, и вот какие ощущения.&lt;/p&gt;

&lt;p&gt;Современная Джава неожиданно хороша. Если взять последнюю версию 21, не цепляясь
на бородатое легаси, то писать на ней довольно приятно. Скажем, везде вместо
классов использовать рекорды — это неизменяемые классы, которые экономят код и
несут клевые вещи из коробки.&lt;/p&gt;

&lt;p&gt;Или использовать паттерн-матчинг по классам, например:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BindComplete&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ignored:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthenticationOk&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ignored:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthenticationCleartextPassword&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ignored:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;handleAuthenticationCleartextPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ParameterStatus&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;x:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;handleParameterStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SomeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;no branch&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Когда-то давно это делалось паттерном Visitor (Посетитель). От одного упоминания
на зубах скрипит песок. А теперь это несколько строчек. Современной Джаве нужно
все меньше паттернов, потому что они нативо поддерживаются языком. Это
происходит медленно, в год по чайной ложке, но в данном случае медлительность
значит неотвратимость.&lt;/p&gt;

&lt;p&gt;В 21 Джаве завезли виртуальные треды. С ними можно писать блокирующий код, а JDK
сама определит, когда тред можно остановить и возобновить. Конечно, нужно знать
детали процесса. &lt;a href=&quot;/en/virtuoso/&quot;&gt;Недавно я погонял&lt;/a&gt; виртуальные треды из Кложи,
и прям очень приятно.&lt;/p&gt;

&lt;p&gt;Хочется отметить Джавный тулинг. Идея Community Edition очень хороша. Все
подхватывает, безошибочно подсказывает варианты в выпадашках. В Кложе такого нет
и никогда не будет.&lt;/p&gt;

&lt;p&gt;Да, в Джаве нет репла, но вот смотрите: я написал класс Main с запускалкой
кода. Жму зеленую стрелку — все выполнилось. Если что-то упало, я ставлю дебаг
на строку и жму кнопку с жуком. Исполнение прерывается на отметке, вижу
локальное состояние, правлю код, запускаю. Прекрасно.&lt;/p&gt;

&lt;p&gt;В Кложе, наоборот, нет встроенного отладчика вообще. Есть отладчик в
emacs-cider, но он странный и работает через раз. Для себя я написал &lt;a href=&quot;https://github.com/igrishaev/bogus&quot;&gt;отладчик
bogus&lt;/a&gt;, и он спасал меня раз двести, не меньше. Но моя поделка ничего не
решает — ей пользуются три анонимуса, а остальные дебажат принтами или через
tap.&lt;/p&gt;

&lt;p&gt;Конечно, начинать проект на Джаве 21 — это утопия. Куда бы вы не пошли, вас
будет ждать легаси, которому, дай бог, обновиться бы до Джавы 17. Там будут
паттерны, частично инициированные POJO и прочие прелести. Но хобби на свежей
Джаве — почему нет?&lt;/p&gt;

&lt;p&gt;Джава развивается так быстро, что не успеваешь следить. В нее вливают горы
денег, а работают над ней одни из умнейших людей мира. Это
чувствуется. Например, в случае с виртуальными тредами пришлось пройти по всей
SDK и поправить все блокирующие вызовы. Колоссальная работа! Все, чтобы
программист поменял &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FixedPoolExecutor&lt;/code&gt; на &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VirtualThreadExecutor&lt;/code&gt;, и вжух —
полетело.&lt;/p&gt;

&lt;p&gt;Не все принимают эту данность. Я знаю человека, который уверен, что Джава — это
собственность Оракла (хорошо хоть не Sun), за нее нужно платить, она тормозная и
ест много памяти. При этом на Джаве он писал 15 лет назад. Уютный мирок
заблуждений приятней, чем реальность.&lt;/p&gt;

&lt;p&gt;Сказанное не значит, что я записался в джависты. Просто у Джавы можно многому
поучиться в плане развития. Взять на заметку.&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Dec 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/java/</link>
        <guid isPermaLink="true">https://grishaev.me/java/</guid>
        
        <category>programming</category>
        
        <category>java</category>
        
        
      </item>
    
      <item>
        <title>Обложки</title>
        <description>&lt;p&gt;Я не могу смотреть на обложки, где автор кривляется. Например, делает грустное
или злое лицо. Кривит рот. Или в заголовке указано “Choosing X vs Y”, и автор
подпирает подбородок и смотрит вверх — типа задумался.&lt;/p&gt;

&lt;p&gt;Помните Крошку Енота? Не строй рожи, а улыбнись! И оно к тебе вернется.&lt;/p&gt;

&lt;p&gt;Не буду приводить примеры, чтобы не обидеть кого-нибудь. Но блин, какая же это
тупизна. Хотя и здесь можно найти пользу: если автор кривляется, смотреть видео
не нужно.&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/video-covers/</link>
        <guid isPermaLink="true">https://grishaev.me/video-covers/</guid>
        
        <category>life</category>
        
        
      </item>
    
      <item>
        <title>О заголовках</title>
        <description>&lt;p&gt;Небольшая заметка о том, как писать заголовки. Главное правило — заголовок не
должен делать предположений о читателе или диктовать ему шаги. Читатель —
абсолютно нейтральная сторона. Указывать ему — все равно что ломать четвертую
стену, то есть фу.&lt;/p&gt;

&lt;p&gt;Примеры плохих заголовков:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;10 фактов о JavaScript, которые должен знать каждый разработчик.&lt;/strong&gt; Ничего я тебе
не должен, отвали.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;20 фактов о Python, которые вы не знали.&lt;/strong&gt; Я на нем 8 лет писал, все я знаю.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Почему ваш код — отстой.&lt;/strong&gt; Это у тебя отстой, не переноси с больной головы
не здоровую.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Посмотрите это видео прямо сейчас или добавьте в закладки.&lt;/strong&gt; Спасибо, сам
разберусь, что и когда смотреть и где хранить.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Удивляет, что вроде бы нормальные ребята нет-нет да озаглавят материал в таком
духе. Один кложурист написал статью “Why your REPL experience sucks”. Я
посмотрел код, а он там жестко накосячил. Интересно выходит: косячит он, а
experience sucks мой.&lt;/p&gt;

&lt;p&gt;Или видел заголовок Медузы: вышло какое-то видео, посмотрите сейчас или добавьте
в закладки. Может, еще выслать письменный отчет о просмотре? И переслать ссылку
десяти знакомым?&lt;/p&gt;

&lt;p&gt;Нельзя тыкать читателю, что он знает и что нет, что и когда смотреть. Читатель
сам прекрасно разберется.&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/on-headers/</link>
        <guid isPermaLink="true">https://grishaev.me/on-headers/</guid>
        
        <category>text</category>
        
        <category>headers</category>
        
        
      </item>
    
      <item>
        <title>DVD-квесты</title>
        <description>&lt;p&gt;Накатило воспоминание, и хочу им поделиться с вами.&lt;/p&gt;

&lt;p&gt;В моем детстве не было интернета, и контент доставали на DVD. Это были фильмы,
софт, музыка любимых групп. И надо сказать, кроме содержимого диска я всегда
интересовался его оформлением.&lt;/p&gt;

&lt;p&gt;На DVD мог быть не только фильм, но и интерактивное меню. Например, при
включении диска показывалась менюшка, где можно было выбрать просмотр сначала,
конкретный эпизод или фанатский контент: короткометражки, бекстейдж и прочее.&lt;/p&gt;

&lt;p&gt;Технически менюшка могла быть как картинкой, так и видео. Классно смотрелись
менюхи, где фоном шло видео, а кнопки тоже были анимированные, например,
короткие сцены к эпизодам. Кнопки работали как горячие области: на них можно
было кликать. По клику человек улетал на другую менюху или видео.&lt;/p&gt;

&lt;p&gt;Одно время я работал на &lt;a href=&quot;/altes/&quot;&gt;телеканале Альтес&lt;/a&gt;, и там мне это очень
пригодилось. Мы частенько записывали клипы местных артистов на DVD, и до меня
оформления дисков как такового не было. В программе для записи выбирали менюху
по умолчанию, и все. А я заморочился и сделал менюхи в стиле каждого
артиста. Это был фурор, и подобная вещь стала стандартом: нам, пожалуйста, с
менюшкой, как у тех ребят.&lt;/p&gt;

&lt;p&gt;Так вот, у меня было много дивидишек, красивых и не очень, но один я никогда не
забуду. В то время я увлекался группой Korn — я и сейчас их люблю, но меньше — и
попался мне их диск. Я думал, что на нем обычный сборник клипов, но то, что было
внутри, превзошло все ожидания.&lt;/p&gt;

&lt;p&gt;Это был настоящий DVD-квест! Действие в нем происходит от первого лица. Вначале
беднягу закатывают на каталке в дурдом а-ля Сайлент Хилл. Всюду инвалидные
коляски, решетки и крючья на потолке. Герой встает и начинает исследовать
локацию.&lt;/p&gt;

&lt;p&gt;На Ютубе нашлись фрагменты этого диска. Ниже — кадр из заставки и ссылка на
видос:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/dvd-quests/1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;https://www.youtube.com/watch?v=KkioRvvyVRw&lt;/p&gt;

&lt;p&gt;Каждая локация — это комната с интерактивными предметами. Посмотрев на предмет,
герой испытывает припадок, и ему показывают видео с группой Korn. В основном это
бекстейдж, где музыканты обдолбанные в трейлере, видео с репетиций или просто
балдеж. Во время блужданий по дурдому можно попасть в комнату охраны с кучей
телевизоров, и по клику на каждый показывается клип. Контент нужно было найти!&lt;/p&gt;

&lt;p&gt;Особо хотелось бы рассказать про навигацию между комнатами. Каждая комната была
не статичной картинкой, а видео. Например, крючья на потолке качались и
бренчали, проводка искрила, вода текла из пробитых труб. На фоне звучал зловещий
амбиент. В одной из комнат был псих в рубашке на электрическом стуле. Набор
штампов, но как все это было оформлено!&lt;/p&gt;

&lt;p&gt;Если “потрогать” предмет, например череп на столе или анатомический атлас, герой
“видел” историю этого предмета: кто его держал до вас, что происходило в комнате
и так далее.&lt;/p&gt;

&lt;p&gt;Навигация между комнатами была связной: если нажать на дверь, включался ролик,
как герой отворяет ее и попадает в другую локацию. Если нажать на вентиляцию в
стене, он вставал на цыпочки, чтобы подглядеть, что там твориться. Были приколы
с пролетом сквозь трубы с червями и мокрицами. Все вместе это давало такой
эффект присутствия, что не найду слов.&lt;/p&gt;

&lt;p&gt;Ну и наконец: там была скрытая локация. Представляете? Секретная комната! На
DVD! В одном месте была лестница в подвал, а там — дверь с кодовым замком. Замок
был представлен отдельной менюшкой с кнопками от 1 до 9. Нужно было ввести
четыре правильных цифры. При ошибке тебя сбрасывали на начало ввода.&lt;/p&gt;

&lt;p&gt;По ссылке ниже другая головоломка с этого диска. Видимо, либо их было две, либо
я что-то путаю.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/dvd-quests/2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;https://www.youtube.com/watch?v=ofR1hijB1rw&lt;/p&gt;

&lt;p&gt;Вы представляете, как трудно это было сделать? У DVD нет переменных и состояния,
он может только показывать видео или меню. Поэтому создатели диска сделали пять
сцен с замком. Первая — когда ничего не введено и одна кнопка ведет вперед, а
остальные — назад. Вторая — когда правильно введена первая цифра; на ней уже
другая кнопка ведет вперед, а остальные — на первую сцену. Третья — когда
введены две цифры; четвертая — когда введены три, и последняя правильная
открывает дверь.&lt;/p&gt;

&lt;p&gt;Чтобы вы оценили масштаб, нарисую граф переходов:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/dvd-quests/3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Видите? Я даже две полных сцены не нарисовал, а линии уже не дают понять, что
происходит. А там этих сцен было минимум пять.&lt;/p&gt;

&lt;p&gt;Код на двери был 19… чего-то там: год образования группы. За дверью находился
морг с совсем уж трешовым оформлением. На стеллажах лежали трупы музыкантов;
если их осмотреть, показывали крайне упоротое видео.&lt;/p&gt;

&lt;p&gt;Вот какой был дивидишник! Пишу о нем потому, что хочу воздать должное его
создателям. Как же они заморочились! Надо было найти подходящий подвал,
разложить реквизит, все отснять, смонтировать, наложить криповые эффекты. Надо
было продумать карту, маршруты передвижения, какое видео и где разместить. Сцена
с кодовым замком по сложности была как четверть всего проекта. И сделать все это
в программе, которые были рассчитаны на пару менюшек! Это просто мое уважение.&lt;/p&gt;

&lt;p&gt;Сколько часов я провел, слоняясь по тем подвалам! Это была как будто игра, но и
не игра — а квест в телевизоре.&lt;/p&gt;

&lt;p&gt;И хотя я ни разу не видел подобных дисков, один приятель рассказывал о чем-то
похожем. У него был официальный DVD с фильмом “Люди в черном”, и там зритель
оказывался в лаборатории. Можно было либо смотреть фильм, либо исследовать
локации и заглядывать в предметы, где спрятан фанатский контент.&lt;/p&gt;

&lt;p&gt;Пишу это и понимаю, что ничего подобного сегодня быть не может. У нас есть
стриминговые сервисы и торренты, но ни то, ни другое не предполагает оформления:
ни меню, ни фанатского контента.&lt;/p&gt;

&lt;p&gt;Это ни в коем случае не сожаление о прошлом, а попытка его увековечить. Да, была
такая прикольная фигня. Да, было клево. Да, да.&lt;/p&gt;

&lt;p&gt;И вернемся в сегодня.&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/dvd-quests/</link>
        <guid isPermaLink="true">https://grishaev.me/dvd-quests/</guid>
        
        <category>life</category>
        
        <category>dvd</category>
        
        
      </item>
    
      <item>
        <title>Data-Driven Development is a Lie</title>
        <description>
&lt;p&gt;&lt;strong&gt;UPD:&lt;/strong&gt; there is &lt;a href=&quot;https://news.ycombinator.com/item?id=38345843&quot;&gt;discussion on Hacker News&lt;/a&gt; on that article. Thank you
Mike for letting me know.&lt;/p&gt;

&lt;p&gt;In the Clojure community, people often discuss such things as &lt;a href=&quot;https://en.wikipedia.org/wiki/Data-driven_programming&quot;&gt;data-driven
development&lt;/a&gt;. It is like you don’t write any code or logic. Instead, you
declare data structures, primarily maps, and whoosh: there is a kind of Deus ex
Machina that evaluates these maps and does the stuff.&lt;/p&gt;

&lt;p&gt;That’s OK when newcomers believe in such things. But I feel nervous when even
experienced programmers tell fairy tales about the miracle that DDD brings to
the scene. That’s a lie.&lt;/p&gt;

&lt;p&gt;I’ve been doing Clojure for nine years, and DDD is useful in rare cases
only. Yes, in some circumstances, it saves one’s time indeed. But only
sometimes, not always! And it’s unfair: people give talks at conferences about
how successful they were with DDD in their project. But they would never give a
speech about how they messed up by describing everything with maps.&lt;/p&gt;

&lt;p&gt;Let me give you an example. Imagine we’re implementing a restriction
system. There is a context, and we must decide whether to allow or prohibit the
incoming request. Obviously, every Clojure developer would do that with maps. We
declare a vector of maps where each map represents a subset of the
context. Should at least one rule match the context, we allow the request.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Something like this:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RULES&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:some-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:other-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:third-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foobar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:some-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:other-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:third-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sample&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matches?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select-keys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allow?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;matches?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RULES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Above, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RULES&lt;/code&gt; var is declared on top of the module, but ideally, it comes
from an EDN file.&lt;/p&gt;

&lt;p&gt;It looks short and solid. Moreover, &lt;a href=&quot;https://youtu.be/jlPaby7suOc?t=998&quot;&gt;This! Is! Data!&lt;/a&gt; The next time a
business wants us to add a new rule, we will extend the vector with a map. At
this point, a programmer who has implemented this gets a ticket to the nearest
conference and gives a speech about their success. This talk gets shared across
the community channels. This is how the cargo cult grows, in fact.&lt;/p&gt;

&lt;p&gt;As I mentioned, none of the YouTube talks tells about what happens after the
developer returns from the conference. There are upcoming changes in the logic:
a certain field might have multiple allowed values. For example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:role&lt;/code&gt; is
either an admin or a manager. The developer scratches his head but quickly
finds a solution: let some rule values be a set. If a value is a set, we process
it using the contains? function. Otherwise, the values get compared as usual.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RULES&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:some-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:other-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:role&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;manager&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;;; when matching the fields&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;contains?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:else&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good. But in a month, there is a new requirement: negation. Now we allow the
request if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:role&lt;/code&gt; field is of any value but not manager. Again, the
developer gets puzzled for a while, but then he finds the solution with the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[:not ...]&lt;/code&gt;  clause. If it’s a vector and the first item is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:not&lt;/code&gt;, we use
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;not=&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RULES&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:some-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:other-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:role&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:not&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;manager&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;contains?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;vector?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:not&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;not=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:else&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a month, the business asks to add ranges and comparisons. Say, to disallow
the request if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:level&lt;/code&gt; field is in range of 3 to 9 (inclusive and
exclusive, pay attention). Here come the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[:in :field [3 9]]&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[:&amp;lt; field 9]&lt;/code&gt;
expressions in an EDN file. The developer gets angry as the house of cards he
has built has turned unstable.&lt;/p&gt;

&lt;p&gt;One day, something that he’s been afraid of all this time has finally come. He’s
asked to introduce complex and/or/not logic. If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(foo and bar) or (foo and not
this)&lt;/code&gt;, allow the request. If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(this and that) or (foo and bar)&lt;/code&gt;, disallow
it. What is the outcome? Our developer &lt;em&gt;is smart&lt;/em&gt; and has brief knowledge about
interpreters, so he considers this a challenge. First, he extends the maps using
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[:or ...]&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[:and ...]&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[:not ...]&lt;/code&gt; notation:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:or&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:role&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;manager&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:level&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;John Smith&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:matches&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;some@pattern&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then he writes a primitive interpreter that walks a tree and processes it
correctly. Of course, he reckons himself a genius. Only he knows how this
interpreter works. There is no documentation; it’s like a meme: I’m the
documentation!&lt;/p&gt;

&lt;p&gt;Sarcasm aside, the developer has ended up with a real mess. Although it’s still
a Data-Driven approach indeed, it’s awful. The rules are no longer data but a
poorly designed DSL. The logic used to scan a vector of maps has grown into a
poorly designed interpreter. Both are fragile, buggy, and uneasy to tweak.&lt;/p&gt;

&lt;p&gt;Should the programmer really care about the quality of the code, he or she would
notice that the initial idea of relying on data didn’t pay off. At some point,
they should have stopped and said: &lt;strong&gt;we won’t go further with data&lt;/strong&gt;. Complex
checks are easier to implement in pure Clojure than crafting an interpreter. But
they’ve committed way too far into this. They’re afraid for their reputation:
they think admitting their mistakes is a sign of weaknesses (although it’s a
sign of strength instead). They’ve watched too many YouTube videos about the
divinity of Data-Driven development, and they’re still looking for a mysterious
Graal.&lt;/p&gt;

&lt;p&gt;Everyone who is praying for DDD must bear in mind the law of energy
conservation. Either express the logic in code or declare some data and a
framework that traverses the data and does something. In ordinary Clojure code,
the complexity is distributed evenly. The DDD approach shifts that
balance. Writing a vector of maps takes 5-10% of the total effort, but crafting
a framework that runs that vector is 90-95%. It’s not good for a project when
complexity differs dramatically. A new business requirement might easily hit the
most complex part of the project. Nothing prevents the business from asking to
check regular expressions; or if it’s a leap year; or if the client has a
birthday today; or if their last name is Smith, or similar.&lt;/p&gt;

&lt;p&gt;Thus, don’t write DDD frameworks. Don’t grow the complexity of the project. Use
the standard Clojure facilities like functions and maps but not DSL and DDD.&lt;/p&gt;

&lt;p&gt;By the way, do you know that DDD has been with us for years? It’s good old XML!
There have been times when developers were obsessed with XML. That markup
language was everywhere: to describe forms, settings, dependencies, workflow,
schemas and even data transformation and logic! Would you like to maintain a
project where every single bit is an XML file?&lt;/p&gt;

&lt;p&gt;These days have passed, fortunately. But that weird willingness to describe
everything with EDN reminds me of XML. What is the difference, after all? Both
are definitions only, which is the top of an iceberg. Deep inside, there is a
framework that drives these definitions.&lt;/p&gt;

&lt;p&gt;If asked to implement that restriction system, I would start with maps
too. But’d change something as soon as the rules get more complex. I’d make a
rule not map only but a function as well. Say, if it’s a map, I check if it’s a
subset of the context. But if it’s a function, I apply it to the context and
decide on the boolean result:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RULES&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; a simple map case&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:some-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:other-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:third-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foobar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

   &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; something more complex&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;some-complex-check&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matches?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select-keys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fn?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’d even do it in this way:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kv=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;every-pred&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kv=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kv=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:role&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then I’d add more primitives for regex, patterns, ranges, etc and compose what I
need from them. In Clojure, functions get composed great!&lt;/p&gt;

&lt;p&gt;It’s no longer the data-driven approach, but I don’t care. A function is much
simpler than a map and an interpreter that processes it. With a function, I can
express any logic I want. There is no need to implement negation, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;or&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;and&lt;/code&gt;
operators and more. We’re already given a great language — Clojure — so why
would you stick with EDN and a poor interpreter?&lt;/p&gt;

&lt;p&gt;One may say that DDD is great because it’s about the data. Adding a new rule
boils down to extending an EDN file but not writing code. But in fact, there is
no difference at all. Even if you edit an EDN file, you start a new Git branch,
edit a file, add a new test and create a pull request. The pipeline is the same
as it has to be for the ordinary code. When editing a .clj file, you create a
branch, add a new function, write a test and open a pull request. &lt;strong&gt;Both ways
involve the same steps.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Data-driven development lacks debugging capabilities, and that’s really an
issue. Remember that vector of maps and functions which I proposed above:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RULES&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; a simple map case&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:some-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:other-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:third-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foobar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

   &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; something more complex&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;some-complex-check&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Should a function-driven rule behave weirdly, I’d put a debug tag, run a test
and easily debug it. I’d just hang in the middle of the execution of that
function and see all the local vars. I can even try some expressions in
REPL. But how in the world are you going to debug a map? It’s unthinkable
because it’s just data. You cannot blame a map! You need to debug your
framework, which is much harder than debugging a single function. Frameworks
operate on context and lambdas, and debugging them properly requires more
effort.&lt;/p&gt;

&lt;p&gt;Talking about debugging, there is such a thing as stack trace. It’s extremely
important when dealing with logged exceptions. Now, if you have a function-based
rule that has failed due to an error, you’re good. You have a message, a file
and a line number pointing to the cause of an exception. But the stack trace
might be completely different if you have a framework that operates with maps
and lambdas. The framework tried to compare to maps, but it failed with
NPE. What were these maps? You’ll never know.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;Did you watch Kung Fu Panda? &lt;a href=&quot;https://youtu.be/K7DnFGdqT8c?t=10&quot;&gt;There is no secret ingredient.&lt;/a&gt; That ingredient
is you. I want you to stop looking for a magic trick that would make a job for
you. There is no trick or technique; it’s all about diligence and simplicity.&lt;/p&gt;

&lt;p&gt;Keep your code simple, dull and clear. The complexity must be distributed evenly
across the codebase. Avoid various Somethig-Driven approaches and DSLs at all
costs. A series of simple functions is much better in terms of maintainability.&lt;/p&gt;

&lt;p&gt;Don’t trust YouTube videos and talks. &lt;strong&gt;Every talk is a staged show&lt;/strong&gt; where the
best parts are exposed to the viewer, and the failures are held back. No one
gets to the scene to tell us how they’ve messed up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trust yourself only.&lt;/strong&gt; If you are really interested in some idea or
technology, test it with your hands. Don’t blindly trust those videos where
speakers say it’s amazing. Instead of sharing such a video, say: I’ve checked
it, and it’s great. Or, I’ve checked it, and it’s not as great as it’s
said. Your own experience is much more valuable than modern trends awareness.&lt;/p&gt;

&lt;p&gt;That’s all.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Nov 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/en/ddd-lie</link>
        <guid isPermaLink="true">https://grishaev.me/en/ddd-lie</guid>
        
        <category>clojure</category>
        
        <category>programming</category>
        
        <category>ddd</category>
        
        <category>lie</category>
        
        
      </item>
    
      <item>
        <title>UI и пустота</title>
        <description>&lt;p&gt;Уже не раз писал о проблемах современного дизайна, но повторюсь. Одна из главных
проблем — избыток пустого места. Там, где можно уместить информацию, сквозит
пустота, а полезные вещи спрятаны под выпадашку.&lt;/p&gt;

&lt;p&gt;Это просто бич современности! Растут расширения мониторов, завезли ретину,
телефоны стали лопатами — а информации меньше, чем на стареньком ЭЛТ-мониторе.&lt;/p&gt;

&lt;p&gt;Из сегодняшнего: интерфейс Гугл-переводчика. Обратите внимание на секцию “More
translations.” Зачем ее сворачивать? Под ней сплошная пустота, что мешает сразу
показать другие переводы?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/ui-emptiness/1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(Подпись, чтобы показать, где кончается скриншот)&lt;/p&gt;

&lt;p&gt;Ладно, спрятали под выпадашку. Но почему тогда не полностью? Почему первый
вариант “общественное…” все-таки вылез? А если он вылез, то зачем сокращать до
многоточия? Там же полно места для “общественного питания”. Там ДО ХРЕНА пустого
места, все вместится и еще останется.&lt;/p&gt;

&lt;p&gt;Дизайнеры, я правда хочу знать: зачем вы прячете информацию? Кто вас этому
научил? Это плохо, скорей переучивайтесь.&lt;/p&gt;

&lt;p&gt;А недавно в одном чате набросили книгу &lt;a href=&quot;https://www.refactoringui.com/&quot;&gt;Refactoring UI&lt;/a&gt;. Переделка
интерфейса. Название хорошее, неужели кто-то одумался? Читаю тезисы, а там:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Instead, try adding a box shadow, using contrasting background colors, or
simply adding more space between elements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;И хочется выйти в окно. Мало того, что какие-то уродцы сливают полезное место в
унитаз; так еще пишутся книги, где это прямо советуют! Сделай лучше, добавь
пустоты!&lt;/p&gt;

&lt;p&gt;Пожалуйста, не покупайте эту книжку. Пожалейте пользователей.&lt;/p&gt;

</description>
        <pubDate>Sat, 18 Nov 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/ui-emptiness/</link>
        <guid isPermaLink="true">https://grishaev.me/ui-emptiness/</guid>
        
        <category>ui</category>
        
        <category>emptiness</category>
        
        
      </item>
    
      <item>
        <title>Подсветка в Телеграме</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/static/aws/tele-hl/1.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В Телеграме появилась подсветка ссылок и цитат. Теперь у нас синенькое,
зелененькое, розовенькое, голубенькое сразу вместе, одно за другим. Ну и
уродские шрифты в плашках Гитхаба.&lt;/p&gt;

&lt;p&gt;Молодцы, старались. Один вопрос – зачем? Чтобы что?&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Nov 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/telegram-highlight/</link>
        <guid isPermaLink="true">https://grishaev.me/telegram-highlight/</guid>
        
        <category>telegram</category>
        
        <category>highlight</category>
        
        <category>update</category>
        
        
      </item>
    
      <item>
        <title>Восточные сказки</title>
        <description>&lt;p&gt;Когда я читал восточные сказки в детстве, то, обращал внимание на сюжет. Кто
кого убил и обманул, чью жену украл. Перечитывая сейчас, замечаю многое из того,
что не видно ребенку, но понятно взрослому.&lt;/p&gt;

&lt;p&gt;Наиболее интересное наблюдение — это психотип древних людей. Они в буквальном
смысле большие дети. Население Персии пребывает в трех состояниях: радость,
гнев, страх. Переход от одной стадии к другой случается мнговенно как у
психически больных.&lt;/p&gt;

&lt;p&gt;Вот персонаж поел и выпил, ему хорошо. В следующую минуту ему возразил слуга;
теперь он кричит и требует отрубить голову. Появляется визирь, он впадает в
страх и плачет. Все это — за считанные минуты.&lt;/p&gt;

&lt;p&gt;Герои никогда не говорят спокойно. Малейшее несогласие или возражение — и они
кричат, плачут, словом, что угодно, лишь бы не спокойно обсудить решение.&lt;/p&gt;

&lt;p&gt;Еще одно наблюдение — герою не зазорно делать подлости. Может быть, вы забыли,
чем кончается оригинальная сказка про Аладдина, но я напомню. Он пробирается в
замок врага, который похитил принцессу. Они с принцессой договариваются: та
соблазнит злодея и усыпит сонным порошком, а Алладдин убъет. Так и выходит:
Аладдин стоит за шторой, и когда злодей падает сонный, спокойно рубит ему
голову.&lt;/p&gt;

&lt;p&gt;Это отличается от европейского канона, согласно которому герой вступает в бой
открыто. И не только открыто, но и на равных: без лазеров и пулеметов, один на
один на кулаках. Представьте кассовый фильм, где герой убивает врага ножом в
спину и едет домой. Зрители будут недовольны.&lt;/p&gt;

&lt;p&gt;Чтобы два раза не вставать: в оригинале Аладдина зовут Ала Ад’Дин. Такое вот
сложное имя, которое упростили для иностранного читателя.&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Nov 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/tales/</link>
        <guid isPermaLink="true">https://grishaev.me/tales/</guid>
        
        <category>tales</category>
        
        <category>alladdin</category>
        
        
      </item>
    
      <item>
        <title>Сайт взломали</title>
        <description>&lt;p&gt;Это провокационный заголовок: на самом деле мой сайт не взломали. Просто я часто
слышу, как взломали чей-нибудь сайт и выложили крамолу. Хочу высказаться на этот
счет.&lt;/p&gt;

&lt;p&gt;Чтобы сайты не взламывали, их устойчивость должна быть заложена в
архитектуру. Чем больше в ней уровней, тем больше уязвимостей на сайте. Возмите
блог на Вордпрессе: это Линукс, Апач, PHP, MySQL и JavaScript. Вместе они ведут
себя как клубок змей. У каждой технологии свои примочки, уязвимости (известные и
пока еще нет), конфиги и настройки. Вероятность, что все они настроены
правильно, редко бывает стопроцентной.&lt;/p&gt;

&lt;p&gt;Наверное, вы думаете, что хакеры — это гении в очках и плащах, как в
Матрице. Они знают машкоды, решают крипто-хеши на бумажке и все такое. Это не
так. Современные хакеры — это мальчики, которые в лучшем случае знают Питон или
баш, чтобы написать цикл. Их работа сводится к тому, чтобы натравить на сайт
опасный скрипт. Если известно, что сайт сделан на CMS версии X, и она устарела
хотя бы на год, то не сомневайтесь — сайт работает лишь потому, что еще не
привлек внимания.&lt;/p&gt;

&lt;p&gt;Я пишу это к тому, что безопасность сайта обеспечивается его статичностью. Есть
набор md-файлов, и есть скрипт, который собирает статичный сайт. Это папка с
index.html и подпапками, где разложены статьи. Такой сайт можно хостить хоть в
S3, хоть на домашнем роутере. Сломать его можно одним способом — украсть
SSH-ключ или AWS-креды, что к самому сайту не имеет отношения.&lt;/p&gt;

&lt;p&gt;Удивляет, что хотя большинство сайтов могли бы быть статичными, из все равно
делают на вордпрессах и джангах. Они падают, жрут ресурсы, сосут деньги из
бюджета. При этом на сайте почти нет интерактивности: в лучшем случае форма
обратной связи, которая отправляет заявку во внутренний документооборот.&lt;/p&gt;

&lt;p&gt;Казалось бы: если прям так нужна интерактивность, сделай статичный сайт, а для
формы прикрути лямбду или иной бекенд для приема заявок. Даже если бекенд
упадет, сайт продолжит работу. Но нет, все равно сайты делают на скриптовых
языках.&lt;/p&gt;

&lt;p&gt;Много лет назад мой блог &lt;a href=&quot;/new-blog/&quot;&gt;работал на Эгее&lt;/a&gt; Ильи Бирмана. Это
класическая связка Apache + PHP + Mysql. Сколько же я натерпелся с ним! Хостер
без конца менял настройки PHP, и на главной были машинные ворнинги. Как можно
жить, опасаясь, что на главной какая-то дичь, а бекап базы не сделался?&lt;/p&gt;

&lt;p&gt;После переезда на Jekyll вздохнул спокойно. Статичный сайт после генерации не
может испортиться. Он будет такой же и завтра, и через десять лет. Хостить его
можно где угодно, даже без Апача и PHP.&lt;/p&gt;

&lt;p&gt;Хорошо, а как обновлять на сайте информацию, например, тарифы или адреса
отделений? Очень просто: каждую ночь из системы выгружается JSON или CSV с
тарифами. В исходниках сайта делают шаблон, который пробегает по строкам и
красиво их рендерит. На выходе чистый HTML, все довольны. Билд можно запустить
принудительно, если горит.&lt;/p&gt;

&lt;p&gt;Словом, чтобы ваши сайты не ломали, по-возможности делайте их статичными. Даже
если сайт подразумевает личный кабинет и другую интерактивность, будет правильно
отделить котлеты от мух, то есть статичные страницы от динамичных. И сделать
первое на условном Jekyll или схожем движке.&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Nov 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/hacked/</link>
        <guid isPermaLink="true">https://grishaev.me/hacked/</guid>
        
        <category>jekyll</category>
        
        <category>web</category>
        
        <category>security</category>
        
        
      </item>
    
      <item>
        <title>Письма от Госуслуг</title>
        <description>&lt;p&gt;У Госуслуг все печально с письмами:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/gosuslugi-mail/1.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;После “здравствуйте” должен быть восклицательный знак. В конце предложений —
точка. Я видел много безграмотных писем — без запятых и с опечатками, — но чтобы
забывать точки, это в первый раз.&lt;/p&gt;

&lt;p&gt;Кроме того, если мне звонят мошенники, я еще не стал их жертвой. А то выходит, я
становлюсь жертвой каждый второй день. Термина “жертва” вообще лучше избегать в
переписке. Никто не хочет быть жертвой, а Госуслуги уже признали тебя ей заочно.&lt;/p&gt;

&lt;p&gt;Копирайтера, который составил этот текст, — на мыло.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPD&lt;/strong&gt;: читатели сообщили, что &lt;a href=&quot;https://habr.com/ru/companies/rtlabs/articles/768838/&quot;&gt;все так и задумано&lt;/a&gt;. Вот жесть.&lt;/p&gt;

</description>
        <pubDate>Wed, 08 Nov 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/gosuslugi-mail/</link>
        <guid isPermaLink="true">https://grishaev.me/gosuslugi-mail/</guid>
        
        <category>gosuslugi</category>
        
        <category>mail</category>
        
        
      </item>
    
  </channel>
</rss>
