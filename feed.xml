<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ivan Grishaev's blog</title>
    <description>Writing on programming, education, books and negotiations.
</description>
    <link>https://grishaev.me/</link>
    <atom:link href="https://grishaev.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 24 May 2024 19:12:35 +0000</pubDate>
    <lastBuildDate>Fri, 24 May 2024 19:12:35 +0000</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>SOLID (2)</title>
        <description>
&lt;p&gt;В продолжение &lt;a href=&quot;/solid-1/&quot;&gt;прошлой заметки&lt;/a&gt;: особого упоминания заслуживает ООП. С
ним можно играть в бинго. Если разговор зашел про ООП, кто-то обязательно
скажет, что НА САМОМ ДЕЛЕ под ним имеется в виду что-то другое. То ООП, что в
джавах и питонах, неправильное! Был божественный замысел, который неверно
истолковали.&lt;/p&gt;

&lt;p&gt;Дальше пойдет кряхтение о том, что Алан Кей был биологом. По аналогии с клетками
он придумал обмен сообщениями, и что верное ООП только в Эрланге из-за модели
акторов… все это я слышал много раз. Но скажите, что делать с зоопарком ООП в
разных языках? Если это другое ООП, то может и назвать его по-другому? Если оно
то же самое, то попуститься и все-таки признать?&lt;/p&gt;

&lt;p&gt;И вообще, ничего, что прошло полвека со времен Кея и модели клеток? Ситуация как
бы изменилась. Слегка.&lt;/p&gt;

&lt;p&gt;Современное ООП — примерно как живопись. Найдено столько стилей и направлений,
что их нельзя описать пятью буквами SOLID. Да, когда-то в них помещался весь
опыт индустрии, и их возвели в догму. Но сегодня попытки объяснить ООП в Питоне
терминами SOLID напоминают попытку заправить шубу в трусы. Не вмещается!&lt;/p&gt;

&lt;p&gt;От ООП, кстати, уходят к классическому подходу структура-функция. Тысячи гоферов
колбасят код в Гугле и других фирмах. Структура-функция-интерфейс,
структура-функция-интерфейс… теперь это тоже ООП называется? Или все-таки
можно писать в прод без ООП?&lt;/p&gt;

&lt;p&gt;Просто маятник качнулся в обратную сторону. Теперь он удаляется от тех, к кому
двигался раньше.&lt;/p&gt;

&lt;p&gt;Если сравнивать языки, то в плане ООП мне больше всего нравится Lua. Там
концепция ООП умещается в абзац. Объект — это таблица с данными, которой
назначена мета-таблица с функциями. Когда вы обращаетесь к таблице, она ищет
поле или метод в себе, потом в мета-таблице, потом в мете той таблицы и так
далее. Вот и все ООП: инкапсуляция и наследование одим махом. Никаких
виртуальных деструкторов, никаких Function.Prototype. И никто не парится.&lt;/p&gt;

&lt;p&gt;Конечно, с такими тезисами вы не пройдете собес, если встретится ООП-маньяк. Но
и вести себя с ним надо подобающе: не поднимать больные темы, принимать его
сторону, если становится буйным. И все получится.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 May 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/solid-2/</link>
        <guid isPermaLink="true">https://grishaev.me/solid-2/</guid>
        
        <category>programming</category>
        
        <category>solid</category>
        
        <category>oop</category>
        
        <category>rest</category>
        
        
      </item>
    
      <item>
        <title>SOLID (1)</title>
        <description>&lt;p&gt;Когда говорят о REST, SOLID и прочих абстракциях, допускают следующий
оборот. Мол, вы не так поняли оригинальный замысел: НА САМОМ ДЕЛЕ имелось в виду
другое, просто техническая реализация отличается от задуманного.&lt;/p&gt;

&lt;p&gt;Я никогда не мог понять, зачем так говорят. Если реализация REST на базе HTTP +
JSON отличается от абстрактного REST, то либо не называйте ее так, либо
смиритесь, что она отличается от замысла. Всяко лучше, чем с пеной у рта
доказывать, что на самом деле имелось в виду что-то там.&lt;/p&gt;

&lt;p&gt;Если идею автора пришлось доработать, чтобы претворить в жизнь, то это проблема
автора, а не того, кто пользуется реализацией.&lt;/p&gt;

&lt;p&gt;Конечно, есть те, кому нравится унижать людей на собесах. Тут REST и SOLID
заходят на ура. Маньяки, ничего не поделаешь. Но мы-то с вами тут при чем?&lt;/p&gt;
</description>
        <pubDate>Mon, 20 May 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/solid-1/</link>
        <guid isPermaLink="true">https://grishaev.me/solid-1/</guid>
        
        <category>programming</category>
        
        <category>solid</category>
        
        <category>oop</category>
        
        <category>rest</category>
        
        
      </item>
    
      <item>
        <title>Замеры</title>
        <description>&lt;p&gt;Если вы долго поддерживаете код, полезно делать замеры: стал ли он быстрее,
медленнее или ничего не изменилось.&lt;/p&gt;

&lt;p&gt;Не обязательно замерять каждый коммит. Достаточно делать это каждые N
версий. Даже скромных данных будет достаточно, чтобы понять, где вы свернули не
туда или наоборот — в проекте все круто.&lt;/p&gt;

&lt;p&gt;Ниже — замеры драйвера Postgresql в разрезе версий. Разрыв между версиями 0.1.2
и 0.1.11 вызван тем, что в этот период я исправлял то, что не окажет влияния на
производительность. А в 0.1.12 было то, что оказывает, поэтому замер необходим.&lt;/p&gt;

&lt;p&gt;Картинка ниже показывает, сколько времени нужно, чтобы забрать данные с сервера
без парсинга. С каждой версией эта метрика уменьшается. Вызвано это ленивым
парсингом. Данные не разбираются сразу, а оборачиваются в класс, который
притворяется словарем. При обращении к ключу происходит разбор поля и сохранение
во внутреннем кэше.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/measure/1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;То же самое, но для сложного запроса с полями разных типов:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/measure/2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Последняя версия выигрывает у конкурента на порядок: 59 против 590
милисекунд. Разве не круто, когда оцениваешь разницу визуально?&lt;/p&gt;

&lt;p&gt;Другая метрика: число запросов в секунду HTTP сервера, который вынимает из базы
случайные данные и отдает в JSON. Здесь видно, что хотя прирост есть, но на
некоторых платформах число RPS слабо, но проседает. Это потому, что при сбросе
данных в JSON срабатывает тот самый ленивый парсинг, а он отнимает время.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/measure/3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Есть еще одна метрика: очень сложный запрос с принудительным парсингом. Здесь
видно, что он дает о себе знать: с каждой версией цифра повышается.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/measure/4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Из этих картинок можно извлечь пользу, например оценить, где мы выиграли и
потеряли и насколько. В моем случае я считаю, что главное — как можно скорее
забрать данные с сервера и освободить соединение. За это мы платим чуть менее
быстрым парсингом, но ничего — это осознанный выбор.&lt;/p&gt;

&lt;p&gt;Другое дело, когда замеров нет в принципе и остается гадать — может, станет
быстрее, а может быть, медленнее. Компьютеры у всех мощные, телефоны меняют
каждый год, поэтому выкатывай, там разберемся. Кажется, большинство программ
обновляют именно так.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 May 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/measure/</link>
        <guid isPermaLink="true">https://grishaev.me/measure/</guid>
        
        <category>metrics</category>
        
        <category>programming</category>
        
        <category>charts</category>
        
        
      </item>
    
      <item>
        <title>Никнейм в JetBrains</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/static/aws/jetbrains/1.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Смешно: регистрация в JetBrains запрашивает никнейм.&lt;/p&gt;

&lt;p&gt;Вот у меня есть имя и фамилия. У меня есть электронная почта. У меня есть
телефон. А никнейма нет. Где взять никнейм? Где его выдают?&lt;/p&gt;

&lt;p&gt;Считается, что я должен его придумать. Но зачем? Какую пользу дает никнейм? Вы
там что, не можете сгенерить UUID, а в сообщении писать имя и фамилию?&lt;/p&gt;

&lt;p&gt;Согласен, что на форуме майнеров или имиджборде без ника никуда. Не будешь же ты
подписываться полным ФИО. Но у JetBrains не форум анонимных программистов. У них
продукт, и какую роль в нем играет никнейм — неясно.&lt;/p&gt;

&lt;p&gt;Никнейм — это либо рудимент нулевых, машинное имя пользователя, удобное на
бекенде. Либо это способ анонимности, чтобы постить сомнительный контент без
разоблачения.&lt;/p&gt;

&lt;p&gt;Оба случая проходят мимо JetBrains, что и желаю им понять.&lt;/p&gt;

&lt;p&gt;Ну и классика: еще ничего не написал, а форма кричит ошибками.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 May 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/jetbrains-nickname/</link>
        <guid isPermaLink="true">https://grishaev.me/jetbrains-nickname/</guid>
        
        <category>ui</category>
        
        <category>jetbrains</category>
        
        <category>nickname</category>
        
        
      </item>
    
      <item>
        <title>Ковид</title>
        <description>&lt;p&gt;Вопрос между делом: как дела с ковидом? Он уже прошел? Все выздоровели?
Повальная вакцинация сделала свое дело? Все приобрели иммунитет?&lt;/p&gt;

&lt;p&gt;Где мы находимся: уже перешагнули катастрофу? Ковида больше не будет?&lt;/p&gt;

&lt;p&gt;Может быть теперь, когда ковидная истерия сходит на нет, не мешало бы провести
ретро, а именно:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;надо ли было запирать людей в четырех стенах на год?&lt;/li&gt;
  &lt;li&gt;надо было ставить прививки всем поголовно, в том числе беременным и детям?&lt;/li&gt;
  &lt;li&gt;нормально ли было пускать в магазин за едой по QR-коду?&lt;/li&gt;
  &lt;li&gt;хорошо ли было отказывать в помощи тем, у кого не ковид, а сердце, например?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;В целом, отношение к ковиду у меня ровно то же, что и к Титанику и Чернобылю. Во
всех случаях было что-то из ряда вон, но в основном людей угробили из-за паники
и суетливых мер.&lt;/p&gt;

&lt;p&gt;Искренне надеюсь, что лет через сто, когда виновники будут в могиле, кто-то
выпустит нормальный обзор ковидной истерии. И там будет ровно то, что в Титанике
и Чернобыле: эти бедняги могли все сделать правильно, но увы.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 May 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/covid-today/</link>
        <guid isPermaLink="true">https://grishaev.me/covid-today/</guid>
        
        <category>covid</category>
        
        <category>pandemic</category>
        
        
      </item>
    
      <item>
        <title>Краткие ответы на большие вопросы</title>
        <description>&lt;p&gt;Закончил читать “Краткие ответы на большие вопросы” Стивена Хокинга. Того самого
ученого в инвалидном кресле, который недавно умер.&lt;/p&gt;

&lt;p&gt;Это второй раз, когда я читаю его книгу. В первый раз это была “Краткая история
времени”. Скажу честно, не пошло — она слишком научна. Можно сделать вид, что
разбираешься в материале, но не вижу причины себя обманывать, поэтому дочитывать
не стал. Напротив, “Краткие ответы…” менее научная, поэтому решил попробовать
еще раз.&lt;/p&gt;

&lt;p&gt;Хокинг начал писать книгу незадолго до смерти. Ее закончили коллеги Хокинга на
базе его архива и выступлений. Книга получилась компиляцией его идей. Я с
сомнением отношусь к такого рода книгам — чаще всего это попытка выжать денег за
счет известного имени — но в нашем случае получилось хорошо. Видно, что над
книгой проделали большую работу, чтобы вышло что-то целостное, а не
обрывки. Русский перевод отличный с привлечением научных редакторов.&lt;/p&gt;

&lt;p&gt;Книгу предваряет вступительное слово коллег Хокинга с интересными фактами из его
жизни. Перед первой главой напечатана фотография Хокинга, где ему лет
пятнадцать, и он хитровато смотрит в камеру. На последней странице — фото
незадолго до смерти в кресле.&lt;/p&gt;

&lt;p&gt;В книге десять глав с рассуждениями на “большие” вопросы — есть ли бог, откуда
мы взялись, можно ли путешествовать во времени, как быть с искусственным
интеллектом и другие. По мере того как я читал, впечатления от книги менялись
интересным образом.&lt;/p&gt;

&lt;p&gt;Первые несколько глав посвящены науке и черным дырам — области, в которой Хокинг
был топ один. Читать про Вселенную и дыры интересно, особенно в изложении
Хокинга. Постепенно научные темы сменяются социальными, и наступает некий
интеллектуальный уклон. Суждения Хокинга становятся откровенно
плоскими. Начинаются пугалки про глобальное потепление, Трампа, Брексит, мировой
голод и прочие штучки. Ощущение, будто открыл Твиттер демократической партии
США.&lt;/p&gt;

&lt;p&gt;Высказывания Хокинга по социальным темам очень размыты. Он без конца повторяет,
что технологии могут как принести пользу, так и навредить, но нужно
придерживаться оптимизма. В тексте нет развития, в нем сплошное топтание на
месте. Например, он много пишет о том, как ИИ спасет людей от голода, войн и
болезней. Как именно спасет?&lt;/p&gt;

&lt;p&gt;Мне кажется, Хокинг был бы разочарован современным ИИ, который используется в
основном для мусора. Тысячи сгенерированных книг на Амазоне, тысячи
сгенерированных отзывов к ним, тысячи ИИ-стартапов, которым лишь бы пройти на
следующий раунд инвестиций — вот плоды нашего псевдо-ИИ. И если он используется
в войнах, то разве что для лучшего поражения целей, а не их предотвращения.&lt;/p&gt;

&lt;p&gt;Возможно, часть книги с социальными темами Хокинг не успел написать, и ее
высосали из пальца его коллеги на базе его случайных цитат.&lt;/p&gt;

&lt;p&gt;В любом случае я лишний раз понял: даже великий человек хорош в чем-то одном. В
плане Вселенной и черных дыр Хокингу нет равных. Но его мысли на социальные темы
напоминают главную страницу западных сайтов: шаблонный набор пугалок. Мы,
слушатели, в сотый раз повторяем ошибку: считаем, что если человек разбирается
X, то автоматом разбирается в Y. А это не так.&lt;/p&gt;

&lt;p&gt;Вот такая противоречивая книжка. Горячо советую ее первую половину, остальное —
по настроению.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 May 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/brief-answers/</link>
        <guid isPermaLink="true">https://grishaev.me/brief-answers/</guid>
        
        <category>books</category>
        
        <category>hawking</category>
        
        <category>reading</category>
        
        
      </item>
    
      <item>
        <title>PG2 release 0.1.12</title>
        <description>
&lt;p&gt;&lt;a href=&quot;https://github.com/igrishaev/pg2&quot;&gt;PG2 version 0.1.12&lt;/a&gt; is out. Aside from internal refactoring, there are
several features I’d like to highlight.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, the library is still getting faster. The latest benchmarks prove
15-30% performance gain when consuming &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; results. Actual numbers depend
on the nature of a query. Simple queries with 1-2 columns work faster than
before:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/pg-0.1.12/01.svg&quot; class=&quot;svg-chart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Metrics:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Platform&lt;/th&gt;
      &lt;th&gt;JDBC.Next&lt;/th&gt;
      &lt;th&gt;PG2 0.1.1&lt;/th&gt;
      &lt;th&gt;PG2 0.1.2&lt;/th&gt;
      &lt;th&gt;PG2 0.1.12&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;core i5 2 GHz Quad-Core 16G&lt;/td&gt;
      &lt;td&gt;127.677926&lt;/td&gt;
      &lt;td&gt;43.026307&lt;/td&gt;
      &lt;td&gt;44.36297&lt;/td&gt;
      &lt;td&gt;21.941113&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;core i9 2,4 GHz 8-Core 32G&lt;/td&gt;
      &lt;td&gt;83.932103&lt;/td&gt;
      &lt;td&gt;39.551719&lt;/td&gt;
      &lt;td&gt;27.672117&lt;/td&gt;
      &lt;td&gt;20.957904&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;arm m1 10 cores 32G&lt;/td&gt;
      &lt;td&gt;49.340986&lt;/td&gt;
      &lt;td&gt;18.517718&lt;/td&gt;
      &lt;td&gt;14.670815&lt;/td&gt;
      &lt;td&gt;9.468902&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Although queries with many columns are less sensitive to the new parsing
algorithm, they’re still fast. Here is a chart for a complex query:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/pg-0.1.12/02.svg&quot; class=&quot;svg-chart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Metrics:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Platform&lt;/th&gt;
      &lt;th&gt;JDBC.Next&lt;/th&gt;
      &lt;th&gt;PG2 0.1.1&lt;/th&gt;
      &lt;th&gt;PG2 0.1.2&lt;/th&gt;
      &lt;th&gt;PG2 0.1.12&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;core i5 2 GHz Quad-Core 16G&lt;/td&gt;
      &lt;td&gt;579.59995&lt;/td&gt;
      &lt;td&gt;273.866142&lt;/td&gt;
      &lt;td&gt;80.352246&lt;/td&gt;
      &lt;td&gt;55.835803&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;core i9 2,4 GHz 8-Core 32G&lt;/td&gt;
      &lt;td&gt;447.326861&lt;/td&gt;
      &lt;td&gt;270.262248&lt;/td&gt;
      &lt;td&gt;54.34384&lt;/td&gt;
      &lt;td&gt;42.815123&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;arm m1 10 cores 32G&lt;/td&gt;
      &lt;td&gt;206.371502&lt;/td&gt;
      &lt;td&gt;117.241426&lt;/td&gt;
      &lt;td&gt;30.444798&lt;/td&gt;
      &lt;td&gt;29.92079&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;PG2 has become a bit faster with HTTP. The chart below measures a number of RPS
of a Jetty server that fetches random data from a database and responds with
JSON:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/pg-0.1.12/03.svg&quot; class=&quot;svg-chart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The tests were made using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ab&lt;/code&gt; as follows:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ab &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1000 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 16 &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; http://127.0.0.1:18080/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Timings:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Platform&lt;/th&gt;
      &lt;th&gt;JDBC.Next&lt;/th&gt;
      &lt;th&gt;PG2 0.1.1&lt;/th&gt;
      &lt;th&gt;PG2 0.1.2&lt;/th&gt;
      &lt;th&gt;PG2 0.1.12&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;core i5 2 GHz Quad-Core 16G&lt;/td&gt;
      &lt;td&gt;555.55&lt;/td&gt;
      &lt;td&gt;968.51&lt;/td&gt;
      &lt;td&gt;915.93&lt;/td&gt;
      &lt;td&gt;890.62&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;core i9 2,4 GHz 8-Core 32G&lt;/td&gt;
      &lt;td&gt;1304&lt;/td&gt;
      &lt;td&gt;1909.19&lt;/td&gt;
      &lt;td&gt;1688.72&lt;/td&gt;
      &lt;td&gt;1794.75&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;arm m1 10 cores 32G&lt;/td&gt;
      &lt;td&gt;1902.31&lt;/td&gt;
      &lt;td&gt;2999.06&lt;/td&gt;
      &lt;td&gt;3026&lt;/td&gt;
      &lt;td&gt;3363.36&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;The second feature&lt;/strong&gt; is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:read-only?&lt;/code&gt; connection flag. When it’s set to
true, the connection is run in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;READ ONLY&lt;/code&gt; mode, and every transaction opens
being READ ONLY as well. This is useful for reading from replicas. A small
example where an attempt to delete something leads to a negative response:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pg/with-connection&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:read-only?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pg/query&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;delete from students&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; PGErrorResponse: cannot execute DROP TABLE in a read-only transaction&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When set globally for connection, the flag overrides the same flag passed into
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with-tx&lt;/code&gt; macro. Below, the transaction is READ ONLY anyway because the
config flag is prioritized.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pg/with-connection&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:read-only?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pg/with-tx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:read-only?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; override won't do&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pg/query&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;create table foo(id serial)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; PGErrorResponse: cannot execute CREATE TABLE in a read-only transaction&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Finally&lt;/strong&gt;, there is a new reducer called “column” which fetches a single
column as a vector. We often select IDs only, but the result is a vector of maps
with a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:id&lt;/code&gt; field:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To get the ids, either you pass the result into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(map :id ...)&lt;/code&gt; or, which is
better, specify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:column&lt;/code&gt; key as follows:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pg/with-connection&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pg/query&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;select id from users&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:column&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; [100, 101, 102, ...]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Internally, the reducer fetches the field from each row on the fly as they come
from the network. It’s more effective than passing the result into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; as it
takes only one passage.&lt;/p&gt;

&lt;p&gt;For more details, you’re welcome to the &lt;a href=&quot;https://github.com/igrishaev/pg2/blob/master/README.md&quot;&gt;readme file&lt;/a&gt; of the repo.&lt;/p&gt;
</description>
        <pubDate>Wed, 01 May 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/en/pg-0-1-12</link>
        <guid isPermaLink="true">https://grishaev.me/en/pg-0-1-12</guid>
        
        <category>clojure</category>
        
        <category>programming</category>
        
        <category>postgres</category>
        
        <category>sql</category>
        
        
      </item>
    
      <item>
        <title>Табы</title>
        <description>&lt;p&gt;Иногда нам все-таки везет с дизайнерами.&lt;/p&gt;

&lt;p&gt;В Firefox у вкладок есть особенность: когда их больше определенного числа, они
перестают сжиматься и превращаются в прокрутку. Это прекрасно, потому что часть
заголовка видна, и можно понять, где что.&lt;/p&gt;

&lt;p&gt;А в Хроме и его форках наоборот: вкладки будут бесконечно уменьшаться, пока не
останется крестик. Полный фейл: непонятно, что за вкладка, пока не тыкнешь на
нее. Порой как дурак кликаешь методом перебора. Легко попасть на крестик и
закрыть.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/tabs/1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ясно, что табы нужно прореживать, чтобы не было открыто лишнее. Но в пиковые
моменты, например, при лихорадочном поиске решения, их бывает много, хочешь того
или нет.&lt;/p&gt;

&lt;p&gt;Мораль в том, что табы хороши, но бесконечно сжимать их не нужно. В определенный
момент их нужно прокручивать.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Apr 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/tabs/</link>
        <guid isPermaLink="true">https://grishaev.me/tabs/</guid>
        
        <category>tabs</category>
        
        <category>ui</category>
        
        <category>firefox</category>
        
        <category>chrome</category>
        
        
      </item>
    
      <item>
        <title>Soft delete</title>
        <description>&lt;p&gt;Многие знают о технике мягкого удаления. Это когда записи не удаляются физически
из базы, а помечаются флажком &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_deleted&lt;/code&gt; или выставляется время
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deleted_at&lt;/code&gt;. Удобно, что ничего не удаляется, не нужно воевать с внешними
ключами и ограничением целостности. Самое главное — если что-то пошло не так, то
снял флажок, и данные на месте.&lt;/p&gt;

&lt;p&gt;Все это хорошо, и я тоже так думал, пока не поработал в одном проекте. Там была
огромная база с кучей таблиц и техникой мягкого удаления. Только тогда я понял,
что это билет в ад.&lt;/p&gt;

&lt;p&gt;Начнем с того, что удаленные записи отнимают место на диске. За несколько лет их
набегает порядочное количество. Удаленные записи по-прежнему участвуют в
индексах, и они тоже занимают место, замедляют обход. В Постгресе есть
функциональные индексы когда запись попадает только при условии &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NOT is_deleted&lt;/code&gt;
или &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deleted_at IS NULL&lt;/code&gt;. Но чаще всего этим не заморачиваются, и в индекс
валится все.&lt;/p&gt;

&lt;p&gt;Бывает, удаленная запись мешает критерию уникальности, и тогда ее выключают из
уникального индекса. Например, поле &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;email&lt;/code&gt; уникально только среди не удаленных
пользователей. Поэтому записи как в примере ниже&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    email        | is_deleted
-----------------|-------
ivan@grishaev.me | false
ivan@grishaev.me | true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;могут спокойно сосуществовать. Но восстановить вторую запись нельзя, потому что
она вступит в конфликт с первой. Спрашивается: зачем мы ее храним? Что с ней
можно сделать? Ничего. Это просто балласт.&lt;/p&gt;

&lt;p&gt;Что касается запросов, то разработчики часто забывают условие &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WHERE NOT
is_deleted&lt;/code&gt;, и в выборке оказываются удаленные данные.&lt;/p&gt;

&lt;p&gt;А в другом проекте было по-другому: проблему удаления решали переносом в другие
таблицы. Например, для таблицы messages создается ее аналог
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;messages_deleted&lt;/code&gt;. Запись переносится атомарно таким запросом:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages_deleted&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Перенос обратно:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages_deleted&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Есть и другой вариант этого запроса без выражения &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WITH&lt;/code&gt;; можно сделать это
триггером, хоть я и не люблю их. Важно, что запрос выполняется атомарно даже
если не заключен в транзакцию. При этом запись переходит между таблицами на
стороне сервера. Она даже не приходит клиенту.&lt;/p&gt;

&lt;p&gt;На первый взгляд это неудобно, потому что нужны лишние таблицы. Но как
замечательно это оказалось на практике! В основной таблице только актуальные
данные, никаких флажков и предикатов. Выбирая что-то из messages, ты на 100%
уверен, что нет риска выбрать что-то не то. Данные всегда в чистоте. Если
однажды мы решим, что удаленные сообщения не нужны, мы грохнем таблицу
messages_deleted без риска задеть живые данные.&lt;/p&gt;

&lt;p&gt;С тех пор я придерживаюсь переноса, если это возможно.&lt;/p&gt;

&lt;p&gt;Принцип “я ничего не удаляю” аналогичен принципу “я ничего не выбрасываю”. С ним
база, простите меня, засирается. И хотя перенос данных не значит их удаление, он
очищает рабочую область — а это крайне важно.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Apr 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/soft-delete/</link>
        <guid isPermaLink="true">https://grishaev.me/soft-delete/</guid>
        
        <category>programming</category>
        
        <category>postgres</category>
        
        <category>delete</category>
        
        
      </item>
    
      <item>
        <title>Чтение</title>
        <description>&lt;p&gt;Когда говорят о пользе чтения, забывают еще кое-что: оно отлично снимает стресс.&lt;/p&gt;

&lt;p&gt;Неважно, что вы читаете — классику и техническую вещь — но эффект чтения
потрясен. Мир словно останавливается, и все проблемы ждут, пока ты
читаешь. Отрываясь наконец от книги, не испытываешь сожаления о потраченном
времени, как это часто бывает с телефоном.&lt;/p&gt;

&lt;p&gt;Разумеется, речь идет о чтении с бумаги, а не с экрана, поэтому телефоны,
читалки и планшеты идут мимо кассы. Они по-своему полезны, но того эффекта, что
дает бумага, с ними достичь нельзя.&lt;/p&gt;

&lt;p&gt;В интернете полно экспертов, которые советуют: технические книги надо читать на
английском, а если классику, то именно то, а не другое. На самом деле только
один человек знает, что нужно читать, и это вы. Пробуешь разные жанры и языки и
что понравилось — то и читаешь, неважно что советуют псевдо-эксперты.&lt;/p&gt;

&lt;p&gt;Я спокойно читаю технические книги на русском, если, конечно, перевод не совсем
уж плохой. Все больше книг пишутся русскими авторами. Книги “Postgres изнутри”
Егора Рогова и “Postgres: основы SQL” Моргунова — просто отпад. Они написаны на
русском, а первую уже перевели на английский. Попадались хорошие книги русских
авторов и по другим технологиям.&lt;/p&gt;

&lt;p&gt;Классику, наоборот, пытаюсь осилить на английском, и это полно открытий. Другая
грамматика, устаревшие слова и их порядок — казалось бы, английский, но не то,
что читаешь в интернете. Старая книжка на английском — это прям квест. Даже
Оруэлл сильно отличается от современного американского, хотя прошло-то чуть
больше полувека.&lt;/p&gt;

&lt;p&gt;Из классиков люблю Гоголя: беру наугад любой том и залипаю на полчаса. Булгаков
тоже хорош, в том числе его раннее творчество. Люблю Дон Кихота, Остров
сокровищ, Оруэлла. Имена не имеют значения, важно то, что в принципе есть что
почитать.&lt;/p&gt;

&lt;p&gt;Чтение дает мозгу отдых. Когда очередной погорелец заводит песню о том, что
выгорел, я мысленно спрашиваю: когда ты в последний раз читал? Не Хакер-ньюз с
телефона, а бумажную книжку? У тебя вообще книги есть или только телефон с
ноутом?&lt;/p&gt;

&lt;p&gt;При этом я не считаю себя Д’Артаньяном: я читаю мало, и лишь недавно очнулся
после года тупняка. Это заметка — скорее напоминалка себе: меньше тупить в экран
и больше читать.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Apr 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/reading/</link>
        <guid isPermaLink="true">https://grishaev.me/reading/</guid>
        
        <category>life</category>
        
        <category>reading</category>
        
        <category>literature</category>
        
        <category>english</category>
        
        
      </item>
    
  </channel>
</rss>
