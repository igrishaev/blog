<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ivan Grishaev's blog</title>
    <description>Writing on programming, education, books and negotiations.
</description>
    <link>https://grishaev.me/</link>
    <atom:link href="https://grishaev.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 26 Nov 2023 06:51:22 +0000</pubDate>
    <lastBuildDate>Sun, 26 Nov 2023 06:51:22 +0000</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>Data-Driven Development is a Lie</title>
        <description>
&lt;p&gt;In the Clojure community, people often discuss such things as &lt;a href=&quot;https://en.wikipedia.org/wiki/Data-driven_programming&quot;&gt;data-driven
development&lt;/a&gt;. It is like you don’t write any code or logic. Instead, you
declare data structures, primarily maps, and whoosh: there is a kind of Deus ex
Machina that evaluates these maps and does the stuff.&lt;/p&gt;

&lt;p&gt;That’s OK when newcomers believe in such things. But I feel nervous when even
experienced programmers tell fairy tales about the miracle that DDD brings to
the scene. That’s a lie.&lt;/p&gt;

&lt;p&gt;I’ve been doing Clojure for nine years, and DDD is useful in rare cases
only. Yes, in some circumstances, it saves one’s time indeed. But only
sometimes, not always! And it’s unfair: people give talks at conferences about
how successful they were with DDD in their project. But they would never give a
speech about how they messed up by describing everything with maps.&lt;/p&gt;

&lt;p&gt;Let me give you an example. Imagine we’re implementing a restriction
system. There is a context, and we must decide whether to allow or prohibit the
incoming request. Obviously, every Clojure developer would do that with maps. We
declare a vector of maps where each map represents a subset of the
context. Should at least one rule match the context, we allow the request.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Something like this:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RULES&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:some-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:other-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:third-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foobar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:some-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:other-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:third-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sample&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matches?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select-keys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allow?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;matches?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RULES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Above, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RULES&lt;/code&gt; var is declared on top of the module, but ideally, it comes
from an EDN file.&lt;/p&gt;

&lt;p&gt;It looks short and solid. Moreover, &lt;a href=&quot;https://youtu.be/jlPaby7suOc?t=998&quot;&gt;This! Is! Data!&lt;/a&gt; The next time a
business wants us to add a new rule, we will extend the vector with a map. At
this point, a programmer who has implemented this gets a ticket to the nearest
conference and gives a speech about their success. This talk gets shared across
the community channels. This is how the cargo cult grows, in fact.&lt;/p&gt;

&lt;p&gt;As I mentioned, none of the YouTube talks tells about what happens after the
developer returns from the conference. There are upcoming changes in the logic:
a certain field might have multiple allowed values. For example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:role&lt;/code&gt; is
either an admin or a manager. The developer scratches his head but quickly
finds a solution: let some rule values be a set. If a value is a set, we process
it using the contains? function. Otherwise, the values get compared as usual.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RULES&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:some-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:other-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:role&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;manager&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;;; when matching the fields&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;contains?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:else&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good. But in a month, there is a new requirement: negation. Now we allow the
request if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:role&lt;/code&gt; field is of any value but not manager. Again, the
developer gets puzzled for a while, but then he finds the solution with the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[:not ...]&lt;/code&gt;  clause. If it’s a vector and the first item is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:not&lt;/code&gt;, we use
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;not=&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RULES&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:some-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:other-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:role&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:not&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;manager&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;contains?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;vector?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:not&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;not=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:else&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a month, the business asks to add ranges and comparisons. Say, to disallow
the request if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:level&lt;/code&gt; field is in range of 3 to 9 (inclusive and
exclusive, pay attention). Here come the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[:in :field [3 9]]&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[:&amp;lt; field 9]&lt;/code&gt;
expressions in an EDN file. The developer gets angry as the house of cards he
has built has turned unstable.&lt;/p&gt;

&lt;p&gt;One day, something that he’s been afraid of all this time has finally come. He’s
asked to introduce complex and/or/not logic. If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(foo and bar) or (foo and not
this)&lt;/code&gt;, allow the request. If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(this and that) or (foo and bar)&lt;/code&gt;, disallow
it. What is the outcome? Our developer &lt;em&gt;is smart&lt;/em&gt; and has brief knowledge about
interpreters, so he considers this a challenge. First, he extends the maps using
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[:or ...]&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[:and ...]&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[:not ...]&lt;/code&gt; notation:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:or&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:role&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;manager&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:level&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;John Smith&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:matches&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;some@pattern&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then he writes a primitive interpreter that walks a tree and processes it
correctly. Of course, he reckons himself a genius. Only he knows how this
interpreter works. There is no documentation; it’s like a meme: I’m the
documentation!&lt;/p&gt;

&lt;p&gt;Sarcasm aside, the developer has ended up with a real mess. Although it’s still
a Data-Driven approach indeed, it’s awful. The rules are no longer data but a
poorly designed DSL. The logic used to scan a vector of maps has grown into a
poorly designed interpreter. Both are fragile, buggy, and uneasy to tweak.&lt;/p&gt;

&lt;p&gt;Should the programmer really care about the quality of the code, he or she would
notice that the initial idea of relying on data didn’t pay off. At some point,
they should have stopped and said: &lt;strong&gt;we won’t go further with data&lt;/strong&gt;. Complex
checks are easier to implement in pure Clojure than crafting an interpreter. But
they’ve committed way too far into this. They’re afraid for their reputation:
they think admitting their mistakes is a sign of weaknesses (although it’s a
sign of strength instead). They’ve watched too many YouTube videos about the
divinity of Data-Driven development, and they’re still looking for a mysterious
Graal.&lt;/p&gt;

&lt;p&gt;Everyone who is praying for DDD must bear in mind the law of energy
conservation. Either express the logic in code or declare some data and a
framework that traverses the data and does something. In ordinary Clojure code,
the complexity is distributed evenly. The DDD approach shifts that
balance. Writing a vector of maps takes 5-10% of the total effort, but crafting
a framework that runs that vector is 90-95%. It’s not good for a project when
complexity differs dramatically. A new business requirement might easily hit the
most complex part of the project. Nothing prevents the business from asking to
check regular expressions; or if it’s a leap year; or if the client has a
birthday today; or if their last name is Smith, or similar.&lt;/p&gt;

&lt;p&gt;Thus, don’t write DDD frameworks. Don’t grow the complexity of the project. Use
the standard Clojure facilities like functions and maps but not DSL and DDD.&lt;/p&gt;

&lt;p&gt;By the way, do you know that DDD has been with us for years? It’s good old XML!
There have been times when developers were obsessed with XML. That markup
language was everywhere: to describe forms, settings, dependencies, workflow,
schemas and even data transformation and logic! Would you like to maintain a
project where every single bit is an XML file?&lt;/p&gt;

&lt;p&gt;These days have passed, fortunately. But that weird willingness to describe
everything with EDN reminds me of XML. What is the difference, after all? Both
are definitions only, which is the top of an iceberg. Deep inside, there is a
framework that drives these definitions.&lt;/p&gt;

&lt;p&gt;If asked to implement that restriction system, I would start with maps
too. But’d change something as soon as the rules get more complex. I’d make a
rule not map only but a function as well. Say, if it’s a map, I check if it’s a
subset of the context. But if it’s a function, I apply it to the context and
decide on the boolean result:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RULES&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; a simple map case&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:some-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:other-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:third-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foobar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

   &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; something more complex&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;some-complex-check&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matches?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;select-keys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fn?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’d even do it in this way:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kv=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;every-pred&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kv=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kv=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:role&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then I’d add more primitives for regex, patterns, ranges, etc and compose what I
need from them. In Clojure, functions get composed great!&lt;/p&gt;

&lt;p&gt;It’s no longer the data-driven approach, but I don’t care. A function is much
simpler than a map and an interpreter that processes it. With a function, I can
express any logic I want. There is no need to implement negation, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;or&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;and&lt;/code&gt;
operators and more. We’re already given a great language — Clojure — so why
would you stick with EDN and a poor interpreter?&lt;/p&gt;

&lt;p&gt;One may say that DDD is great because it’s about the data. Adding a new rule
boils down to extending an EDN file but not writing code. But in fact, there is
no difference at all. Even if you edit an EDN file, you start a new Git branch,
edit a file, add a new test and create a pull request. The pipeline is the same
as it has to be for the ordinary code. When editing a .clj file, you create a
branch, add a new function, write a test and open a pull request. &lt;strong&gt;Both ways
involve the same steps.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Data-driven development lacks debugging capabilities, and that’s really an
issue. Remember that vector of maps and functions which I proposed above:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RULES&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; a simple map case&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:some-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:other-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:third-field&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foobar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

   &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; something more complex&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;some-complex-check&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Should a function-driven rule behave weirdly, I’d put a debug tag, run a test
and easily debug it. I’d just hang in the middle of the execution of that
function and see all the local vars. I can even try some expressions in
REPL. But how in the world are you going to debug a map? It’s unthinkable
because it’s just data. You cannot blame a map! You need to debug your
framework, which is much harder than debugging a single function. Frameworks
operate on context and lambdas, and debugging them properly requires more
effort.&lt;/p&gt;

&lt;p&gt;Talking about debugging, there is such a thing as stack trace. It’s extremely
important when dealing with logged exceptions. Now, if you have a function-based
rule that has failed due to an error, you’re good. You have a message, a file
and a line number pointing to the cause of an exception. But the stack trace
might be completely different if you have a framework that operates with maps
and lambdas. The framework tried to compare to maps, but it failed with
NPE. What were these maps? You’ll never know.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;Did you watch Kung Fu Panda? &lt;a href=&quot;https://youtu.be/K7DnFGdqT8c?t=10&quot;&gt;There is no secret ingredient.&lt;/a&gt; That ingredient
is you. I want you to stop looking for a magic trick that would make a job for
you. There is no trick or technique; it’s all about diligence and simplicity.&lt;/p&gt;

&lt;p&gt;Keep your code simple, dull and clear. The complexity must be distributed evenly
across the codebase. Avoid various Somethig-Driven approaches and DSLs at all
costs. A series of simple functions is much better in terms of maintainability.&lt;/p&gt;

&lt;p&gt;Don’t trust YouTube videos and talks. &lt;strong&gt;Every talk is a staged show&lt;/strong&gt; where the
best parts are exposed to the viewer, and the failures are held back. No one
gets to the scene to tell us how they’ve messed up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trust yourself only.&lt;/strong&gt; If you are really interested in some idea or
technology, test it with your hands. Don’t blindly trust those videos where
speakers say it’s amazing. Instead of sharing such a video, say: I’ve checked
it, and it’s great. Or, I’ve checked it, and it’s not as great as it’s
said. Your own experience is much more valuable than modern trends awareness.&lt;/p&gt;

&lt;p&gt;That’s all.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Nov 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/en/ddd-lie</link>
        <guid isPermaLink="true">https://grishaev.me/en/ddd-lie</guid>
        
        <category>clojure</category>
        
        <category>programming</category>
        
        <category>ddd</category>
        
        <category>lie</category>
        
        
      </item>
    
      <item>
        <title>UI и пустота</title>
        <description>&lt;p&gt;Уже не раз писал о проблемах современного дизайна, но повторюсь. Одна из главных
проблем — избыток пустого места. Там, где можно уместить информацию, сквозит
пустота, а полезные вещи спрятаны под выпадашку.&lt;/p&gt;

&lt;p&gt;Это просто бич современности! Растут расширения мониторов, завезли ретину,
телефоны стали лопатами — а информации меньше, чем на стареньком ЭЛТ-мониторе.&lt;/p&gt;

&lt;p&gt;Из сегодняшнего: интерфейс Гугл-переводчика. Обратите внимание на секцию “More
translations.” Зачем ее сворачивать? Под ней сплошная пустота, что мешает сразу
показать другие переводы?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/ui-emptiness/1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(Подпись, чтобы показать, где кончается скриншот)&lt;/p&gt;

&lt;p&gt;Ладно, спрятали под выпадашку. Но почему тогда не полностью? Почему первый
вариант “общественное…” все-таки вылез? А если он вылез, то зачем сокращать до
многоточия? Там же полно места для “общественного питания”. Там ДО ХРЕНА пустого
места, все вместится и еще останется.&lt;/p&gt;

&lt;p&gt;Дизайнеры, я правда хочу знать: зачем вы прячете информацию? Кто вас этому
научил? Это плохо, скорей переучивайтесь.&lt;/p&gt;

&lt;p&gt;А недавно в одном чате набросили книгу &lt;a href=&quot;https://www.refactoringui.com/&quot;&gt;Refactoring UI&lt;/a&gt;. Переделка
интерфейса. Название хорошее, неужели кто-то одумался? Читаю тезисы, а там:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Instead, try adding a box shadow, using contrasting background colors, or
simply adding more space between elements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;И хочется выйти в окно. Мало того, что какие-то уродцы сливают полезное место в
унитаз; так еще пишутся книги, где это прямо советуют! Сделай лучше, добавь
пустоты!&lt;/p&gt;

&lt;p&gt;Пожалуйста, не покупайте эту книжку. Пожалейте пользователей.&lt;/p&gt;

</description>
        <pubDate>Sat, 18 Nov 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/ui-emptiness/</link>
        <guid isPermaLink="true">https://grishaev.me/ui-emptiness/</guid>
        
        <category>ui</category>
        
        <category>emptiness</category>
        
        
      </item>
    
      <item>
        <title>Подсветка в Телеграме</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/static/aws/tele-hl/1.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В Телеграме появилась подсветка ссылок и цитат. Теперь у нас синенькое,
зелененькое, розовенькое, голубенькое сразу вместе, одно за другим. Ну и
уродские шрифты в плашках Гитхаба.&lt;/p&gt;

&lt;p&gt;Молодцы, старались. Один вопрос – зачем? Чтобы что?&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Nov 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/telegram-highlight/</link>
        <guid isPermaLink="true">https://grishaev.me/telegram-highlight/</guid>
        
        <category>telegram</category>
        
        <category>highlight</category>
        
        <category>update</category>
        
        
      </item>
    
      <item>
        <title>Восточные сказки</title>
        <description>&lt;p&gt;Когда я читал восточные сказки в детстве, то, обращал внимание на сюжет. Кто
кого убил и обманул, чью жену украл. Перечитывая сейчас, замечаю многое из того,
что не видно ребенку, но понятно взрослому.&lt;/p&gt;

&lt;p&gt;Наиболее интересное наблюдение — это психотип древних людей. Они в буквальном
смысле большие дети. Население Персии пребывает в трех состояниях: радость,
гнев, страх. Переход от одной стадии к другой случается мнговенно как у
психически больных.&lt;/p&gt;

&lt;p&gt;Вот персонаж поел и выпил, ему хорошо. В следующую минуту ему возразил слуга;
теперь он кричит и требует отрубить голову. Появляется визирь, он впадает в
страх и плачет. Все это — за считанные минуты.&lt;/p&gt;

&lt;p&gt;Герои никогда не говорят спокойно. Малейшее несогласие или возражение — и они
кричат, плачут, словом, что угодно, лишь бы не спокойно обсудить решение.&lt;/p&gt;

&lt;p&gt;Еще одно наблюдение — герою не зазорно делать подлости. Может быть, вы забыли,
чем кончается оригинальная сказка про Аладдина, но я напомню. Он пробирается в
замок врага, который похитил принцессу. Они с принцессой договариваются: та
соблазнит злодея и усыпит сонным порошком, а Алладдин убъет. Так и выходит:
Аладдин стоит за шторой, и когда злодей падает сонный, спокойно рубит ему
голову.&lt;/p&gt;

&lt;p&gt;Это отличается от европейского канона, согласно которому герой вступает в бой
открыто. И не только открыто, но и на равных: без лазеров и пулеметов, один на
один на кулаках. Представьте кассовый фильм, где герой убивает врага ножом в
спину и едет домой. Зрители будут недовольны.&lt;/p&gt;

&lt;p&gt;Чтобы два раза не вставать: в оригинале Аладдина зовут Ала Ад’Дин. Такое вот
сложное имя, которое упростили для иностранного читателя.&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Nov 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/tales/</link>
        <guid isPermaLink="true">https://grishaev.me/tales/</guid>
        
        <category>tales</category>
        
        <category>alladdin</category>
        
        
      </item>
    
      <item>
        <title>Сайт взломали</title>
        <description>&lt;p&gt;Это провокационный заголовок: на самом деле мой сайт не взломали. Просто я часто
слышу, как взломали чей-нибудь сайт и выложили крамолу. Хочу высказаться на этот
счет.&lt;/p&gt;

&lt;p&gt;Чтобы сайты не взламывали, их устойчивость должна быть заложена в
архитектуру. Чем больше в ней уровней, тем больше уязвимостей на сайте. Возмите
блог на Вордпрессе: это Линукс, Апач, PHP, MySQL и JavaScript. Вместе они ведут
себя как клубок змей. У каждой технологии свои примочки, уязвимости (известные и
пока еще нет), конфиги и настройки. Вероятность, что все они настроены
правильно, редко бывает стопроцентной.&lt;/p&gt;

&lt;p&gt;Наверное, вы думаете, что хакеры — это гении в очках и плащах, как в
Матрице. Они знают машкоды, решают крипто-хеши на бумажке и все такое. Это не
так. Современные хакеры — это мальчики, которые в лучшем случае знают Питон или
баш, чтобы написать цикл. Их работа сводится к тому, чтобы натравить на сайт
опасный скрипт. Если известно, что сайт сделан на CMS версии X, и она устарела
хотя бы на год, то не сомневайтесь — сайт работает лишь потому, что еще не
привлек внимания.&lt;/p&gt;

&lt;p&gt;Я пишу это к тому, что безопасность сайта обеспечивается его статичностью. Есть
набор md-файлов, и есть скрипт, который собирает статичный сайт. Это папка с
index.html и подпапками, где разложены статьи. Такой сайт можно хостить хоть в
S3, хоть на домашнем роутере. Сломать его можно одним способом — украсть
SSH-ключ или AWS-креды, что к самому сайту не имеет отношения.&lt;/p&gt;

&lt;p&gt;Удивляет, что хотя большинство сайтов могли бы быть статичными, из все равно
делают на вордпрессах и джангах. Они падают, жрут ресурсы, сосут деньги из
бюджета. При этом на сайте почти нет интерактивности: в лучшем случае форма
обратной связи, которая отправляет заявку во внутренний документооборот.&lt;/p&gt;

&lt;p&gt;Казалось бы: если прям так нужна интерактивность, сделай статичный сайт, а для
формы прикрути лямбду или иной бекенд для приема заявок. Даже если бекенд
упадет, сайт продолжит работу. Но нет, все равно сайты делают на скриптовых
языках.&lt;/p&gt;

&lt;p&gt;Много лет назад мой блог &lt;a href=&quot;/new-blog/&quot;&gt;работал на Эгее&lt;/a&gt; Ильи Бирмана. Это
класическая связка Apache + PHP + Mysql. Сколько же я натерпелся с ним! Хостер
без конца менял настройки PHP, и на главной были машинные ворнинги. Как можно
жить, опасаясь, что на главной какая-то дичь, а бекап базы не сделался?&lt;/p&gt;

&lt;p&gt;После переезда на Jekyll вздохнул спокойно. Статичный сайт после генерации не
может испортиться. Он будет такой же и завтра, и через десять лет. Хостить его
можно где угодно, даже без Апача и PHP.&lt;/p&gt;

&lt;p&gt;Хорошо, а как обновлять на сайте информацию, например, тарифы или адреса
отделений? Очень просто: каждую ночь из системы выгружается JSON или CSV с
тарифами. В исходниках сайта делают шаблон, который пробегает по строкам и
красиво их рендерит. На выходе чистый HTML, все довольны. Билд можно запустить
принудительно, если горит.&lt;/p&gt;

&lt;p&gt;Словом, чтобы ваши сайты не ломали, по-возможности делайте их статичными. Даже
если сайт подразумевает личный кабинет и другую интерактивность, будет правильно
отделить котлеты от мух, то есть статичные страницы от динамичных. И сделать
первое на условном Jekyll или схожем движке.&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Nov 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/hacked/</link>
        <guid isPermaLink="true">https://grishaev.me/hacked/</guid>
        
        <category>jekyll</category>
        
        <category>web</category>
        
        <category>security</category>
        
        
      </item>
    
      <item>
        <title>Письма от Госуслуг</title>
        <description>&lt;p&gt;У Госуслуг все печально с письмами:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/gosuslugi-mail/1.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;После “здравствуйте” должен быть восклицательный знак. В конце предложений —
точка. Я видел много безграмотных писем — без запятых и с опечатками, — но чтобы
забывать точки, это в первый раз.&lt;/p&gt;

&lt;p&gt;Кроме того, если мне звонят мошенники, я еще не стал их жертвой. А то выходит, я
становлюсь жертвой каждый второй день. Термина “жертва” вообще лучше избегать в
переписке. Никто не хочет быть жертвой, а Госуслуги уже признали тебя ей заочно.&lt;/p&gt;

&lt;p&gt;Копирайтера, который составил этот текст, — на мыло.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPD&lt;/strong&gt;: читатели сообщили, что &lt;a href=&quot;https://habr.com/ru/companies/rtlabs/articles/768838/&quot;&gt;все так и задумано&lt;/a&gt;. Вот жесть.&lt;/p&gt;

</description>
        <pubDate>Wed, 08 Nov 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/gosuslugi-mail/</link>
        <guid isPermaLink="true">https://grishaev.me/gosuslugi-mail/</guid>
        
        <category>gosuslugi</category>
        
        <category>mail</category>
        
        
      </item>
    
      <item>
        <title>Разбиение дисков</title>
        <description>&lt;p&gt;Когда я был подростком, то сидел под виндой как и все мои приятели. Интернета не
было, и мы ходили в гости с жесткими дисками, чтобы скидывать софт, игры,
&lt;del&gt;порно&lt;/del&gt;музыку и золотые коллекции приколов. Флешек тогда либо тоже не было,
либо они были настолько дороги, что купить их было нельзя.&lt;/p&gt;

&lt;p&gt;Каждый из нас знал правило: жесткий диск нужно разбить на разделы. Только лошара
покупает жесткий на 500 гигабайт и ставит на него винду. Правильные ребята
делают разделы как минимум под винду и мультимедиа.&lt;/p&gt;

&lt;p&gt;Эта привычка оказалась так сильна, что я разбивал диски даже во взрослом
возрасте, хотя понимал, что в этом нет смысла.&lt;/p&gt;

&lt;p&gt;В самом деле, зачем разбивать диск? Единственная причина, которая это
оправдывает — переустановка винды. В те времена винда глючила страшно, падала с
синим экраном и переходила безопасный режим. Проблема решалась радикально:
переустановкой. А чтобы по запаре не удалить драгоценный &lt;del&gt;прон&lt;/del&gt;варез, его
выносили на другой том, а виндовый форматировали под ноль.&lt;/p&gt;

&lt;p&gt;Таким образом, причина этой дурацкой привычки — нестабильность операционной
системы.&lt;/p&gt;

&lt;p&gt;Есть и вторая причина. Винда строит свой интерфейс так, что во главе стоят
диски. Если открыть “Мой компьютер”, там будут диски, и только потом уже
папки. Файловые менеджеры вроде Total Commander и Nornon Commander тоже были
завязаны на диски. Если вдуматься, то Windows 95 была лишь графической оберткой
над MS-DOS, а DOS означает Disk Operating System — система управления
дисками. Так и получилось, что принцип DOS — завязка на диски — докатился до
наших дней.&lt;/p&gt;

&lt;p&gt;С точки зрения пользователя диск — это супер-папка верхнего уровня. Чтобы
облегчить навигацию по файлам, нужно создать больше таких супер-папок. Отсюда
привычка разбивать диск на C:, D:, E:, Z: и так далее. Прироста скорости нет,
потому что это одно физическое устройство. Но диски все равно разбивают.&lt;/p&gt;

&lt;p&gt;Все это я пишу, чтобы сравнить ситуацию с Линуксом или Маком. За годы работы с
ними я ни разу не разбивал диск. Это кажется нелепым: в системе единое дерево
каталогов, и очередной диск — это папка /Volumes/foobar. Нет никакого смысла
что-то разбивать, хоть это и возможно технически.&lt;/p&gt;

&lt;p&gt;Если говорить о медиафайлах, то на Линуксе и Маке не нужно хранить
дистрибутивы. Все ставится из пакетов. За коммерческий софт проще
заплатить. Игры — либо Стим, либо торренты. Фотографии и личные файлы лежат во
всяких дропбоксах и гугло-драйвах. Нет смысла хранить все это выделенном
разделе, опасаясь, как бы не потерять при переустановке винды.&lt;/p&gt;

&lt;p&gt;Из этого следует: если пользователи винды разбивают диски, дело в недостатках
винды. Это сигнал того, что поведение по умолчанию не устраивает
пользователей. Вместо того, чтобы работать, и они занимаются ерундой: что-то
разбивают и переустанавливают.&lt;/p&gt;

&lt;p&gt;Так быть не должно.&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Nov 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/disk-split/</link>
        <guid isPermaLink="true">https://grishaev.me/disk-split/</guid>
        
        <category>computers</category>
        
        <category>disk</category>
        
        <category>legacy</category>
        
        
      </item>
    
      <item>
        <title>Браузер Arc</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/static/aws/arc/1.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Появился “элитный” браузер исключительно под &lt;a href=&quot;https://arc.net/&quot;&gt;MacOS — Arc&lt;/a&gt;. Обещают невиданые
красоты, интеграцию с операционкой, все дела. При первом запуске он устраивает
натуральный пафос: играет музыку, показывает ролик с переливанием
фигур. Каламбия Пикчерз представляет.&lt;/p&gt;

&lt;p&gt;Что внутри, я так и не узнал: бразуер не работает без учетной записи. Поэтому
отправляется в корзину — мне такого браузера не надо. Заодно отмечу вес этого
поделия — 750 мегабайт.&lt;/p&gt;

&lt;p&gt;Было приятно, но боюсь, между нами ничего не выйдет.&lt;/p&gt;

</description>
        <pubDate>Wed, 08 Nov 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/arc/</link>
        <guid isPermaLink="true">https://grishaev.me/arc/</guid>
        
        <category>arc</category>
        
        <category>browsers</category>
        
        
      </item>
    
      <item>
        <title>Неудавшийся собес</title>
        <description>&lt;p&gt;История о том, я как проходил череду собеседований, но не взяли.&lt;/p&gt;

&lt;p&gt;Несколько месяцев назад я подался в американскую фирму. Делают продукт на Кложе,
компетенция в разработке есть. Начали не вчера, пилят уже девять лет. Не
“молодая, динамично развивающая” компания, а нормальная.&lt;/p&gt;

&lt;p&gt;Пришел машинный ответ, что мы с вами свяжемся, на чем я и забыл. И вот на днях
всплыли с предложением пройти собес. И не просто собес, а серию из четырех
интервью с кодигом, а в конце, если повезет, с финальным боссом — CTO.&lt;/p&gt;

&lt;p&gt;Компания из Калифорнии и косит под FAANG. Обычный собес — не их метод. Сперва
хотел отказаться, но подумал — что я теряю? Я ни разу не собеседовался в FAANG,
только разговаривал с рекрутерами. Почему бы не попробовать новый формат?
Согласился, назначили звонки.&lt;/p&gt;

&lt;p&gt;Первый собес на тридцать минут. Приветствие, кто такой, чем живешь. Далее
кодинг: задача на размен монет. Дается сумма и достоинства монет, надо
определить, сколько каких монет дать. Возвращается мапка, где ключ — достоинство
монеты, значение — количество.&lt;/p&gt;

&lt;p&gt;Во время кодинга собеседник молчал. Я рассуждал вслух, проговаривал
алгоритм. Даже когда я попросил подсказать имя функции, он не ответил. Было
ощущение, что он смотрит в браузер по своим нуждам.&lt;/p&gt;

&lt;p&gt;Ладно, вспоминаю жадный алгоритм размена, он не такой сложный. Но есть нюанс: он
работает только если среди монет есть достоинством в одну. Это нужно, чтобы
добить остаток, когда не осталось других монет. А один из кейсов был подобран
так, что монеты достоинством в одну не было.&lt;/p&gt;

&lt;p&gt;Это ломает весь алгоритм, и получается задача “два в одном”. Я затупил и стал
думать, что проще: воткнуть костыль или писать другой алгоритм на перебор или с
общими множителями. Пока я думал, собеседник сказал, что ему пора на другой
звонок, а я могу выслать решение позже. И отключился.&lt;/p&gt;

&lt;p&gt;Посидев еще минут десять, я выслал решение с костылем, который решал последний
кейс. Тратить остаток вечера на все это я не хотел.&lt;/p&gt;

&lt;p&gt;К удивлению, через четыре дня пришло письмо, где меня приглашали на другие три
интервью, на этот раз каждое по часу. Разрешили размазать их максимум на два
дня. Договорились так: два часовых собеса во вторник с перерывом в полчаса и еще
одно на час в среду.&lt;/p&gt;

&lt;p&gt;Итак, первый часовой звонок, собеседник из Венгрии. Приветствие,
интродакшен. Задача: написать суперсет множества. Это когда для элементов {1, 2,
3} возвращаешь {1, 2 , 3}, {1, 2}, {2, 3}, {1, 3}, {1}, {2}, {3}, {}. Очевидно,
это решается рекурсией и очередью, но первые пять минут я тупил, не понимая, что
передавать между итерациями.&lt;/p&gt;

&lt;p&gt;Потом меня осенило и я выдал решение на tree-seq. Не все знают про эту штуку,
это встроенная фишка Кложи. Позволяет разложить любую структуру на
последовательность. Собеседник сказал, что ни разу с ней не работал и удивлен
решением. По реакции я понял, что он колеблется, но вроде бы склоняется в мою
сторону.&lt;/p&gt;

&lt;p&gt;Я импортировал модуль тестов и написал тесты на все случаи из задачи — они
проходили.&lt;/p&gt;

&lt;p&gt;Далее собеседник велел спроектировать функцию для некоторой бизнес-задачи. Нужно
определить обязательные и опциональные параметры, подобрать имя, написатаь
докстринг, учесть несколько вариаций. Все это я делал в одном опенсорс-проекте,
поэтому написал скелет функции, а дальше открыл Гитхаб и показал код. Собеседник
был доволен, и на этом мы закончили.&lt;/p&gt;

&lt;p&gt;Проходит полчаса, новый звонок. Собеседник из Штатов. Какие были ваши главные
челенджи? Открываю драйвер для Постгреса, там каждая строчка — челендж. Чтение и
парсинг байтов, стейт-машина для воркфлоу, проброс состояния в дальние концы
кода. Он смотрит, кивает.&lt;/p&gt;

&lt;p&gt;Дает задание: есть граф, нужно определить, можно ли пройти из вершины А в Б. Про
графы я читал давно, а задачу, связанную с ними, решал и того раньше. Но
рассказываю: бывает обход в глубину и ширину, первый основан на стеке, второй на
очереди. В глубину не работает, если в графе есть циклы. Поэтому будем обходить
вширь и с очередью. Он одобрительно крякает.&lt;/p&gt;

&lt;p&gt;Я пишу код, который работает на простых примерах. Собеседник дает огромный граф,
и на нем код падает. После пары подсказок я делаю фикс, и код проходит. Жаль,
что что не повторил графы раньше, тем более что книга с графами лежала под
рукой, и там даже была закладка. Показываю свою библиотеку для зипперов, где
сделан обход в ширину и поиск по предикату. Собеседник доволен, прощаемся.&lt;/p&gt;

&lt;p&gt;Третий часовой звонок, два собеседника из Европы. Как обычно, привествие,
интродакшен и задача: написать интерпретатор Кложи. Это функция ev, которая
может выполнять код, определять переменные, делать ветвление if/else,
лексические переменные, функциии, замыкания на функциях, и многое другие. Pdf с
описанием был на четыре страницы.&lt;/p&gt;

&lt;p&gt;Кому-то это покажется сложным, но для меня это было самой простой
задачей. Интерпретатор подробно рассмотрен в SICP, и та глава врезалась в самую
подкорку. Я сделал вычисление форм, арифметику, сравнение, а также две особые
формы: глобальные переменные и let. Единственное место, где я втупил, было
разделение контекста. Ясно, что должен быть глобальный контекст, чтобы
объявление переменной в одном ev действовало на второй. Кроме этого нужен
локальный контекст для let, который пробрасывается как мапа. В процессе резолва
оба контекса мерджатся.&lt;/p&gt;

&lt;p&gt;Собеседники постоянно кивали на мои высказывания. Показывали большой палец. В
конце обсудили потенциальные улучшения кода, что я написал. Разошлись довольные.&lt;/p&gt;

&lt;p&gt;Я стал ждать финального босса, и вдруг приходит письмо от рекрутера. Иван, мы
тут подумали и решили, что продолжать нет смысла. Очень коротко, буквально два
предложения. Я вежливо поинтересовался подробностями, но понятно, что никто не
ответил.&lt;/p&gt;

&lt;p&gt;Ну и что это было? До сих пор не могу понять. Какой-то цирк. Не знаю, как
справились другие, но вряд ли сильно лучше меня. Хоть я и тупил, но в итоге все
задачи выполнил. Может, параллельно со мной собеседовались маньяки из Advent of
Code? Почему тогда не сказать прямо: другой кандидат справился лучше и мы
выбрали его?&lt;/p&gt;

&lt;p&gt;Досадно, что эйчары, хотя и работают с людьми, не имеют малейшей этики. И не
говорите мне про американские суды, мол, засудят за правду. Ты эйчар, и раз
приходится делать отказы, ты должен делать это вежливо. Иначе ты не эйчар, а
имитация.&lt;/p&gt;

&lt;p&gt;Почитать бы им правила деловой переписки Ильяхова с Сарычевой или что-то из их
блогов. Неужели нет англоязычных ресурсов, где написано об уважении к
собеседнику? Видимо, нет.&lt;/p&gt;

&lt;p&gt;Что можно вынести из этой истории? Собеседование — это по-прежнему лотерея. Я
готовился к system design интервью, а был кодинг. Можно готовить графы, а
попадутся деревья. Спросят про главный челендж — а ты забыл про удачный случай и
говоришь про неудачный.&lt;/p&gt;

&lt;p&gt;Найм по-прежнему сломан. Рекрутеры не дают обратной связи, по-хамски отказывают
без объяснения причин, хотя ты вложил шесть часов на собесы и подготовку к ним.&lt;/p&gt;

&lt;p&gt;Хорошо искать работу, когда уже есть работа. В этом случае отказ, даже грубый,
не вопринимается остро.&lt;/p&gt;

&lt;p&gt;Никогда не узнаешь, чем ты не подошел. Тем, что решил плохо? Тем, что решил
слишком хорошо? Много улыбался? Мало улыбался? Потому что русский? Потому что
нерусский?&lt;/p&gt;

&lt;p&gt;Все это в чужих головах, куда нет доступа. А потому — написал в бложик,
отпустило, забылось. Едем дальше!&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Nov 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/sobes/</link>
        <guid isPermaLink="true">https://grishaev.me/sobes/</guid>
        
        <category>interview</category>
        
        
      </item>
    
      <item>
        <title>PG docs, part 8. HoneySQL</title>
        <description>
&lt;p&gt;&lt;em&gt;(This is a new documentation chapter from the &lt;a href=&quot;https://github.com/igrishaev/pg&quot;&gt;PG project&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ToC&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/en/pg-docs/01/&quot;&gt;About &amp;amp; Installation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/en/pg-docs/02/&quot;&gt;The Client&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/en/pg-docs/03/&quot;&gt;Connection Pool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/en/pg-docs/04/&quot;&gt;Arrays&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/en/pg-docs/05/&quot;&gt;Notifications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/en/pg-docs/06/&quot;&gt;SSL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/en/pg-docs/07/&quot;&gt;COPY&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/en/pg-docs/08/&quot;&gt;HoneySQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this chapter:&lt;/p&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#about&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- tocstop --&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/seancorfield/honeysql&quot;&gt;HoneySQL&lt;/a&gt; is a well-known library for building SQL expressions from
Clojure maps. It’s convenient for making complex queries, for example, when you
have optional JOIN operators. Or you’re unaware of the final WHERE conditions as
the filtering parameters come from the request. HoneySQL frees you from building
raw SQL queries by concatenating strings, which is unsafe and leads to SQL
injections.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg-honey&lt;/code&gt; is a small wrapper on top of HoneySQL. It provides special
versions of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute&lt;/code&gt; functions that accept not a SQL string but
Clojure maps. The maps get transformed into SQL under the hood and get executed.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg-honey&lt;/code&gt; package as follows.&lt;/p&gt;

&lt;p&gt;Lein:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com.github.igrishaev/pg-honey&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.1.10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Deps:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com.github.igrishaev/pg-honey&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:mvn/version&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.1.10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Import the library:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pg.honey&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pgh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query&lt;/code&gt; function accepts a connection object, a Clojure map representing a
query and a map of options.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pgh/query&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:select&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:from&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:pretty&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as/first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The third parameter combines HoneySQL parameters and the standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query&lt;/code&gt;
options. In the example above, we passed a custom reducer into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:as&lt;/code&gt;
parameter, and we also specified the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:pretty&lt;/code&gt; HoneySQL option to true. With the
pretty flag enabled, HoneySQL produces a formatted SQL expression, which is
easier to read in logs.&lt;/p&gt;

&lt;p&gt;Please note: since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query&lt;/code&gt; function doesn’t allow you to pass any
parameters, the following example will lead to an error response:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pgh/query&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:select&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:from&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:where&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:pretty&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as/first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a limitation of the PostgreSQL wire protocol: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Query&lt;/code&gt; message bears
only a pure SQL expression with no parameters. For parameters, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute&lt;/code&gt;
function described below.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute&lt;/code&gt; function acts the same but accepts a Clojure map that might have
values that become parameters when rendering the map. Here is an example:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pgh/execute&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:select&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:from&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:where&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:pretty&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as/first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pgh/execute&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:insert-into&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:demo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:values&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:pretty&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Under the hood, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{:inset-into ...}&lt;/code&gt; map gets rendered into a SQL vector:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;insert into ... values ($1, $2), ($3, $4), ($5, $6)&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It gets split on the SQL expression and the parameters, which are passed into
the underlying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg.client/execute&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;You can use named parameters that HoneySQL does support. Place a specific
keyword into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[:param ...]&lt;/code&gt; vector, and pass a map of params into the
options as follows:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pgh/execute&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:select&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:from&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:where&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:param&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:pretty&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:params&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To familiarise yourself with HoneySQL features, please refer to the &lt;a href=&quot;https://github.com/seancorfield/honeysql&quot;&gt;official
documentation&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/en/pg-docs/08/</link>
        <guid isPermaLink="true">https://grishaev.me/en/pg-docs/08/</guid>
        
        <category>clojure</category>
        
        <category>programming</category>
        
        <category>postgres</category>
        
        <category>sql</category>
        
        <category>honeysql</category>
        
        
      </item>
    
  </channel>
</rss>
