<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ivan Grishaev's blog</title>
    <description>Writing on programming, education, books and negotiations.
</description>
    <link>https://grishaev.me/</link>
    <atom:link href="https://grishaev.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 25 Nov 2022 07:28:07 +0000</pubDate>
    <lastBuildDate>Fri, 25 Nov 2022 07:28:07 +0000</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>Кто виноват</title>
        <description>&lt;p&gt;Наверное, вы слышали: чтобы получить правильный ответ, задавайте правильный вопрос. И наоборот: неправильный вопрос займет массу времени и сил, но ответа не даст. Удивительно, что многие вопросы, что мы задаем, поставлены неверно. Один из них звучит как в заголовке — кто виноват?&lt;/p&gt;

&lt;p&gt;Стоит чуть-чуть подумать, как станет ясно, что это неправильный вопрос. Так ли важно, кто именно виноват? Что то дает? Как виновность поможет исправить ситуацию и предотвратить ошибку в будущем?&lt;/p&gt;

&lt;p&gt;Если взять историю любой катастрофы — Титаник, Чернобыль — везде окажется, что виноваты не люди на местах. Это очень желанно руководству, особенно если исполнитель умер. Непрофессиональные операторы взорвали реактор. Беспечная команда нашла на айсберг, и делу конец.&lt;/p&gt;

&lt;p&gt;Да что катастрофы, вспомним истории с падением прода. Всегда оказывается, что программист Вася запустил опасный скрипт с кредами от прода, которых у него быть не должно. Креды дал ему под честное слово админ во время попойки в баре. Креды выдаются по заявке, нужно собрать пять подписей, но гендиректору некогда, его зам на больничном и так далее.&lt;/p&gt;

&lt;p&gt;Когда сотрудник Гитлаба удалил базу с прода, выяснилось много вещей. Бекапы не работали, оповещения об ошибке бекапов тоже не работали. Пока петух не клюнул, никто не волновался.&lt;/p&gt;

&lt;p&gt;Какой-то чел из системы очистки воды оставил штат без питья на неделю. Оказалось, он подключался из дома к рабочей машине по TeamViewer, чтобы не ездить по ночам. Десять раз писал начальству с просьбой сделать доступ по впн, но просьбы даже не рассмотрели.&lt;/p&gt;

&lt;p&gt;Представим теперь, что условного Васю взяли за шкирку и объявили: ты виноват. Кому от этого легче? Даже если Васю уволят, ситуация повторится в будущем.&lt;/p&gt;

&lt;p&gt;Верный признак, что вопрос вины неверно поставлен — он дает большой выхлоп. Вася виноват, но… и дальше экраны текста, что на самом деле чего-то там. Так быть не должно.&lt;/p&gt;

&lt;p&gt;Вместо “кто виноват” нужно спрашивать “кто несет ответственность”. Это все меняет: оказывается, вина и ответственность — разные вещи, которые делятся между людьми. Виноват один, отвечает другой. Как они разрулят между собой — не наше дело.&lt;/p&gt;

&lt;p&gt;Вася уронил прод и он виноват. Но отвечает техдиректор, потому что у Васи в принципе не должно быть доступа к проду.&lt;/p&gt;

&lt;p&gt;Оператор взорвал реактор и он виноват. Отвечают те, кто проектировал, вводил в эксплуатацию и тестировал.&lt;/p&gt;

&lt;p&gt;Капитан навел корабль на айсберг и он виноват. За нехватку шлюпок, за неумение команды спасти пассажиров отвечает перевозчик.&lt;/p&gt;

&lt;p&gt;Пьяный устроил дебош в клубе. Он виноват, но отвечает охрана, которая его пропустила.&lt;/p&gt;

&lt;p&gt;Сотрудник слил базу клиентов. Он виноват, но отвечает фирма — юрлицо. Будьте любезны штраф в десять тысяч за каждую строку. Сливы сразу прекратятся.&lt;/p&gt;

&lt;p&gt;Водитель в Воронеже сбил насмерть коляску с грудным ребенком. Оказалось, у него десятки неоплаченных штрафов за последние полгода. Он виноват. Но пусть начальник ГИБДД объяснит, почему водителю не аннулировали права.&lt;/p&gt;

&lt;p&gt;Правило: когда случилось что-то из ряда вон, ищите ответственного, а не виновного. Когда найден первый, второй появится автоматически. Но не наоборот: чаще имеем виновного Васю, с которого нечего взять, а ответственных нет.&lt;/p&gt;

&lt;p&gt;Бывает, что ответственный известен, но сыскать с него ничего нельзя. Это значит, игра заведомо проиграна. В следующий раз не ведитесь.&lt;/p&gt;

&lt;p&gt;Сказанное имеет прямое отношение к сегодняшней ситуации. В России часто ищут виновных и находят их в лице американских президентов, англосаксов, оппозиции, инагентов и бог знает кого еще. Каждый раз, когда это слышу, в голове вопрос: ладно, пусть виноваты англосаксы, но кто несет ответственность? Если никто, что толку мне знать?&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/whos-guilty/</link>
        <guid isPermaLink="true">https://grishaev.me/whos-guilty/</guid>
        
        <category>life</category>
        
        
      </item>
    
      <item>
        <title>Интернет и геополитика</title>
        <description>&lt;p&gt;На заре интернета было забавное по текущим временам мнение. Якобы он станет средой, которая объединит людей, отбросив границы и политические взгляды. Что противоречия физического мира отпадут, и все найдут согласие. Что коллективный разум возобладает над политиками и превзойдет их.&lt;/p&gt;

&lt;p&gt;Забавно видеть, что все из этого не только не сбылось, но и наоборот — интернет все больше становится геополитизированным. Увы, в нашу жизнь пришла геополитика — смесь двух терминов, каждый из которых тащит худшее прошлого века: политику и территории. Что из этого вышло, мы наблюдаем сегодня.&lt;/p&gt;

&lt;p&gt;Современный интернет геополитизирован, потому что регулируется двумя принципами: политикой и географией. Крупные сервисы блокируют людей по их положению на планете. Страны блокируют сервисы по политическим причинам. Большая часть запрещенного контента — это то, что запрещено режимом, причем не только в России.&lt;/p&gt;

&lt;p&gt;Тезис о едином пространстве разваливается на глазах. Все меньше остается сервисов, куда можно попасть, не испытывая ограничений. Твиттер(1) и Инстаграм(2) заблокированы Россией. На Госуслуги и Налог.ру нельзя зайти, если ты не в России. Если уехал, ставь московский ВПН, что до недавнего времени звучало анекдотом.&lt;/p&gt;

&lt;p&gt;Порнхаб в одной стране разрешен, в другой запрещен, в третьей — только с авторизацией через местную соцсеть. Grammarly не работает с российскими IP, нужен ВПН. Украинские сайты показывают россиянам плашку с расчлененкой.&lt;/p&gt;

&lt;p&gt;Надоели сайты, защищенные Cloudflare. При каждом заходе видишь уродский экран с задержкой в 5-10 секунд. Иногда Cloudflare требует капчу с гидрантами и велосипедами. Двадцать минут — и сессия рвется, проверка начинается снова.&lt;/p&gt;

&lt;p&gt;Гугл и Ютуб боятся ВПН как огня. С ним Ютуб показывает капчу — не дай бог ты пройдешь мимо Большого Брата. Фейсбук, Твиттер и аналоги блокируют Тор. Им лучше знать, что безопасно, а что нет.&lt;/p&gt;

&lt;p&gt;Про Китай писать нет смысла.&lt;/p&gt;

&lt;p&gt;Сервисы все больше ведут себя как государства. Пользователь, чей IP вызывает малейшее подозрение, приравнивается к нелегалу, незаконно переходящему границу. Его надо схватить и подвергнуть деанону.&lt;/p&gt;

&lt;p&gt;Фейсбук и Твиттер открыто занимают позиции в социальных конфликтах США: выборы, BLM и так далее. Получить бан за поддержку Трампа теперь в порядке вещей. Не лучше ситуация и у нас, когда ВК и Мейл.ру сливают данные о тех, кто состоит в группах “оппозиции”.&lt;/p&gt;

&lt;p&gt;В той или иной мере огораживается каждый второй сайт. Со включенным ВПН нельзя передать показания в энергослужбу или заказать б/у книгу. Знакомый справедливо заметил, что сегодня проще иметь два ноута — настроенный под иностранный сайты и для внутренних нужд.&lt;/p&gt;

&lt;p&gt;Выделять какую-то страну в том плане, что они блокирую больше, чем остальные, нет смысла — это тренд. Интернет — это общение и информация, и государство всегда болезненно реагирует, когда то или другое выходит из под контроля. И неважно, какой политический строй: демократия, автократия или тоталитаризм. Благородный предлог найдется всегда: терроризм, антиваксы, тридевятая колонна. В каждой стране свои пугалки про черную руку и простыню.&lt;/p&gt;

&lt;p&gt;Очевидно, никакого свободного интернета нет, более того — не интернет двигает обществом, а двигают им. Современная дурь оседает в интернете и приводит к ограничениям по IP, странам, действиям режима и остальному.&lt;/p&gt;

&lt;p&gt;Получится ли сделать что-нибудь другое? Возможно, но это будет принципиально иной вид связи. Он должен быть максимально простым для пользователя и невозможным для блокировок. Примерно как блокчейн, хоть я и не люблю аналогии с криптой. К сожалению, лично мне этот новый вид связи трудно представить хотя бы приблизительно.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1, 2 – считаются экстремистскими организациями или вроде того.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/geointernet/</link>
        <guid isPermaLink="true">https://grishaev.me/geointernet/</guid>
        
        <category>web</category>
        
        
      </item>
    
      <item>
        <title>Мобильная деградация</title>
        <description>&lt;p&gt;Последнее время я делю экран пополам: слева браузер, справа Емакс. Такой сетап нужен для определенной работы, связанной с редактированием текста.&lt;/p&gt;

&lt;p&gt;Заметил, что с браузером происходят странные вещи. Стоит только поджать окно на жалкие пиксели, включается мобильный режим. Лучше всего это наблюдать на Гитхабе. Нормальный режим:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/mobdeg/1.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Но стоит уменьшить окно на пиксель, как вдруг:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/mobdeg/2.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Кто-нибудь в курсе, зачем это? Код — самое главное на этой странице — пропал под выпадашку, хотя места достаточно. Появилась адская разреженность, кнопки сплющились, как будто по ним проехали катком. Кто вообще просил? Остается выругаться и расширить окно обратно.&lt;/p&gt;

&lt;p&gt;Досадно от того, что кто-то сидел над этой хитрожопой версткой, трекал часы в Джире, презентовал менеджерам. А пользователь мечтает развидеть и вернуть все взад.&lt;/p&gt;
</description>
        <pubDate>Mon, 31 Oct 2022 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/mobile-deg/</link>
        <guid isPermaLink="true">https://grishaev.me/mobile-deg/</guid>
        
        <category>web</category>
        
        <category>ui</category>
        
        <category>github</category>
        
        
      </item>
    
      <item>
        <title>Автодополнение</title>
        <description>&lt;p&gt;В хромо-подобных браузерах есть полезная функция — сохранение форм. Дико выручает, когда в сотый раз вводишь имя, фамилию и почту на сайте. Буквально сегодня я заполнял форму на сайте налоговой шестнадцать(!) раз. Если бы не автокомплит, я бы, наверное, стер пальцы. Тем более умники-разработчики повы..бывались с некоторыми полями, и в них не работает вставка. Какой-то скрипт блокирует событие, я начал было смотреть в консоли, но в итоге плюнул на это.&lt;/p&gt;

&lt;p&gt;Удивляет, однако, то, что автокомплит нельзя редактировать. В очередной раз я вставил не то значение, и оно осталось в выпадашке навсегда. Теперь каждый раз, выбирая из нее пункт, надо быть осторожнее, чтобы не тыкнуть не туда.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/autocomplete/1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Не понимаю, почему автокомплит нельзя редактировать? Хватило бы удаления: напротив каждого элемента сделать крестик, который удаляет его из выпадашки. Просто и дешево.&lt;/p&gt;

&lt;p&gt;Между прочим, такая функция есть в Телеграме. Предположим, вы искали сообщество LaTeX, а нашли латекс и доминирование:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/autocomplete/2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Если тыкнуть в любой канал &lt;em&gt;(ну, просто так)&lt;/em&gt;, он останется в истории поиска. Будет неприятно, если это всплывет на созвоне при шаринге экрана. Крестик справа удаляет элемент из истории поиска, и с ним я спокоен: никакого доминирования мой собеседник не увидит.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/autocomplete/3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В общем смысле это ведет к правилу: собираешь данные — позволь клиенту их удалить. Удаление стоит усилий, порой огромных (привет GDPR), но тогда незачем и начинать.&lt;/p&gt;
</description>
        <pubDate>Mon, 31 Oct 2022 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/autocomplete/</link>
        <guid isPermaLink="true">https://grishaev.me/autocomplete/</guid>
        
        <category>chrome</category>
        
        <category>autocomplete</category>
        
        <category>web</category>
        
        
      </item>
    
      <item>
        <title>Win-win</title>
        <description>
&lt;p&gt;Читаю книгу Егора &lt;a href=&quot;https://www.piter.com/product/nash-kod-remeslo-professiya-iskusstvo&quot;&gt;“Наш код”&lt;/a&gt;. Хорошая книга, местами спорная, но ничего — просто держите в голове, что это Егор. Есть, однако, момент, мимо которого я не мог пройти молча — это эпизод с переговорами между двумя группами.&lt;/p&gt;

&lt;p&gt;Я хотел привести оригинальный текст, однако электронной версии, откуда можно скопировать и вставить, в интернете нет. Поэтому расскажу завязку своими словами.&lt;/p&gt;

&lt;p&gt;Есть группа разработчиков, которые пилят REST API, и есть группа потребителей. Понадобилась доработка сервиса, и потребители выдвигают условие: чтобы новые данные можно было забрать одним запросом. Разработчикам сервиса это неудобно: они сделали несколько новых методов, полагая, что потребители пошлют несколько запросов. Группы не сошлись во мнении, и начинается совещание.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Герой книги относится к группе разработчиков. Он рассуждает о переговорах и рассказывает о потенциальных исходах: &lt;strong&gt;win-lose&lt;/strong&gt;, когда одна сторона выиграла, а другая проиграла; &lt;strong&gt;lose-lose&lt;/strong&gt;, когда из-за компромисса обе группы согласились на неудобные им решения; и наконец &lt;strong&gt;win-win&lt;/strong&gt; — стороны пришли к наилучшему для себя решению.&lt;/p&gt;

&lt;p&gt;Совещание идет по этим стадиям. Глава потребителей, азиат Бао, требует, чтобы сервис отдавал данные одним запросом. Это win-lose, потому что груз падает на плечи разработчиков. Адриан, их глава, торгуется: предлагает уменьшить число запросов с пяти до трех. Это lose-lose, потому что обе стороны вынуждены дорабатывать свой код, плюс уменьшение числа методов не решает главного конфликта: метод должен быть один.&lt;/p&gt;

&lt;p&gt;И вот стороны находят решение, которое герой книги расценивает как &lt;strong&gt;win-win&lt;/strong&gt;. Расширить один из написанных методов необязательным параметром. Если он передан, вдобавок к старым данным метод добавляет новые.&lt;/p&gt;

&lt;p&gt;Теперь когда вы знаете сюжет, объясните мне, где здесь win-win и почему так считает герой книги? Спрашиваю, потому что никакого win-win нет не только в этой ситуации — его не существует в мире.&lt;/p&gt;

&lt;p&gt;Если вы читали Джима Кемпа, то наверное помните, что половину книги он борется со стратегией win-win, доказывая, что она приводит к проигрышу. Я бы не повторял этот тезис, если бы не убедился в его правоте. Никакого win-win не бывает. Сложные переговоры не могут завершиться решением, которое одинаково устраивает всех. Если бы такое решение было, не понадобились бы и преговоры! Это же очевидно.&lt;/p&gt;

&lt;p&gt;На практике одной из сторон всегда приходится уступить. Другими словами, win-win — это завуалированный win-lose, при этом lose приходится на ту сторону, которая искренне верит, что получила win. Если оппонент предлагает решение и утверждает, что это win-win, перед вами манипулятор. Win достанется только ему.&lt;/p&gt;

&lt;p&gt;Сказанное не значит, что в каждых переговорах нужно стоять насмерть. Иногда приходится уступать, при этом из уступки можно извлечь пользу. Например, если доработка на моей стороне ничтожна, я соглашусь, сделав вид, что взваливаю на себя огромную ношу. В будущем это окупится: дадут премию, увеличат отпуск или освободят от внеурочной работы. Но в терминах переговоров это win-lose, потому что я взял обязательства к удовольствию другой стороны.&lt;/p&gt;

&lt;p&gt;Вернемся к ситуации из книжки. Какие вышли итоги? Группа Бао хотела один вызов к сервису и получила его. Для них это однозначный win. Группе Адриана выпала доработка сервиса так, чтобы при необязательном параметре метод возвращал новые данные. Герой книги оценивает это как win, потому что API Адриана остался “правильно” спроектированным и его репутация не пострадала.&lt;/p&gt;

&lt;p&gt;Тот, кто писал и поддерживал API, знает, что опциональные параметры крайне нежелательны. Каждый такой параметр порождает развилку if/else в коде, что усложняет его понимание. Больше ветвлений → больше кода → больше багов. Опциональный аргумент требует больше тестов. Исправляя уже написанный метод, есть шанс сломать его и выкатить ошибку на прод, особенно если не было тестов — а именно этот случай описан в книге.&lt;/p&gt;

&lt;p&gt;Наконец, поведение, когда метод возвращает X, а при foo=true — связку (X + Y), говорит о плохом дизайне API. Каждый метод должен делать что-то одно, в том числе возвращать данные одной семантики. Если метод &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET /users&lt;/code&gt; выводит пользователей и статистику покупок, он явно избыточен. Старому методу пришили вторую голову, но от этого он не стал лучше. Пишу это по следам похожих историй, когда в отлаженный API добавляли “маленький необязательный параметр”, от которого сложность росла кратно.&lt;/p&gt;

&lt;p&gt;Кроме вреда от win-win, Кемп пишет о том, как важно придерживаться миссии на переговорах. Миссия — это не сиюминутная цель вроде “показать уродам, кто здесь главный”. Миссию Адриана можно сформулировать так: грамотно развивать сервис платежей, избегая спонтанных решений, с целью как можно дольше поддерживать код в читаемом виде, чтобы с легкостью адаптировать требования бизнеса.&lt;/p&gt;

&lt;p&gt;Длинновато, но суть ясна. Как ясно и то, что решение о новом параметре противоречит миссии. Если бы Адриан следовал ей, вот что он бы сказал Бао.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Я понимаю вашу просьбу насчет одного метода. Вам будет легче получить данные в коде. В то же время это усложнит код на нашей стороне. Кроме того, существующий метод работает уже долго, на него завязаны бизнес-процессы, а прошлые разработчики не написали тесты. Если мы будем его исправлять, придется сначала покрыть его тестами, что задержит выпуск версии. Чтобы успеть в срок, мы сделаем отдельный метод или несколько. А если у ваших сотрудников будут сложности с их вызовом, придем на помощь: скинем образцы кода, ответим на все вопросы.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Вот ответ человека, который понимает миссию и не ждет win-win. Как видите, при таком раскладе группа Адриана не взваливает на себя всю работу, а делит ее равномерно с командой Бао. Если учесть, что изначально Бао рассчитывал на обратное — всю работу проделают разработчики — это win Адриана и lose Бао. Все сходится, чудес не бывает.&lt;/p&gt;

&lt;p&gt;Но в книге не так: Бао получил один запрос, группа Адриана выкатила неуклюжий метод “два в одном”. А поскольку герой относится к группе Адриана, я не понимаю, где здесь win. Может быть, вы понимаете?&lt;/p&gt;

&lt;p&gt;В заключение напомню про книжку Кемпа. Горячо советую прочитать хотя бы первую ее половину. Тезисы удивительно точны и подтверждаются жизнью.&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/win-win/</link>
        <guid isPermaLink="true">https://grishaev.me/win-win/</guid>
        
        <category>win-win</category>
        
        <category>переговоры</category>
        
        
      </item>
    
      <item>
        <title>Программа Preview</title>
        <description>&lt;p&gt;Если я когда-нибудь пересяду с Мака на что-либо другое, больше всего мне будет не хватать… программы Preview. Да, встроенной программы просмотра изображений. Все потому, что Preview — невероятно мощный софт. Просмотр картинок и PDF лишь малая часть ее возможностей. Ниже я расскажу, что именно она умеет.&lt;/p&gt;

&lt;p&gt;(1) Банально, но все-таки — Preview открывает картинки и PDF. Не нужно ставить сторонний софт, который пропишет себя в автозагрузку и службы. С тяжелым сердцем вспоминаю Adobe Reader, который разросся до размера офисного пакета.&lt;/p&gt;

&lt;p&gt;Поставив Windows 10 на игровой комп, был удивлен, что в ней нечем открыть PDF (браузер Edge не в счет). По клику на PDF открывается магазин Microsoft – как это возможно в 2022 году, не понимаю. А на Маке сел — и читаешь PDF.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;(2) Вторая вещь, о которой мало кто знает — в Preview богатые возможности по редактированию изображений. Прежде всего это поворот и зеркалирование. Полезно, когда вы открыли неудачно снятый на телефон кадр. Достаточно нажать Command+R (rotate) — и картинка плавно повернется. При этом файл автоматически сохранится.&lt;/p&gt;

&lt;p&gt;Поворот работает и для PDF. Вообще, любые операции с PDF – поворт, обрезка, вставка страниц – это гребаный ад: различные утилиты, конверторы, онлайн-сервисы. А Preview все делает из коробки.&lt;/p&gt;

&lt;p&gt;Кроме трансформации, Preview умеет цветокоррекцию и масштабирование. Это пункты меню Tools → Adjust Color и Adjust Size. В окошке цветокоррекции доступны разные ползунки и кнопка Auto Levels. Менять размер картинки можно по разным критериям: в пикселях, процентах, точках на дюйм.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/preview/1.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Дополнительно изображение можно обрезать: выделить область и нажать Command+K (crop). В итоге Preview покрывает базовые возможности Фотошопа.&lt;/p&gt;

&lt;p&gt;(3) Набор инструментов Annotate служит для вставки линий, стрелок, геометрических фигур, текста. Всем объектам можно задать цвет обводки и заливки. Пока файл не закрыт, объекты можно менять и перетаскивать.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/preview/2.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(4) Предыдущий пункт справедлив для PDF! Представьте, вам дали какой-то бланк, и нужно поправить в нем пару мест. Без Preview это мучение — ставить софт, перегонять Гугло-док и обратно. В Preview вы открыли PDF, накрыли старый текст белым прямоугольником, а сверху добавили нужный текст. Пользуюсь постоянно.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/preview/3.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(5) Еще про Annotate: среди прочих пунктов есть функция вставки подписи (обычной рукописной, факсимиле). Спрашивается, где взять эту подпись? На винде пришлось бы сканировать бумажку и чистить фон волшебной палочкой в Фотошопе. В Preview работает импорт подписи с веб-камеры. Расписались на бумажке, поднесли к вебке — Preview ее обнаружил и вычистил фон. Подписи синхронизируются через iCloud; я добавил ее в пять лет назад и пользуюсь до сих пор — добавляю в инвойс при валютном контроле. Все это работает и в PDF.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/preview/4.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(6) Каждый знает, как тяжело получить отрывок из PDF. Например, страницы с 2 по 5 из 100-страничного документа. В Preview достаточно выделить страницы в панели thumbnails и перетащить на рабочий стол или папку. Ну или выбрать File → Export.&lt;/p&gt;

&lt;p&gt;(7) То же самое, только для объединения PDF. Как вставить титульный лист в готовый PDF? Просто перетащить из Finder в панель thumbnails.&lt;/p&gt;

&lt;p&gt;(8) Preview — программа с человеческим диалогом печати. Любой документ я сперва экспортирую в PDF, открываю в Preview и печатаю оттуда. Все настройки печати разбиты по категориям. Работает предварительный просмотр печати.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/preview/5.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Для сравнения приведу диалог печати Ворда. В нем отстутствует “незначительная” деталь: одно- или двусторонняя печать. А это, между прочим, охренеть как важно – с неверной опцией тираж либо уйдет в урну, либо повлечет двойной расход бумаги. Остается одно: экспорт из Ворда в PDF и печать из программы с нормальным диалогом – то есть Preview.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/preview/6.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Как понять, с одной или двух сторон печатается документ?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;(9) Инструмент “Лупа” полезен для сложных PDF. Например, проверить шрифты, тонкие линии и без многократного зума. Пользуюсь при подготовке книги к печати.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/preview/7.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(10) Вот как объединить картинки в постраничный PDF. Выделить их в Finder, правой кнопкой → Open with → Preview. Нажать Command+P (печать). В диалоге выбрать PDF → Save as PDF.&lt;/p&gt;

&lt;p&gt;Зачем? Чтобы прикрепить набор картинок там, где принимают только один файл. Например, на сайте ГИБДД, городской управы и прочих казенных сайтах.&lt;/p&gt;

&lt;p&gt;(11) Еще одна убийственная функция — скан документов с айфона. Работает через File → Import from iPhone → Scan Document. Если оба устройства в одной сети, на телефоне откроется сканер бумаг. От обычного фото он отличается тем, что находит границы документа. Если это не удалось, предлагает задать границы по четырем точкам (corner pin).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/preview/8.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;По точкам сканер выпрямляет геометрию, корректирует цвет, обрезает лишнее. Получается качественный скан, который отлично выглядит на печати. Серия снимков объединяется в один PDF. Как только сеанс окончен, PDF оказывается на ноуте в Preview. Разве не круто? С помощью него я отсканил документы всех членов семьи. Если нужна бумажная копия, спокойно печатаю на принтере, а не бегу в копицентр.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/preview/9.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;При хорошем освещении скан с телефона не отличить от скана в сканнере (простите за тавтологию).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Словом, вот такая крутая программа Preview. Для меня она одна из самых полезных: заменяет Фотошоп, всякие pdftools, pandoc и аналоги. Бесплатно и из коробки. Один минус — закрыто и только под Мак.&lt;/p&gt;

&lt;p&gt;Уверен, в Preview есть и другие фишки, которые я либо забыл, либо еще не изучил. Если что, пишите, добавлю.&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/preview/</link>
        <guid isPermaLink="true">https://grishaev.me/preview/</guid>
        
        <category>ui</category>
        
        <category>preview</category>
        
        <category>mac</category>
        
        <category>software</category>
        
        
      </item>
    
      <item>
        <title>Коротко об lndir</title>
        <description>&lt;p&gt;Небольшая заметка о утилите, которая требуется редко, но метко – &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lndir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Когда у меня стало больше одного Мака, появилась проблема синхронизации настроек. Другими словами, чтобы всякие &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.thisrc&lt;/code&gt; и &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.thatrc&lt;/code&gt; были одинаковы и подхватывались при изменении. Сюда входит конфиг Emacs, ssh, словари aspell, профили AWS, конфиги ctags, zshell и многое другое.&lt;/p&gt;

&lt;p&gt;Легче всего держать dot-файлы в репозитории и ставить симлинки. Неожиданно я столкнулся с тем, что не так легко написать shell-скрипт, который бы поставил симлинки на файлы из папки. Пытался при помощи &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find ... -execute&lt;/code&gt; и &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xargs&lt;/code&gt;, но постоянно что-то мешало. То отсутствие файла, то его существование, словом, всякие досадные случаи. В итоге было две команды: сначала одна удаляет симлинки, а вторая создает их заново.&lt;/p&gt;

&lt;p&gt;Оказалось, что &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lndir&lt;/code&gt; делает именно то, что я искал. Они принимает две папки и строит дерево симлинков из первой во вторую. При этом учитывает случаи, что я перечислил, например если симлинк уже есть. Благодаря этому дерево можно обновлять итеративно.&lt;/p&gt;

&lt;p&gt;Пример: в каталоге &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/work/System/Dotfiles&lt;/code&gt; хранятся оригинальные файлы Emacs, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ssh&lt;/code&gt; и прочие. Следующая команда make расставит симлинки в домашнюю папку:&lt;/p&gt;

&lt;div class=&quot;language-make highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /Users/ivan
&lt;span class=&quot;nv&quot;&gt;PWD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;create-symlinks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	lndir &lt;span class=&quot;nv&quot;&gt;${PWD}&lt;/span&gt;/Dotfiles &lt;span class=&quot;nv&quot;&gt;${HOME}&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;600 &lt;span class=&quot;nv&quot;&gt;${HOME}&lt;/span&gt;/.ssh/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Для файлов ssh необходимо выставить права 600, иначе утилита ругается.&lt;/p&gt;

&lt;p&gt;Синхронизация происходит обычным способом через git. Как только вы поменяли один из файлов, делаете коммит и пуш. На другой машине пулл и &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make create-symlinks&lt;/code&gt;, и все подхватывается. Репозиторий, понятно, должен быть приватным.&lt;/p&gt;

&lt;p&gt;По умолчанию &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lndir&lt;/code&gt; нет в поставке Линукса и Мака. Ставится из привычных &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt; и &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/lndir/</link>
        <guid isPermaLink="true">https://grishaev.me/lndir/</guid>
        
        <category>lndir</category>
        
        <category>programming</category>
        
        <category>symlink</category>
        
        <category>make</category>
        
        
      </item>
    
      <item>
        <title>Интерфейс Гитхаба</title>
        <description>&lt;p&gt;У меня бомбит от интерфейса Гитхаба. Он работает по странному принципу: показывает то, что не нужно и не показывает то, что нужно.&lt;/p&gt;

&lt;p&gt;Когда я открываю pull request, то хочу увидеть изменения в файлах. Поскольку я обычный программист, не гений и без заскоков, полагаю, это желание подходит большинству. Почти всегда, когда мне кидают PR, я знаю заранее, с какой задачей он связан, и сразу смотрю файлы. Только в редких случаях мне нужно прочесть описание.&lt;/p&gt;

&lt;p&gt;В интерфейсе PR файлы задвинуты на последнюю вкладку “Files changes”, и я не верю, что этому есть разумная причина. Файлы это суть PR, с какой стати задвигать их в конец? Это же самое нужное! Изменения должны быть сразу под описанием, чтобы не кликать, а просто смотать экран.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/github-ui/1.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Есть ли на этой вкладке хоть грамм полезной информации? Если да, чем он важнее 18 измененных файлов?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Далее эти дурацкие табы. Проблема в том, что на вкладках располагаются не только данные, но и кнопки. Например, закрыть PR можно только со вкладки “Conversation”. А поставить аппрув только со вкладки “Files”. В итоге постоянно кликаешь на первый и последний табы.&lt;/p&gt;

&lt;p&gt;Первый и последний, Карл! Уже это говорит, что как минимум они должны быть рядом, если не объединены в один.&lt;/p&gt;

&lt;p&gt;По этой причине я пользуюсь трюком: когда кидаю ссылку на PR, добавляю к концу &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/files&lt;/code&gt;, то есть не &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;...project/pull/3&lt;/code&gt;, а &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;...project/pull/3/files&lt;/code&gt;. При таком раскладе у человека сразу откроются файлы, и не придется переключать табы. Мелочь, а приятно, особенно если собеседник понимает этикет и отвечает тем же.&lt;/p&gt;

&lt;p&gt;Судите сами: вот мне пришел PR с комментарием. Рассмотрим действия, которые я должен выполнить для мерджа:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;открыть ссылку на PR;&lt;/li&gt;
  &lt;li&gt;перейти на files, чтобы бегло посмотреть, что внутри;&lt;/li&gt;
  &lt;li&gt;если все хорошо, вернуться на вкладку conversation;&lt;/li&gt;
  &lt;li&gt;нажать merge;&lt;/li&gt;
  &lt;li&gt;нажать delete branch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;По мне все можно уместить на одной странице и работать без кликов.&lt;/p&gt;

&lt;p&gt;Из-за особенностей интерфейса кнопка “delete branch” находится выше “merge”, то есть сначала нажимаешь ту кнопку, что ниже, а потом выше. Это ни в какие ворота: экран мотают сверху вниз, и чем ниже кнопка, тем она важнее.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/github-ui/5.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В целом интерфейс Гитхаба шумный и грязный. На закладке “Conversation” схематично указаны коммиты, хотя есть отдельная вкладка “Commits”. Зачем размазывать их по двум вкладкам? Все, что касается коммитов, должно быть в “Commits”.&lt;/p&gt;

&lt;p&gt;Даже если у PR нет описания, будет пустой комментарий вида:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;igrishaev commented 20 minutes ago
No description provided
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Спрашивается, что именно commented? Зачем писать о том, чего нет?&lt;/p&gt;

&lt;p&gt;Особую грусть вызывает мобильное приложение Гитхаба. Почему-то оно не может нормально показать код: кнопка “Browse code” вечно болтается внизу. Что мешает сделать ее первой? В этом плане Гитхаб напоминает современный Дропбокс: приложение плохо показывает то, с чем работает.&lt;/p&gt;

&lt;p&gt;Однажды я хотел закрыть PR со спамом, но не нашел кнопку “Close pull request”. Возможно, она была под выпадашкой или вроде того, но увы, я пас.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/github-ui/4.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Слева: где посмотреть код? Справа: как закрыть PR?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Мне кажется, интерфейс Гитхаба разжирел, и пора устроить ему чистку. Он достиг стадии “впихнуть невпихуемое”, как это бывает с продуктами, которые часто выкатывают фичи. Интерфейс должен щадить пользователя: не вываливать на голову все подряд в надежде, что кому-то пригодится. Интерфейс — это оборона пользователя от того ада, что творится на серверах. Давайте помнить об этом, хоть я и не верю, что дизайнеры Гитхаба меня услышат.&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Oct 2022 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/github-ui/</link>
        <guid isPermaLink="true">https://grishaev.me/github-ui/</guid>
        
        <category>github</category>
        
        <category>ui</category>
        
        
      </item>
    
      <item>
        <title>Деджаваскриптизиция (4)</title>
        <description>&lt;p&gt;Пора заканчивать эпопею про избавление от Js. Чтобы не утомлять, расскажу о последнем штрихе — как внедрил капчу для комментариев.&lt;/p&gt;

&lt;p&gt;Как только я убрал Disqus, полезли спамные комментарии. Каждый день приходят два-три предложения купить виагру, надувную лодку или просто левые ссылки. Поскольку каждый комментарий открывает PR в репозиторий, все остается в истории Гитхаба. Посмотреть на это добро &lt;a href=&quot;https://github.com/igrishaev/blog/pulls?q=is%3Apr+is%3Aclosed&quot;&gt;можно по ссылке&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Разгребать подобные комментарии нет желания, поэтому должна быть минимальная защита от спама. С условием — без Js. Надумал такую схему:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;капча генерируется на этапе сборки блога. На выходе получается HTML-форма с полем captcha и значением 2 × 5.&lt;/li&gt;
  &lt;li&gt;В форму добавляется поле для решения.&lt;/li&gt;
  &lt;li&gt;Сервер парсит капчу, решает и сверяет с ответом. Если что-то не так, заворачивает комментарий.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Как ни странно, даже на таком примитиве боты отваливаются. Разве что с оговоркой: когда был оператор +, боты решали капчу. Как только заменил на &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;×&lt;/code&gt; (знак умножения в юникоде), стала тишь да благодать. Надеюсь, читатель не забыл таблицу умножения! Тестируя форму, сам подвис с примером &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8 × 9&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Техническая сторона: вот построить капчу в шаблоне:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
{% assign val1 = '1 2 3 4 5 6 7 8 9' | split: ' ' | sample %}
{% assign val2 = '1 2 3 4 5 6 7 8 9' | split: ' ' | sample %}
{% assign op   = '&amp;amp;#215;'            | split: ' ' | sample %}
{% assign captcha = val1 | append: &quot; &quot; | append: op | append: &quot; &quot; | append: val2 %}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Замечу, что при каждой сборке блога значения будут разные.&lt;/p&gt;

&lt;p&gt;Скрытое поле в форме:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;captcha&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ captcha }}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Виджет для ввода решения:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;block&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;comment-form-label&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;small&amp;gt;&lt;/span&gt;{{ captcha }} = &lt;span class=&quot;nt&quot;&gt;&amp;lt;/small&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;comment-form-solution&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;solution&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Наконец, серверный код проверки капчи:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;е&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validate-captcha&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;captcha&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when-let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val1-raw&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op-raw&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val2-raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;re-find&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;^(-?\d+) (.+?) (-?\d+)$&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;captcha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Integer/parseInt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val1-raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

          &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Integer/parseInt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val2-raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

          &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op-raw&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;#43;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;×&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;#215;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
           &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;str/trim&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Грубо, неуклюже, но работает.&lt;/p&gt;

&lt;p&gt;На этом я закончу тему с избавлением от Js. На мой взгляд, цели достигнуты, жить с новыми комментариями можно. Это был интересный опыт, в будущем пригодится.&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/de-js-4/</link>
        <guid isPermaLink="true">https://grishaev.me/de-js-4/</guid>
        
        <category>programming</category>
        
        <category>javascript</category>
        
        <category>blog</category>
        
        <category>disqus</category>
        
        <category>comments</category>
        
        
      </item>
    
      <item>
        <title>Деджаваскриптизиция (3)</title>
        <description>&lt;p&gt;Сбылась мечта идиота: теперь на сайте работают комментарии без строчки кода на Джаваскрипте. Смотайте экран вниз, там форма. Требуется только имя и тело комментария. Ввели, отправили, и через некоторое время он появится в блоге.&lt;/p&gt;

&lt;p&gt;Форма:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/de-js3/1.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Экран возврата:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/de-js3/2.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;А что, мне нравится.&lt;/p&gt;

&lt;p&gt;Расскажу, как это работает. &lt;a href=&quot;/de-js-2/&quot;&gt;В прошлый раз&lt;/a&gt; я перенес комментарии Disqus в репозиторий. Каждый комментарий — это файл формата YAML + markdown. В числе прочего он хранит ссылку на пост. Когда я собираю блог, в подвал каждой заметки подставляются ее комментарии.&lt;/p&gt;

&lt;p&gt;Для приема комментариев я следую тому же принципу: чтобы они появились на сайте, нужно создать файл в репозитории. Теоретически любой может оформить pull request, но это сложно. Должен быть сервис, который преобразует ввод пользователя в pull request для блога. Этот сервис я написал и назвал &lt;a href=&quot;https://github.com/igrishaev/blog-backend&quot;&gt;blog-backend&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Сервис напоминает веб-приложение: оно принимает HTTP-запрос с формой. После прелюдии с валидацией перехожу к главному: интеграции с Гитхабом. Это оказалось не так-то просто. У Гитхаба уже &lt;a href=&quot;https://docs.github.com/en/rest&quot;&gt;три рестовых API&lt;/a&gt;, но ни одно не покрывает все возможности. Кроме REST есть &lt;a href=&quot;https://docs.github.com/en/graphql&quot;&gt;убер-апишка на GraphQL&lt;/a&gt; — она-то мне и нужна.&lt;/p&gt;

&lt;p&gt;Интеграция с GraphQL была нелегкой: это самобытный язык и вещь в себе. Если бы в текущем проекте не было GraphQL, я бы полез на стенку. Во-вторых, сложность процесса: чтобы сделать PR силами API, нужно четыре вызова:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;получить метаданные репозитория, в том числе последний коммит;&lt;/li&gt;
  &lt;li&gt;создать ветку от этого коммита;&lt;/li&gt;
  &lt;li&gt;сделать коммит в новую ветку;&lt;/li&gt;
  &lt;li&gt;сделать PR.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Как по мне, апишка не консистентна: где-то на репозиторий ссылаешься по имени, а где-то по машинному ID, который приходит из метаданных. То же самое с ветками: где-то имя, где-то айдишник. Ответы GraphQL развесистые, с глубокой вложенностью. Например, последний коммит ветки погружен на пять уровней:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(-&amp;gt; resp-get-repo :data :repository :ref :target :oid)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;С такой апишкой невозможно программировать без образца данных.&lt;/p&gt;

&lt;p&gt;Когда подружился с Гитхабом, настала проблема хостинга: где и как размещать логику. Мне понравился опыт с облаком Яндекса, и я продолжил эксперименты. Сервис написан на Кложе, скомпилирован Граалем в бинарь и хостится в &lt;a href=&quot;https://cloud.yandex.ru/docs/functions/concepts/&quot;&gt;Яндекс.Функции&lt;/a&gt; — аналоге AWS Lambda.&lt;/p&gt;

&lt;p&gt;В свою очередь, Яндекс.Функция — это облачный сервис, где размещают какой-то код и дергают его по запросу. Отличие от обычного хостинга в том, что у лямбды нет состояния: она запускается на короткое время и умирает. В зависимости от окружения лямбда может умереть не сразу, и если ее дернуть повторно, сработает уже запущенный экземпляр. На базе этого делают “прогрев” лямбд, у которых окружение стартует медленно, например Java. В моем случае граальный бинарник быстрый как не весть что, прогрева ему не надо.&lt;/p&gt;

&lt;p&gt;Лямбду можно вызывать разными способами, в том числе HTTP-запросом. У каждой лямбды свой урл, который может быть приватным и публичным. Его можно указать в разных сервисах, что отлично подходит для ботов.&lt;/p&gt;

&lt;p&gt;По сравнению с VM-хостингом у лямбды следующие плюсы:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;не нужна виртуальная машина и ее настройка;&lt;/li&gt;
  &lt;li&gt;не нужен домен;&lt;/li&gt;
  &lt;li&gt;лямбды экстремально дешевы, потому оплачивается только время работы с округлением до 0.1 секунды;&lt;/li&gt;
  &lt;li&gt;лямбды поощряют писать код без компонентов и состояния, что как бальзам на душу после проектов по работе.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Поначалу я был крайне скептичен к лямбдам, но теперь вижу в них особую прелесть. Единственный момент — пришлось написать код, чтобы подружить Кложу и Ring с окружением лямбды. Также поправил компиляцию Граалем, чтобы в бинарнике была верная кодировка. В будущем я планирую вынести код Яндекс.Облака в отдельную библиотеку, чтобы избавиться от копипасты.&lt;/p&gt;

&lt;p&gt;Форма поддерживает синтаксис Markdown. Пока что нет кнопок выделения текста болдом и италиком, сделаю потом. Форма отправляется чистым POST, никаких аяксов, хотя первую версию я сделал на fetch, JSON и CORS. Про CORS я все забыл, и пришлось читать &lt;a href=&quot;/cors/&quot;&gt;свою же статью&lt;/a&gt; о том, как все настроить.&lt;/p&gt;

&lt;p&gt;Новые комментарии совмещают модерацию. После отправки создается PR в блог, мне приходит письмо, а пользователь переходит на прошлую страницу. Если все в порядке, я мерджу ветку и заливаю свежий билд блога. Таким образом, с момента публикации комментария может пройти от пяти минут до нескольких дней, но это ничего.&lt;/p&gt;

&lt;p&gt;Первые комментарии я получил от кого? Правильно, от спамеров. Этим утром предложили виагру, казино и просто левые ссылки. Вот ссылка &lt;a href=&quot;https://github.com/igrishaev/blog/pull/120/files&quot;&gt;на уже закрытый RP&lt;/a&gt; и его содержимое:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
id: 1663659055173
is_spam: false
is_deleted: false
post: /bookshelf/
date: 2022-09-20 07:30:55 +0000
author_fullname: 'epiehuliqukib'
---

http://slkjfdf.net/ - Tatacatay &amp;lt;a href=&quot;http://slkjfdf.net/&quot;&amp;gt;Aebaluk&amp;lt;/a&amp;gt;
lwk.wlgg.grishaev.me.mrq.mn http://slkjfdf.net/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Очевидно, нужно вводить капчу для защиты от ботов. Я рассматриваю это как новый вызов: как сделать капчу без Javascript в статичном блоге? Уже есть мыслишки, расскажу в четвертой части эпопеи.&lt;/p&gt;

&lt;p&gt;Наконец, последний тезис — зачем вы это делаете, мистер Андерсон? Зачем эти отказы, костыли, превозможения? Ответ — потому что могу. Просто хочется экспериментов. Надоели тормозные сайты с JS, хочу маленький оазис в своем огороде.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/de-js-3/</link>
        <guid isPermaLink="true">https://grishaev.me/de-js-3/</guid>
        
        <category>programming</category>
        
        <category>javascript</category>
        
        <category>blog</category>
        
        <category>disqus</category>
        
        <category>comments</category>
        
        
      </item>
    
  </channel>
</rss>
