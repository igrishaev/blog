<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ivan Grishaev's blog</title>
    <description>Writing on programming, education, books and negotiations.
</description>
    <link>https://grishaev.me/</link>
    <atom:link href="https://grishaev.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 03 Aug 2024 05:40:06 +0000</pubDate>
    <lastBuildDate>Sat, 03 Aug 2024 05:40:06 +0000</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>Таб About</title>
        <description>&lt;p&gt;У всех медиа-платформ один и тот же косяк.&lt;/p&gt;

&lt;p&gt;Предположим, я кликаю на ссылку исполнителя, и открывается страница с
табами. При этом нулевым, главным табом является “About” или “Info” — общая
информация об исполнителе. Так вот — этот таб не нужен. В нем нет ничего
полезного, и он целиком дублирует контент из других табов, например “Видео” или
“Треки”.&lt;/p&gt;

&lt;p&gt;Пример — Яндекс.Музыка. На странице “Главное” — популярные треки. На странице
“Треки” — те же самые треки в той же последовательности, отличается только
рендер. На “Главной” перед треками иконки альбома, в “Треках” иконок уже нет.&lt;/p&gt;

&lt;p&gt;Главная:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/tab-about/1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Треки:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/tab-about/2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В чем разница?&lt;/p&gt;

&lt;p&gt;То же самое в Ютубе или, прости господи, Порнохабе. На главном табе какой-то
хлам, который никому не нужен. Никто не читает графоманию автора о себе и своем
канале. От промо-ролика на главной уже тошнит. Каждый зритель хочет контент — то
есть таб “Видео”. Получается два клика вместо одного: сперва на ссылку
исполнителя, а потом /video.&lt;/p&gt;

&lt;p&gt;Именно таб с контентом должен быть главным, а “About” или “Info” нужно задвинуть
в конец. Это как если бы главной страницей сайта была “О компании”. Глупо? Так
почему же везде копируют этот паттерн?&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Aug 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/tab-about/</link>
        <guid isPermaLink="true">https://grishaev.me/tab-about/</guid>
        
        <category>ui</category>
        
        <category>tab</category>
        
        <category>about</category>
        
        <category>youtube</category>
        
        
      </item>
    
      <item>
        <title>Джек Торранс</title>
        <description>&lt;p&gt;Отпуск, перечитываю “Сияние” Стивена Кинга. Та самая книга из детства:
суперобложки давно нет, зеленая корка без каких-либо надписей. Перевод местами
странный, на каждой третьей странице — опечатка или путаница имен. Но это та
самая книга, которую я читал двадцать пять лет назад, поэтому можно закрыть
глаза.&lt;/p&gt;

&lt;p&gt;Удивительно, как меняется восприятие книги с возрастом. В детстве я обращал
внимание в основном на крипоту, а теперь — на проработку персонажей. На мой
взгляд, “Сияние” особенно сильно с этой стороны. Центральные персонажи — Джек,
Венди и Денни — переданы столь качественно, что лучше и нельзя. Читая роман,
буквально погружаешься в персонажей, в их тесный семейный мир.&lt;/p&gt;

&lt;p&gt;На фоне жены и сына лучше всего, на мой, взгляд, проработан Джек. Действие
отталкивается от него, и мы узнаем все больше деталей из его прошлого. Джек —
крайне сложный, противоречивый персонаж. Его амбиции стать писателем подкошены
алкоголизмом. Роль главы семьи тоже под вопросом — пьяный Джек сломал сыну руку.
И хотя проблемы от алкоголя в прошлом, каждый поступок рождает флешбек, когда
Джек пил.&lt;/p&gt;

&lt;p&gt;Мне не доводилось читать книги, в которой более точно описано состояние человека
после алкоголизма. Я имею в виду не краткосрочные последствия вроде
протрезвления или развода. Я говорю о более длинном куске жизни — три, пять и
более лет. Алкоголизм, даже когда отступил, продолжает давить на
человека. Далеко не каждый думает об этом периоде, когда проблема, казалось бы,
позади, но на самом деле впереди долгий путь адаптации. Это то, что в
драматургии называется “ложный конец”.&lt;/p&gt;

&lt;p&gt;Я, хоть и не страдал алкоголизмом (вообще не люблю алкоголь), могу рассказать
свою историю. Лет двадцать назад я был знаком с человеком, бывшим в юности
алкоголиком. Мы вместе работали и даже пытались делать бизнес.&lt;/p&gt;

&lt;p&gt;У человека был сложный характер: это был ходячий комок комплексов, переживаний,
подозрений, ревности и много чего еще. Он находил интриги там, где все было
чисто. Своим поведением он привлекал женщин, заводил бесконечные романы, которые
кончались разрывом в слезах. Многое можно было списать на характер, но на мой
взгляд, алкоголизм выступил тем катализатором, который многократно обострил его
неприятные черты.&lt;/p&gt;

&lt;p&gt;Ключевой особенностью этого человека можно назвать обиду. Он жил обидой на то,
что пока он пил, кто-то учился и шел на повышение. Он был обижен на жизнь, в
которой он потерял самые важные годы. В таком мире все были виноваты: коллеги,
начальники, друзья, женщины.&lt;/p&gt;

&lt;p&gt;Насколько я знаю, сейчас у него все хорошо — есть семья и дети, он профессионал
в своем деле. Мы были знакомы пять лет или около того, и по моим оценкам,
восстановление от алкоголя занимает около десяти лет. Сколько раз я слышал от
него про желание напиться; различные уловки, чтобы избежать этого; россказни про
собрания анонимных алкоголиков и все остальное. Этот груз давит, его вечно
носишь с собой, как Джек Торранс носил свой набор досадных воспоминаний.&lt;/p&gt;

&lt;p&gt;Рассказы этого человека дословно повторяют жизнь Джека Торранса. Чувство обиды
постоянно угнетало его. Оно чередуется с обидой внутренней — на себя — с обидой
внешней на семью и коллег. Почти каждый шаг Джека — это реакция на очередной
флешбек, попытка отыграть то, что не удалось тогда, и вот теперь-то выйдет как
надо. Но даже когда дела идут, Джек, движимый обидой, звонит Уллману и
раскрывает планы на книгу про отель. Этот звонок обходится ему дорого: именно с
ответного звонка Эла Шокли психика Джека начинает расшатываться. Подобно Джеку,
мой знакомый ссорился с людьми на ровном месте, воскрешая из памяти забытые
эпизоды, обильно удобряя их обидой.&lt;/p&gt;

&lt;p&gt;Ключевая причина того, что бывший алкоголик ведет себя странно — обида. А мир, в
котором все наполнено обидой, неблагополучен для жизни.&lt;/p&gt;

&lt;p&gt;Удивляться тому, как точно автор передал Джека Торранса, не приходится. Джек —
это сам Кинг, который в ту пору восстанавливался от алкоголя. Он был в точности
на там же отрезке пути, когда приемы спиртного уже в прошлом, но человек может в
любую минуту сорваться. Вот откуда эта точность, эта интимность всех помыслов
Джека и его флешбеков. Вот почему, читая главы “Сияния”, особенно связанные с
Джеком, отключаешься от внешнего мира — настолько сильно погружение.&lt;/p&gt;

&lt;p&gt;Завершая, скажу, что все сказанное выше относится к книге. Фильм Кубрика я
считаю парадоксом: с одной стороны, великолепно подобранные актеры: на месте тех
Джека, Венди и Денни я физически не могу представить кого-либо другого. Сам
фильм — некая фантасмагория, в которой от замысла Кинга не осталось
ничего. Будет время — горячо советую прочитать книжку.&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Aug 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/jack-torrance/</link>
        <guid isPermaLink="true">https://grishaev.me/jack-torrance/</guid>
        
        <category>literature</category>
        
        <category>shining</category>
        
        <category>king</category>
        
        
      </item>
    
      <item>
        <title>Zen of Python</title>
        <description>&lt;p&gt;Если вы имеете отношение к Питону, то вот небольшой совет. Никогда не упоминайте
знаменитый Zen of Python: ни в шутку, ни всерьез. Если упоминает кто-то другой,
пропускайте мимо ушей, не важно насколько он именит.&lt;/p&gt;

&lt;p&gt;Объяснение этому следующее. Современный Питон бесконечно далек от тезисов Zen of
Python. Я заметил это пятнадцать лет назад, когда писал на Python 2.5. Тогда я
не мог высказаться, но время пришло.&lt;/p&gt;

&lt;p&gt;Я не говорю, что это плохо. Наоборот, Питон — одна из лучших вещей в айти
(иногда мне кажется, что слишком хорошая). Питон — первый язык, ориентированный
на пользователя. Отсюда такая любовь и популярность.&lt;/p&gt;

&lt;p&gt;Расхождение с Zen of Python было неминуемым, потому что язык
развивался. Полагаю, Zen of Python был актуален несколько первых версий, а потом
устарел — не быть же языку заложником старых догм. Это совершенно нормально.&lt;/p&gt;

&lt;p&gt;Поэтому я рассматриваю Zen of Python как исторический документ. Подкреплять им
свои доводы в спорах несерьезно. С таким же успехом можно ссылаться на скрижали
Майя или гороскоп.&lt;/p&gt;

&lt;p&gt;Половина доводов в Zen of Python не имеет смысла, а вторая потеряла
актуальность. Я не буду дотошно перечислять каждый пункт: повторюсь, половина из
них бессмысленна. Я не знаю, как комментировать “красивое лучше, чем уродливое”
— с таким же успехом можно сказать, что котики лучше пьяной драки. Зато знаю,
какие пункты прямо нарушают то, что в Питоне, и сейчас вам о них расскажу.&lt;/p&gt;

&lt;p&gt;Один из тезисов звучит примерно как “должен быть один способ сделать что-то”:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There should be one– and preferably only one –obvious way to do it&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Когда я слышу это утверждение, то могу только фыркнуть. В Питоне бесконечное
число способов что-то сделать. Из-за своей гибкости и многолетнего контриба одну
и ту же задачу можно выполнить разными способами. При этом число способов со
временем только множится.&lt;/p&gt;

&lt;p&gt;Простой пример — в Питоне три способа форматирования строк: старый сишный с
процентом, джавный &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string.format()&lt;/code&gt; и f-строки, которые по сути eval. Я обожаю
троллить питонистов форматированием с процентом. Если вы возьмете меня в проект
на Питоне, я обязательно напишу так:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;%s %s&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Не потому что я упорот, а чтобы проверить вашу реакцию. Происходит следующее:
коллега читает код и подвисает на этой строчке. Его уже не волнует бизнес-логика
и покрытие тестов. В нем зреет тревога: всем известно, что нужно пользоваться
f-строками, а тут какой-то синтаксис времен Unix… Подключается второй
питонист, слово за слово, и начинается срач — как правильно форматировать
строки. Плывут экраны комментариев, я сижу и улыбаюсь.&lt;/p&gt;

&lt;p&gt;Библиотеки с говорящими именами &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;httplib&lt;/code&gt; и &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;httplib2&lt;/code&gt;, а также &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urllib&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urllib2&lt;/code&gt; и &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urllib3&lt;/code&gt; (последняя — сторонняя). Все они страшные, и нормальную
открывашку урлов сделали только в &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requests&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;У словаря есть метод &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt;. Добавили оператор &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|=&lt;/code&gt; (палка-равно), который
делает то же самое. Господи, зачем? Может, добавите еще &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&amp;gt;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|~&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|-&lt;/code&gt; и
другие? Удобней и короче, чем &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.update&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.intersect&lt;/code&gt; и прочие английские слова.&lt;/p&gt;

&lt;p&gt;С каждый релизом в Питоне все больше трюков, библиотек и операторов. Забавно,
когда одна строчка from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__future__ import foo&lt;/code&gt; расширяет синтаксис или даже
интерпретатор.&lt;/p&gt;

&lt;p&gt;Словом, тезис о том, что должен быть один способ что-то сделать, совершенно
неактуален.&lt;/p&gt;

&lt;p&gt;Другие тезисы Zen of Python вроде как поощряют простые решения:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Explicit is better than implicit.
Simple is better than complex.
Flat is better than nested.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Давайте откроем &lt;a href=&quot;https://github.com/django/django/blob/main/django/db/models/base.py#L92&quot;&gt;исходники Django Framework&lt;/a&gt;, а именно его сердце —
модели. Потому что в Django все вращается вокруг моделей — пользователи, данные,
админка — и без моделей он никому не нужен.&lt;/p&gt;

&lt;p&gt;Смотрим класс &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ModelBase&lt;/code&gt;, метод &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__new__()&lt;/code&gt;: семь экранов магии. Здесь и
махинации с атрибутами, и прокси-классами, и наследование, и то, и се вперемешку
с многими if-else. Найдется ли питонист, который внятно объяснит, что там
происходит?&lt;/p&gt;

&lt;p&gt;Но &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ModelBase&lt;/code&gt; — это всего лишь метакласс класса &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Model&lt;/code&gt;, в котором похожая
петрушка. В методе &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__&lt;/code&gt; четыре экрана кода с разными манипуляциями с
аргументами. И этот код со всей своей магией постоянно крутится у тех, кто ведет
проекты на Django.&lt;/p&gt;

&lt;p&gt;Ничуть не лучше ситуация с формами и виджетами. Там тоже метаклассы с
махинациями, которые простым смертным не понять.&lt;/p&gt;

&lt;p&gt;Я веду к следующему: чтобы сделать удобно потребителю, код может быть чудовищно
сложным. Но потребитель об этом не знает: он вызывает методы и рассказывает
догмы из Zen of Python, что simple is better than complex. То, что внутри экраны
магии с метаклассами, его не интересует.&lt;/p&gt;

&lt;p&gt;Другой довод в пользу того, что в Питоне не приживаются простые решения,
следующей. Если бы это было так, то проекты на Питоне строили бы на списках,
словарях и функциях. А на практике любой проект на Питоне — как Джава: классы,
классы, классы. Гигантский граф изменяемых объектов.&lt;/p&gt;

&lt;p&gt;Еще один пункт из Zen of Python говорит про неймспейсы:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Namespaces are one honking great idea – let’s do more of those!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Если кто-то знает о пространствах имен в Питоне, пожалуйста, сообщите мне,
потому что за 10 лет я о них ничего не узнал. В Питоне обычная система модулей,
которые импортируются друг в друга. Никаких особых свойств у модулей нет.&lt;/p&gt;

&lt;p&gt;Для сравнения: в известном скобочном языке символы и кейворды могут быть
привязаны неймспейсу. Символ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt; из неймспейса &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.test&lt;/code&gt; не равен символу
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt; из &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar.test&lt;/code&gt;. Такая связь пространства имен и символов/кейвордов
открывает полезные техники, о которых я не буду сейчас, потому что это другой
язык. В Питоне ничего подобного нет, и к чему тезис о неймспейсах, непонятно.&lt;/p&gt;

&lt;p&gt;Повторюсь, бессмысленность Zen of Python не имеет отношения к языку. Можно
писать на нем отличный код, даже не зная о Дзене. Но доказывать точку зрения,
опираясь на тезисы Zen of Python — вот образец бессмысленности.&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Jul 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/zen-of-python/</link>
        <guid isPermaLink="true">https://grishaev.me/zen-of-python/</guid>
        
        <category>programming</category>
        
        <category>python</category>
        
        <category>zen</category>
        
        
      </item>
    
      <item>
        <title>Винда и Скайнет</title>
        <description>&lt;p&gt;То, что произошло недавно с виндой, напоминает Скайнет из франшизы про
Терминатора. Напомню, по сюжету все компьютеры захватил вирус. Далее он построил
роботов, которые пошли убивать людей. На тот момент это было слишком
фантастично, потому что единовременно обрушить все компьютеры в те дни было
невозможно. Не было такой связанности и централизованности. Не было такого, что
каждый утюг качает обновления по три раза в день и ставит автоматом.&lt;/p&gt;

&lt;p&gt;А сегодня — пожалуйста! Какие-то бедолаги налажали с указателями, и легла сотая
часть компов на виндузе. Если вам кажется, то это мало, то вы не правы. В одном
только здании может быть нескольких сотен устройств на винде. Тем сотым компом,
что лег из-за обновления, может быть кассовый сервер в Пятерочке, банкомат,
шлагбаум на вокзале, дашборд службы спасения.&lt;/p&gt;

&lt;p&gt;Это наводит на рассуждения. Были же истории с пилотами, которые нарочно гробили
себя и сотни пассажиров. Порой я думаю: вдруг найдется такой же маньяк, только в
цифровой сфере? Кто-то, кто устроит цифровой Judgement Day. Он выпустит
обновление, которое разойдется по всем виндовым компам, подождет годик-другой и
потом вжух — затрет файлы нулями, подаст напряжение на USB-порты, разгонит
видеокарты, словом — сделает максимум деструктива.&lt;/p&gt;

&lt;p&gt;Все это фантазии, но проблема в том, что они уже не так фантастичны, как в
терминаторе. Теоретически они стали возможны, и Микрософт сотоварищи это
доказали.&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Jul 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/win-skynet/</link>
        <guid isPermaLink="true">https://grishaev.me/win-skynet/</guid>
        
        <category>windows</category>
        
        <category>skynet</category>
        
        
      </item>
    
      <item>
        <title>Как наполнить базу сгенерированными джейсонами</title>
        <description>&lt;p&gt;Предположим, у вас Postgres с миллионами JSONb-документов. Вы хотите проверить
нагрузку на стейджинге, но данные с прода брать нельзя – их нужно сгенерить. Тут
начинаются проблемы.&lt;/p&gt;

&lt;p&gt;Размножить один и тот же джейсон будет неправильным, потому что все они дадут
одинаковое значение индекса. В итоге индекс будет “перекошен”: миллион записей
попадут в один блок, а остальные сто тысяч будут равномерны. В реальности так не
бывает.&lt;/p&gt;

&lt;p&gt;Второй вопрос – как генерить. Можно взять язык, на котором вы пишете, и
наколбасить случайные словари в CSV. Потом сжать в gzip, перетащить на сервер с
базой, распаковать и вставить через COPY IN. Но придется писать код и воевать с
передачей файлов по SCP/SSH.&lt;/p&gt;

&lt;p&gt;Я склоняюсь к вот такому костылику.&lt;/p&gt;

&lt;p&gt;Берем с прода любой JSON, записываем в локальный файл с красивым
форматированием. Например:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;meta&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;eyes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;brown&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;attrs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;petr@test.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Petr Ivanov&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;roles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Здесь он маленький для экономии места, а на проде может быть пять экранов. После
этого пропускам файл через серию регулярок:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;sample.json | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/'/g&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/: /, /g'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/{/jsonb_build_object(/g'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/}/\)/g'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/\[/jsonb_build_array(/g'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/\]/)/g'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Получается SQL-код, который строит тот же самый JSON:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;jsonb_build_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'meta'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonb_build_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'eyes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'brown'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'attrs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonb_build_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'petr@test.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Petr Ivanov'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'roles'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonb_build_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'admin'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Наберите в консоли &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; и вставьте эту колбасу. База выплюнет в точности тот
JSON, который был в файле.&lt;/p&gt;

&lt;p&gt;Если форматировать JSON лень, добавьте в пайп утилиту &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt; — по умолчанию она
просто форматирует документ.&lt;/p&gt;

&lt;p&gt;Это был только один джейсон. Теперь размножим его с помощью &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select ... from
generate_series...&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonb_build_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'meta'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonb_build_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'eyes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'brown'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'attrs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonb_build_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'petr@test.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Petr Ivanov'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'roles'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonb_build_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'admin'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;generate_series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Выборка вернет столько документов, сколько чисел в диапазоне
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generate_series&lt;/code&gt;. Но это один и тот же документ, что не подходит. Пройдитесь по
значимым полям документа и замените статичные строки на форматирование, например
так (переменная &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; ссылается на текущее значение &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generate_series&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonb_build_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'meta'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonb_build_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'eyes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'color-%s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'attrs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonb_build_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'user-%s@test.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Test Name %s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'roles'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonb_build_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'admin'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;generate_series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Новая выборка станет такой:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                                                     document
-------------------------------------------------------------------------------------------------------------------------
 {&quot;meta&quot;: {&quot;eyes&quot;: &quot;color-1&quot;}, &quot;attrs&quot;: {&quot;name&quot;: &quot;Test Name 1&quot;, &quot;email&quot;: &quot;user-1@test.com&quot;}, &quot;roles&quot;: [&quot;user&quot;, &quot;admin&quot;]}
 {&quot;meta&quot;: {&quot;eyes&quot;: &quot;color-2&quot;}, &quot;attrs&quot;: {&quot;name&quot;: &quot;Test Name 2&quot;, &quot;email&quot;: &quot;user-2@test.com&quot;}, &quot;roles&quot;: [&quot;user&quot;, &quot;admin&quot;]}
 {&quot;meta&quot;: {&quot;eyes&quot;: &quot;color-3&quot;}, &quot;attrs&quot;: {&quot;name&quot;: &quot;Test Name 3&quot;, &quot;email&quot;: &quot;user-3@test.com&quot;}, &quot;roles&quot;: [&quot;user&quot;, &quot;admin&quot;]}
 {&quot;meta&quot;: {&quot;eyes&quot;: &quot;color-4&quot;}, &quot;attrs&quot;: {&quot;name&quot;: &quot;Test Name 4&quot;, &quot;email&quot;: &quot;user-4@test.com&quot;}, &quot;roles&quot;: [&quot;user&quot;, &quot;admin&quot;]}
 {&quot;meta&quot;: {&quot;eyes&quot;: &quot;color-5&quot;}, &quot;attrs&quot;: {&quot;name&quot;: &quot;Test Name 5&quot;, &quot;email&quot;: &quot;user-5@test.com&quot;}, &quot;roles&quot;: [&quot;user&quot;, &quot;admin&quot;]}
(5 rows)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Вставим выборку в таблицу документов:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;documents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Для этого допишем в запрос шапку &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSERT&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;documents&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gen_random_uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jsonb_build_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'__generated__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'meta'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonb_build_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'eyes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'color-%s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'attrs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonb_build_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'user-%s@test.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Test Name %s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'roles'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonb_build_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'admin'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;generate_series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;returning&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Обратите внимание на поле &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__generated__&lt;/code&gt;: я добавил его, чтобы отличить обычный
документ от сгенерированного.&lt;/p&gt;

&lt;p&gt;Запустите запрос, и в таблице окажется миллион случайных документов. Вставка
может занять до пары минут, потому что JSONb — дорогое удовольствие.&lt;/p&gt;

&lt;p&gt;Если что-то пошло не так, удалите сгенерированные документы запросом:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;documents&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__generated__'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Удобство в том, что не нужны питоны-джавы, все делается силами SQL. Не придется
генерировать CSV и перетаскивать на сервер. Просто выполнили запрос — и пошли
дальше.&lt;/p&gt;

&lt;p&gt;Обязательно сохраните скрипт в недрах проекта. Он понадобится если не завтра, то
через месяц, а если не вам, то коллеге. И вы такой раз — как Джонни Старк на
картинке.&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Jul 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/json-sql/</link>
        <guid isPermaLink="true">https://grishaev.me/json-sql/</guid>
        
        <category>programming</category>
        
        <category>sql</category>
        
        <category>json</category>
        
        <category>postgres</category>
        
        
      </item>
    
      <item>
        <title>Помешательство</title>
        <description>&lt;p&gt;Может быть, писал про это раньше, лень искать.&lt;/p&gt;

&lt;p&gt;Допустим, у нас современное веб-приложение: на сервере только REST API, а рендер
силами JavaScript. Одна из апишек отдает сведения о покупках: число, сумму и
дату последней покупки. Что-то вроде такого:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;total_orders&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;total_sum&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;523626&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;last_order_date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2023-12-23T12:23:55Z&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(сумма в копейках, если что)&lt;/p&gt;

&lt;p&gt;Ожидается, что на клиенте мы покажем эту информацию так:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Вы совершили семь покупок на сумму 5.236 рублей 26 копеек. Последний раз вы
покупали 23 декабря, 20 дней назад.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Чтобы отрендерить этот блок, нам понадобятся:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;библиотека “число прописью”, чтобы 7 стало “семь”;&lt;/li&gt;
  &lt;li&gt;склонение с учетом числительных: 1 покупка, 3 покупки, 5 покупок;&lt;/li&gt;
  &lt;li&gt;форматирование суммы;&lt;/li&gt;
  &lt;li&gt;форматирование дат;&lt;/li&gt;
  &lt;li&gt;вычитание дат (20 дней назад);&lt;/li&gt;
  &lt;li&gt;возможно, мультиязычные шаблоны, если в приложении несколько языков.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;И думаю: есть же люди, которые всерьез делают это на JavaScript(!) в
браузере(!!). Подключают тонны библиотек из npm, пишут экраны кода, компилируют
мегабайтные бандлы. Запускают всю эту машинерию, кодят месяц и в итоге получают
что-то похожее на результат. Который, конечно, работает только в Хроме на
4К-мониторе. На мобиле обрежется, в Фаерфоксе разъедется, в Сафари будет белый
экран.&lt;/p&gt;

&lt;p&gt;Что движет этими людьми, интересно? И кто за них отвечает? Что за извращенное
удовольствие: из всех вариантов выбрать самый хрупкий и тяжелый?&lt;/p&gt;

&lt;p&gt;Похоже на массовое помешательство.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/js-madness/</link>
        <guid isPermaLink="true">https://grishaev.me/js-madness/</guid>
        
        <category>programming</category>
        
        <category>javascript</category>
        
        <category>frontend</category>
        
        <category>madness</category>
        
        
      </item>
    
      <item>
        <title>Прощай, Goo.gl!</title>
        <description>&lt;p&gt;Новость о том, что Гугл отключает сокращалку goo.gl, вызвала вьетнамские
флешбеки.&lt;/p&gt;

&lt;p&gt;Пятнадцать лет назад я был ее активным пользователем. Я тогда жил в Чите и
работал в славной компании “Читаэнергосбыт”. Параллельно я пытался сделать
какой-нибудь стартап. А поскольку ничего придумать не мог, все поделки сводились
к перекладыванию данных: из RSS в Твиттер, из одной соцсети в другую и так
далее.&lt;/p&gt;

&lt;p&gt;В те времена у Твиттера не было сокращалки урлов. Вставил в сообщение ссылку — и
прощай 40-50 символов. Сегодня это звучит дико, но тем не менее. Это был золотой
век всяких tr.im, bit.ly и goo.gl — пока у каждой соцести не появились
внутренние сокращалки.&lt;/p&gt;

&lt;p&gt;Пока я тестировал свои поделки, сократил около 15 тысяч урлов. Я даже написал
&lt;a href=&quot;https://github.com/igrishaev/googl-python&quot;&gt;библиотеку-клиент&lt;/a&gt;, и это был, наверное, мой первый опенсорс.&lt;/p&gt;

&lt;p&gt;Так вот, возвращаясь к закрытию сокращалки. Если бы я услышал эту новость хотя
бы год назад, я бы вознегодовал и написал гневный пост: как так, денег и
поддержки не просит, зачем закрывать? А сегодня мне безразлично.&lt;/p&gt;

&lt;p&gt;Во-первых, технически забрать данные об урлах проще простого. Не нужные никакие
экспорты, достаточно баш-скрипта с курлом и флажком “don’t follow
redirects”. Если у вас на сайте есть гугловые ссылки, заменить их нормальными —
дело часа. Это технический аспект.&lt;/p&gt;

&lt;p&gt;Второй аспект — моральный. Сокращалки урлов устарели и считаются моветоном. Ими
пользуются мошенники, СЕО-дрочеры и всякий озабоченный люд, которым важно,
сколько раз нажали ссылку, вместо того, что было за ней. Если я вижу сокращенную
ссылку, я никогда не нажму на нее, и советую вам то же самое.&lt;/p&gt;

&lt;p&gt;У сокращалок урлов был короткий период расцвета. Тогда еще не знали последствий,
и сокращать урлы считалось крутым и молодежным. Были плагины для форумов и
вордпрессов, которые сокращали все ссылки и подкачивали в админку стату
переходов. Но все это в прошлом: у крупных игроков свои методы отслеживания
ссылок, а мелким игрокам пользы от сокращалок нет.&lt;/p&gt;

&lt;p&gt;Третий аспект касается денег. Обязательно найдется тот, кто скажет: у Гугла
денег куры не клюют, пусть поддерживают. Дело в том, что это противоречит миссии
Гугла. Его цель — зарабатывать деньги. Это ясно уже лет десять, и почему
сокращалка урлов, не приносящая денег, должна быть исключением? Она не приносит
денег, поэтому ее нужно закрыть.&lt;/p&gt;

&lt;p&gt;Ситуация, когда какой-нибудь менеждер толкает речь на совете директоров о том,
что мы должны поддерживать пользователей, потому что обещали им… и все такие:
да, что же с нами стало, давайте оставим, только бы не сделать пользователям
плохо… Представили картину? Так не бывает. Это возможно в фильме, но не в
реальности.&lt;/p&gt;

&lt;p&gt;На эту тему советую почитать “Цель 2” Голдрата, причем не обязательно целиком, а
хотя бы первую главу. Там как раз заседание директоров, и акулы рвут на части
благие намерения. Почему — хорошо описано в диалоге с одной из акул во второй
главе.&lt;/p&gt;

&lt;p&gt;Так что все своим чередом. Конфето-букетные отношения между пользователями и
Гуглом закончились, остался один расчет. Гугл закрыл еще один сервис. Эпоха
ушла, жизнь продолжается.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/bye-googl/</link>
        <guid isPermaLink="true">https://grishaev.me/bye-googl/</guid>
        
        <category>google</category>
        
        
      </item>
    
      <item>
        <title>Ввод денег</title>
        <description>&lt;p&gt;Интересно, бывают ли безглючные виджеты для ввода денег? Например, чтобы ввести
тысячу сорок три рубля и тринадцать копеек — при этом так, чтобы не помянуть
разработчика и его родню.&lt;/p&gt;

&lt;p&gt;По умолчанию в поле стоит ноль, и запросто бывает так, что курсор падает перед
ним. В результате цифра умножается на десять. Что-то вроде такого:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|0
123|0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ни один виджет не работает со вставкой. Разработчик думает, что клиент сел — и
такой ввел шесть цифр по памяти. На практике люди копируют цифры изо всяких
экселей и платежек. Везде беда с десятичным разделителем, пробелами и позицией
курсора.&lt;/p&gt;

&lt;p&gt;Зачем эти потуги, если результат все равно бажный?&lt;/p&gt;

&lt;p&gt;Интересное решение я видел у Пейпала. У них ввод суммы сделан как в старых
терминалах. Нужно ввести сумму с точностью до цента, при этом цифры наползают
справа налево. Постарался изобразить это табличкой:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;state&lt;/th&gt;
      &lt;th&gt;input&lt;/th&gt;
      &lt;th&gt;result&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0.01&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0.12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0.12&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;1.23&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1.23&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;12.34&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Все жестко, никаких вариантов. Не уверен, что такой ввод подойдет нам, потому
что у нас нет таких терминалов. Но взять на заметку стоит: меньше вариативности
— больше надежности.&lt;/p&gt;

&lt;p&gt;PS: не привожу скришноты, потому что не вижу смысла. Любой банк, любое
приложение. Виджеты денег не работают нигде.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Jul 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/money-input/</link>
        <guid isPermaLink="true">https://grishaev.me/money-input/</guid>
        
        <category>ui</category>
        
        <category>money</category>
        
        <category>widget</category>
        
        
      </item>
    
      <item>
        <title>И ещё об AWS SDK</title>
        <description>&lt;p&gt;Последняя заметка об AWS SDK и все — закрываю тему, чтобы не утомлять.&lt;/p&gt;

&lt;p&gt;Почему я взъелся на этот SDK? Потому что в мире Кложи это своего рода
проклятье. Нужно работать с сервисами Амазона и казалось бы — бери Джавный SDK и
пиши обертку. Но библиотеки Амазона ужасны: нужно 25 пакетов ради HTTP-запроса,
а классы написаны по отвратительному паттерну. Вдобавок это добро не
компилируется Граалем — а у нас все на нем. В результате у нас самописные
клиенты к S3, Dynamo, CloudWatch и десятку других сервисов.&lt;/p&gt;

&lt;p&gt;Меня это совсем не радует, потому что клиенты реализованы частично. Если нужна
новая апишка, то открывай доку и пиши код. Самая жесть с сигнатурами. За
короткое время я нашел два бага в библиотеке aws-sign, которая подписывает
запрос. Отлаживать сигнатуры — такая грусть и боль, что и не хочется вспоминать.&lt;/p&gt;

&lt;p&gt;Узнав про SDK 2.0, я подумал, что пора перевести наш зоопарк на официальные
библиотеки AWS. Пусть их поддерживают другие люди, а нам не придется кувыркаться
с сигнатурами и прочим. Быстрый гуглеж показал, что SDK 2.0 дружит с Граалем, и
я засел.&lt;/p&gt;

&lt;p&gt;Написал обертку, компилирую — не работает. Полез в интернет и выяснилось,
что… даже руки опускаются от отчаяния. Релиз, который поддерживает GraalVM и
компиляцию native-image, был год назад. За это время код поменяли, а нового
релиза с Граалем не делали.&lt;/p&gt;

&lt;p&gt;Может быть, со стороны это звучит непоятно, но я поражен. Либо ты поддерживаешь
GraalVM, либо нет. Он накладывает ограничения на Джава-код, поэтому важно
принять решение и следовать ему. А у ребят из Амазона получились релизы
Шредингера: этот поддерживает, тот нет, а следующий, возможно, будет снова
поддерживать.&lt;/p&gt;

&lt;p&gt;Технически это лечится дополнительным шагом в CI, где текущая ветка
компилируется Граалем, и если что-то не так — изменения не принимаются. Новый
шаг добавляется в CI за пару часов без преувеличений. И только после этого можно
писать в readme: да, мы поддерживаем Грааль. А не так — один раз получилось,
значит, получится всегда.&lt;/p&gt;

&lt;p&gt;Мысль о стажерах, которых сажают писать SDK, пока нет другой работы, крепнет во
мне все сильнее.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Jul 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/aws-sdk-last/</link>
        <guid isPermaLink="true">https://grishaev.me/aws-sdk-last/</guid>
        
        <category>programming</category>
        
        <category>aws</category>
        
        <category>sdk</category>
        
        <category>s3</category>
        
        
      </item>
    
      <item>
        <title>SDK, работа над ошибками</title>
        <description>&lt;p&gt;Давайте поможем инженерам из Amazon с их SDK 2.0. Разберем наиболее серьезную
ошибку – частичную инициализацию объекта.&lt;/p&gt;

&lt;p&gt;В прошлой заметке я упоминал, как создаются объекты в SDK. Если коротко, у
классов скрыты конструкторы, и нужно пользоваться билдером. Получается что-то
вроде такого:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;GetObjectRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetObjectRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;acme-releases&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;path/to/file.txt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ifEtagMatches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;....&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ifModifiedSince&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Билдер не знает, какие из параметров обязательны, а какие нет. В примере выше
код работает. Если убрать вызов .bucket или .key, все скомпилируется, но при
запуске получим:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Execution error (IllegalArgumentException)
at ....xml.internal.marshall.SimpleTypePathMarshaller

Parameter 'Bucket' must not be null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Обратите внимание, что ошибка приехала из какого-то XML-маршаллера, хотя
никакого XML и тем более маршаллизации здесь нет. Тело пустое, и просто
составляется URL.&lt;/p&gt;

&lt;p&gt;Подчеркну: программистам из Амазона вполне ОК, что объект инициирован
частично. Спрашивается, что можно сделать с объектом &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetObjectRequest&lt;/code&gt;, если у
него не заполнен бакет? Ничего. Зачем тогда позволять такую ситуацию?&lt;/p&gt;

&lt;p&gt;Как они вообще представляют работу со своим SDK? Пользователь садится и
перебором проверяет, какие поля нужны, а какие нет? Ладно я знаю, что бакет и
ключ необходимы, но ведь кто-то не знает. И узнает он только когда бахнет прод.&lt;/p&gt;

&lt;p&gt;Проблема решается просто. Все поля объекта делятся на обязательные и нет – по
аналогии с аргументами &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;args&lt;/code&gt; и &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kwargs&lt;/code&gt; в Питоне. Обязательные поля потому так
и называются, что без них невозможно дернуть конструктор или порождающий
статичный метод. В нашем случае обязательны бакет и ключ. С ними код становится
таким:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;GetObjectRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetObjectRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;acme-releases&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;path/to/file&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withEtag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withModifiedSince&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;либо то же самое с билдером:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;GetObjectRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetObjectRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;acme-releases&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;path/to/file&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;etag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;modifiedSince&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;То есть хоть разбейся в лепешку, но обязательные параметры передай.&lt;/p&gt;

&lt;p&gt;Ну? Что мешало так сделать? Здесь даже паттерны сохранены, чтобы не пострадало
чувство прекрасного.&lt;/p&gt;

&lt;p&gt;Заметим, что я не говорю отсебятину: все это сказано в книге Effective Java
авторства Джошуа Блоха. Он так и пишет: используйте неизменяемые объекты, не
допускайте частичной инициализации, требуйте обязательные поля сразу – не
надейтесь, что кто-то заполнит из позже. Кумир джавистов говорит, как делать
правильно. Почему в Амазоне решили, что сами с усами?&lt;/p&gt;

&lt;p&gt;Впрочем, пока я писал это, подумал – может, все гораздо проще? Может быть, за
SDK сажают мидлов и стажеров, пока они без задач? Скажем, наняли стажера, а у
тимлида релиз, погружать человека некогда, поэтому его сажают за SDK. Вполне
похоже на правду.&lt;/p&gt;

&lt;p&gt;У нас так было в Датаарте: пока человек без работы, его сажали за всякий
внутренний хлам. Форму заказа пиццы, аукцион парковочных мест, каталог
сотрудников. Все это было крайне низкого качества, потому что шло через десятки
джунов и мидлов без какого-либо контроля качества.&lt;/p&gt;

&lt;p&gt;Может и в Амазоне такой же порядок? Кто знает, расскажите. Потому что чем иначе
объяснить такое качество SDK – я не знаю.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Jul 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/aws-sdk-fix/</link>
        <guid isPermaLink="true">https://grishaev.me/aws-sdk-fix/</guid>
        
        <category>programming</category>
        
        <category>aws</category>
        
        <category>sdk</category>
        
        <category>s3</category>
        
        
      </item>
    
  </channel>
</rss>
