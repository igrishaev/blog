<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ivan Grishaev's blog</title>
    <description>Writing on programming, education, books and negotiations.
</description>
    <link>https://grishaev.me/</link>
    <atom:link href="https://grishaev.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 01 Jun 2024 18:47:31 +0000</pubDate>
    <lastBuildDate>Sat, 01 Jun 2024 18:47:31 +0000</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>Борьба с PDF (2)</title>
        <description>&lt;p&gt;&lt;a href=&quot;/pdf-1/&quot;&gt;Недавняя заметка&lt;/a&gt; про замену PDF на HTML, была, конечно, бредом. Не
получится по ряду следующих причин.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Бизнес-требования.&lt;/strong&gt; Если руководство или тем более регулятор ожидают PDF, ты
им ничего не докажешь. Ни про какой HTML там не слышали.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Подписи.&lt;/strong&gt; Вокруг PDF построены сервисы и тулинг для подписей. Электронно
подписанный PDF имеет такую же силу, как и бумажный договор. В техническом плане
подписать HTML легко — достаточно поместить в заголовок тег &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;signature&amp;gt;&lt;/code&gt; с
RSA-ключом, — но опять же, под это нет тулинга.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Отображение.&lt;/strong&gt; Ваша правда, PDF везде отображается одинаково — проблемы бывают
в самых редких местах. В случае с HTML неопределенность гораздо шире: может
поплыть и на телефоне, и на Линуксе, а в Винде браузер заблокирует
base64-изображения.&lt;/p&gt;

&lt;p&gt;Но все-таки: порой PDF бывает таким душным! Напрягает его ориентация на бумагу,
хотя большинство документов сейчас не печатают, а смотрят с экрана. В таких
ситуациях HTML дает больше плюшек: он нормально покажет длинные таблицы без
разрывов. В HTML работает минимальная интерактивность. В сложном отчете можно
сделать табы на чистом CSS. HTML на ура копируется в офисные документы: скажем,
тег &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;table&amp;gt;&lt;/code&gt; идеально сядет в таблицу Excel, в то время как копирование из PDF
— сущий ад.&lt;/p&gt;

&lt;p&gt;Можно сказать, что PDF и HTML лежат на разных концах одной шкалы. Приближаясь к
одному, уходишь от удобств другого.&lt;/p&gt;
</description>
        <pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/pdf-2/</link>
        <guid isPermaLink="true">https://grishaev.me/pdf-2/</guid>
        
        <category>pdf</category>
        
        <category>latex</category>
        
        <category>html</category>
        
        
      </item>
    
      <item>
        <title>Борьба с PDF (1)</title>
        <description>&lt;p&gt;По всему миру люди борются с PDF. Скажем, нужно сгенерить отчет, и начинается:
рендерим файл LaTeX и скармливаем pdflatex. Глючно, не очевидно, требует
установки Латеха и пакетов. Рассыпается при смене минорной
версии. Кросплатформенно только в теории.&lt;/p&gt;

&lt;p&gt;Можно собрать при помощи Java-библиотеки. Импортировать двадцать классов
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.pdf.MySuperCellFactory&lt;/code&gt; и как-то их соединить. Тоже не очевидно, трудно
дебажить.&lt;/p&gt;

&lt;p&gt;Неплохой вариант: сгенерить HTML и напечатать PDF при помощи headless-Хрома. Уже
лучше, но требует установки Хрома и chromedriver. Запускать Хром на каждый чих
расточительно, нужна отдельная машина.&lt;/p&gt;

&lt;p&gt;Короче, с какой стороны ни зайди, везде плохо.&lt;/p&gt;

&lt;p&gt;Так вот: почему бы не генерить документы в HTML? Стили и картинки зашиты в один
файл через &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src=data:base64&lt;/code&gt;. Получаем один .html-файл без зависимостей. Браузер
есть везде, не нужно ничего ставить. При желании можно адаптировать стили под
мобильный экран, чтобы смотрелось везде хорошо.&lt;/p&gt;

&lt;p&gt;Почему так не делают? Зачем PDF, если вот он, HTML: любой шрифт, картинки,
таблицы и все прочее?&lt;/p&gt;
</description>
        <pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/pdf-1/</link>
        <guid isPermaLink="true">https://grishaev.me/pdf-1/</guid>
        
        <category>pdf</category>
        
        <category>latex</category>
        
        <category>html</category>
        
        
      </item>
    
      <item>
        <title>Перезагрузка айфона</title>
        <description>&lt;p&gt;Если хочется перезагрузить айфон, знайте, что такой кнопки там нет. На экране
выключения только три пункта: выключение, экстренный вызов и отмена. Никакой
перезагрузки. Тут у меня начинается двоемыслие.&lt;/p&gt;

&lt;p&gt;С одной стороны, перезагрузка телефона — бестолковое действие. Что-то вроде
дефрагментации диска и очистки реестра, чем мы страдали в нулевых на
винде. Перезагружать телефон, чтобы устранить какой-то баг, глупо — нужно
починить баг, и не придется ничего перезагружать.&lt;/p&gt;

&lt;p&gt;Примерно так и рассуждали в Эпле: телефон либо работает, либо нет, а
перезагружаются пусть рутованные китайские андроиды.&lt;/p&gt;

&lt;p&gt;С другой стороны, напрягает это лицемерие. Эпл ведет себя так, словно их
телефоны действительно не нуждаются в перезагрузке, а это не так. Мой айфончик
иногда теряет сотовую связь, и это никак не исправить без перезагрузки. А
поскольку ее нет, нужно выключить телефон, подождать секунд десять и зажать
кнопку включения, пока не появится яблоко. Довольно глупо.&lt;/p&gt;

&lt;p&gt;Типичное поведение Эпла: сделать вид, что проблемы нет и улыбаться. А
проблема-то есть.&lt;/p&gt;
</description>
        <pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/iphone-reboot/</link>
        <guid isPermaLink="true">https://grishaev.me/iphone-reboot/</guid>
        
        <category>programming</category>
        
        
      </item>
    
      <item>
        <title>Бумеры и зумеры</title>
        <description>&lt;p&gt;Я никогда не использую слова “бумер” и “зумер” по двум причинам.&lt;/p&gt;

&lt;p&gt;Во-первых, они грубоваты. Так уж случилось, что их используют в
пренебрежительном тоне, когда одна группа говорит о другой. Даже в нейтральном
контексте от слов “бумер” и “зумер” идет запашок.&lt;/p&gt;

&lt;p&gt;Во-вторых, это лишняя нагрузка от вычислений. Как правило, неважно, когда
человек родился, важно, сколько ему лет. Поэтому когда говорят “бумер”, я
подвисаю на секунду, пытаясь вычислить, сколько ему лет. Почему бы не сказать
прямо: люди от 50 до 60 лет? Если “зумер” — от 20 до 30 лет?&lt;/p&gt;

&lt;p&gt;Авторам и редакторам взять на заметку.&lt;/p&gt;

&lt;p&gt;Сюда же относятся “миллениал”, “поколение Y” и прочая ахинея, про которую я
забыл.&lt;/p&gt;
</description>
        <pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/boom-zoom/</link>
        <guid isPermaLink="true">https://grishaev.me/boom-zoom/</guid>
        
        <category>programming</category>
        
        
      </item>
    
      <item>
        <title>Зачем фронтенд? (2)</title>
        <description>&lt;p&gt;Ситуация: сломался фронтенд. Непонятная ошибка с null, код обфусцирован,
сорс-мап нет, хотя это тестовое окружение.&lt;/p&gt;

&lt;p&gt;Открываю исходник и вижу: поиск в коллекциях, парсинг чисел и дат,
форматирование с учетом локали, поход в сеть и прочие штучки. И мне правда
интересно — что этот код делает на фронтенде? Почему он не на бекенде? Чего ты
добился, заставив этот код крутиться на клиентской машине?&lt;/p&gt;

&lt;p&gt;Ты потерял всякую предсказуемость, потому что код выполняется уже не на сервере
с линуксом и джавой фиксированных версий. У тебя зоопарк клиентов, где
хромы-фаерфоксы с блокироващиками всего и вся. Ты потерял нормальные
стек-трейсы. Ты потерял удобный прогон тестов. Ты потерял логирование и отправку
ошибок в Sentry. Ты банально сделал хуже по всем статьям.&lt;/p&gt;

&lt;p&gt;Звоню фронтендеру. Первое, что от него слышу — сегодня пятница, и он уходит
через две минуты. Падает фронтенд? Это с бэка приходят неверные данные, почисти
базу и заработает. Сорс-мапы? Тебе надо, ты и добавь. Созвониться в понедельник?
У меня будет выходной. Но ты держись!&lt;/p&gt;

&lt;p&gt;Я понимаю, что фронтендеру надо зарабатывать, да. Однако лучшее, что можно
сделать с проектом — это сократить фронт до одного верстальщика и переехать на
северный рендер. Вся логика будет в одном месте; будут тесты, будут прогоны на
CI, будут предсказуемые билды. А верстальщик пусть рисует макеты.&lt;/p&gt;

&lt;p&gt;Да, будет что-то, что не ложиться на серверный рендер. В таком случае мы это
просто не делаем. Если из десяти хотелок мы сделали девять, а последняя ложится
поперек, то ее перерабатывают. Например, бьют фичу на два экрана, убирают лишнюю
интерактивность и так далее.&lt;/p&gt;

&lt;p&gt;Кому-то это не понравится, но что поделать? Чтобы проект шел легко, нужно
сбросить балласт. А роль балласта часто играет фронтенд.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 May 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/why-frontend-2/</link>
        <guid isPermaLink="true">https://grishaev.me/why-frontend-2/</guid>
        
        <category>chat</category>
        
        <category>work</category>
        
        
      </item>
    
      <item>
        <title>Зачем фронтенд? (1)</title>
        <description>&lt;p&gt;Признаться, я давно потерял мысль, зачем нам фронтенд. Я имею в виду реакты-вуи,
папки &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; весом в тонну, тормозной гуй и спиннеры в каждом углу.&lt;/p&gt;

&lt;p&gt;В самом деле, какую проблему мы решаем? Неужели так важно писать километры кода
на js, чтобы элемент обновился динамически? Почему никто не помнит закон
сохранения энергии: если на беке кода стало меньше, его станет больше на фронте?
Плюс и минус схлопываются, и в лучшем случае получится то же самое. Но
прибавляется энтропия, вызванная фрагментацией технологий и стеков, тулинга,
языков.&lt;/p&gt;

&lt;p&gt;Есть и другое замечание. Когда-то браузеры были медленными, и рендеринг страницы
был узким местом. Даже если разметка приходила быстро, ее было трудно вывести на
экран. Сайты верстали таблицами, на которых IE знатно подвисал. Поэтому Ajax
казался спасением: выдернем данные в полете, не придется перезагружать
страничку.&lt;/p&gt;

&lt;p&gt;Сегодня браузеры ушли в космос: это уже почти операционные системы. Видео,
дизайн, игры, офисный редактор. Если взять обычный сайт и доработать под
стандарты — Etag-и, кэширование, правильная разметка, оптимизация стилей — то он
будет работать мгновенно. Страницы будут открываться так быстро, что никакие
аяксы не понадобятся.&lt;/p&gt;

&lt;p&gt;Вместо того, чтобы ускорить сайт целиком, фронтендеры пишут приложения. Они как
Джава — загружаются долго, но, вроде бы как, работают быстро. С оговоркой,
потому что новых вкладок порой не избежать, и загружается вторая копия
приложения. Со всеми этими спиннерами, загрузками и клиентским рендером.&lt;/p&gt;

&lt;p&gt;Казалось бы, хочешь обновить кусок страницы динамически — пришли с сервера кусок
разметки и вставь в нужное место. Это самый простой способ, проще невозможно. Но
у фронтендера свой путь: он запрашивает данные, складывает во внутреннюю базу,
подписывается на обновление базы, по событию ее изменения вызывает другое
событие, которое читает базу, рендерит HTML и вставляет в документ.&lt;/p&gt;

&lt;p&gt;Этот как налить чай не в кружку, а сначала в тазик, потом в блюдце, потом по
трубочке в кувшин, а оттуда в кружку. Что ты хотел этим доказать?&lt;/p&gt;

&lt;p&gt;Разработчики разучились мыслить критически. У всех перед глазами шоры:
реакт-вуй-протобуф-кубернетис. Никто не думает, как решить задачу просто, дешево
и в срок. Всем подавай бест-практис и блидинг-эдж.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 May 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/why-frontend-1/</link>
        <guid isPermaLink="true">https://grishaev.me/why-frontend-1/</guid>
        
        <category>chat</category>
        
        <category>work</category>
        
        
      </item>
    
      <item>
        <title>Новый вид людей</title>
        <description>&lt;p&gt;Меня волнует, что когда-то было два вида людей: неандертальский и
кроманьонский. Это именно два разных вида, а не отличие в цвете кожи или разрезе
глаз. Сегодня ничего такого нет: люди всех рас отличаются незначительно (но и не
абсолютно одинаковы, как любит западная повестка).&lt;/p&gt;

&lt;p&gt;Мне бы хотелось, чтобы появился новый вид людей. Я часто их представляю:
возможно, они будут жить чуть дольше; беременность будет длиться год, а не
девять месяцев; их слух и зрение будут работать слегка в другом
диапазоне. Возможности интеллекта не будут отличаться от нашего; будет другая
система оволосения и потоотделения.&lt;/p&gt;

&lt;p&gt;Появление конкурентов будет столь жарким событием, что ковиды и войны покажутся
детским садом. Мир погрузится в истерику.  Верующие найдут в Библии факты, что
это потомки зверя. Военные окажутся на коне: кто как не они защитят
человечество. Социальные сети лопнут от твитов и аналитики. Будет всемирная
жесть.&lt;/p&gt;

&lt;p&gt;Это будет проверка, чего мы добились за сорок тысяч лет. Я не сомневаюсь, что
люди убьют конкурентов подобно тому, как кроманьонский человек убил
неандертальцев.&lt;/p&gt;

&lt;p&gt;То есть — ничего.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 May 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/new-kind/</link>
        <guid isPermaLink="true">https://grishaev.me/new-kind/</guid>
        
        <category>chat</category>
        
        <category>work</category>
        
        
      </item>
    
      <item>
        <title>Джон и чат</title>
        <description>&lt;p&gt;Предположим, Джон не может сегодня работать. Заболела дочь, и он везет ее по
врачам. Джон заходит в рабочий чат и пишет: гайз, заболел ребенок, сегодня
работать не смогу.&lt;/p&gt;

&lt;p&gt;Через двадцать минут просыпается Майкл, заходит в чат, видит сообщение Джона и
отвечает: Джон, желаю твоей дочери поправиться! Еще через полчаса заходит Карл и
пишет: скорее поправляйся! Через сорок минут… короче, вы поняли. В час дня
выползает как-то тип со сдвинутым графиком и мотает чат. Пролистав десяток
пожеланий, что он делает? Правильно — желает выздоровления дочери, а поскольку
речь о ребенке, ставит тупую гифку с плюшевым медведем.&lt;/p&gt;

&lt;p&gt;Обеим сторонам нужно помнить следующее.&lt;/p&gt;

&lt;p&gt;Если вы — Майкл и Карл, то желать выздоровления больше одного раза не
нужно. Если прям неймется, поставьте к первому сообщению лайк — в знак того, что
вы присоединяетесь к пожеланию. Иначе вы затрахете коллегу и всех, кто в чате.&lt;/p&gt;

&lt;p&gt;Если вы — Джон, и коллег не перевоспитать, не пишите о личных проблемах в общий
чат. Достаточно написать руководителю и паре людей, с которыми вы плотно
работаете. Остальным хватит и статуса в мессаджере.&lt;/p&gt;

&lt;p&gt;Формально все эти пожелания вежливы. Но иногда еще вежливей будет помолчать.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 May 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/john-chat/</link>
        <guid isPermaLink="true">https://grishaev.me/john-chat/</guid>
        
        <category>chat</category>
        
        <category>work</category>
        
        
      </item>
    
      <item>
        <title>Репозиторий функций</title>
        <description>&lt;p&gt;Где-то я прочел тезис: мол, хорошо бы иметь платформу, где в репозитории лежат
не пакеты, а функции. То есть гранулярность библиотек столь мала, насколько это
возможно. И вот тогда бы мы зажили.&lt;/p&gt;

&lt;p&gt;Не понимаю, зачем об этом мечтать, ведь такая платформа есть — это Node.js и
npm. В ней тысячи пакетов, которые состоят из одной-двух функций. Прямо сейчас
прошелся по папке &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; одного проекта. Обнаружил там забавные вещи:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ansi-red&lt;/code&gt; — пакет для вывода текста красным, одна функция, пять строк на весь файл;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expand-range&lt;/code&gt; — что-то для диапазона значений, одна функция;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for-in&lt;/code&gt; — синтаксический сахар для цикла, одна функция, 6 строк;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is-buffer&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is-number&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isarray&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isobject&lt;/code&gt; — пакеты-проверки на нужный
тип, везде одна функция на 5-6 строк;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list-item&lt;/code&gt; — генерилка списка с буллитами, одна функция;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;markdown-link&lt;/code&gt; — рендер ссылки markdown, одна функция;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;randomatic&lt;/code&gt; — генератор случайной строки, две функции;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repeat-element&lt;/code&gt; — генератор массива с повтором элемента, одна функция.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Есть и другие однострочники, не хочу утомлять. Просто факт: вот тебе платформа,
куда можно заливать функции и делать ссылку на них, и это даже работает.&lt;/p&gt;

&lt;p&gt;Имея все это на руках, хочется спросить: помогли тебе твои ляхи? Мы уже
переехали в рай Node.js верхом на радуге? И что сегодня сказал бы автор тезиса?
Опять чего-то не хватает?&lt;/p&gt;

&lt;p&gt;Я очень скептичен к Node.js как платформе и не вижу смысла опять об этом
писать. Речь о другом: высказывая тезис, даже самый фантастический, нужно
помнить о том, что его легко проверить. Для этого не нужно ждать пять лет. Почти
все, о чем мы мечтаем — это лишь слабые навороты к тому, что уже есть.&lt;/p&gt;

&lt;p&gt;А истинно новые вещи проверить наперед невозможно.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 May 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/func-repo/</link>
        <guid isPermaLink="true">https://grishaev.me/func-repo/</guid>
        
        <category>work</category>
        
        <category>programming</category>
        
        <category>npm</category>
        
        <category>javascript</category>
        
        
      </item>
    
      <item>
        <title>Концепция</title>
        <description>&lt;p&gt;Итак, вы придумали изящную концепцию, простую и понятную. Но в процессе
выяснилось, что ей мешают костыли: надо воткнуть условие здесь, условие там,
словом, концепция поползла. Никакая она больше не изящная.&lt;/p&gt;

&lt;p&gt;Возможны три варианта. Первый — идти до конца, то есть воткнуть столько
костылей, сколько нужно для запуска в проде. Далее отчитаться перед начальством,
съездить на конференцию с зажигательным толком, собрать все ништяки и уйти в
закат. Позже фирма наймет кого-то другого, чтобы все переделать.&lt;/p&gt;

&lt;p&gt;Второй путь — изменить внешние условия так, чтобы концепция не
разваливалась. Например, переместить данные в другое место, отказаться от
устаревших протоколов, поменять рабочий процесс. Это может быть справедливо,
если сохранит изящность концепции.&lt;/p&gt;

&lt;p&gt;Третий путь — если концепция, пусть даже изящная, не может жить в текущих
условиях, она признается негодной. Вместо нее ищут другую концепцию. На первый
взгляд она может быть уродливой, но ее достоинство в том, что она хорошо себя
чувствует в тяжелых условиях.&lt;/p&gt;

&lt;p&gt;Что именно выбрать — каждый решает сам. Лично мне нравится второй вариант. Если
концепция простая, то есть может быть описана двумя предложениями, она прослужит
долго. Ради этого стоит напрячься и передвинуть мебель так, чтобы в будущем
ничего не двигать.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 May 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/conception/</link>
        <guid isPermaLink="true">https://grishaev.me/conception/</guid>
        
        <category>work</category>
        
        <category>programming</category>
        
        <category>conception</category>
        
        
      </item>
    
  </channel>
</rss>
