<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ivan Grishaev's blog</title>
    <description>Writing on programming, education, books and negotiations.
</description>
    <link>https://grishaev.me/</link>
    <atom:link href="https://grishaev.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 04 Oct 2025 15:26:02 +0000</pubDate>
    <lastBuildDate>Sat, 04 Oct 2025 15:26:02 +0000</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>Python в Windows 10</title>
        <description>&lt;p&gt;Виндуз 10 — мягко говоря, странная вещь. Во всех операционках Питон идет из
коробки, а на Винде его нет. Вместо него — заглушка. Если набрать в консоли
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python foo.py&lt;/code&gt;, появится надпись: друг, у тебя нет Питона. Чтобы поставить его,
просто введи python.&lt;/p&gt;

&lt;p&gt;Хорошо, ввожу &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt;. Открывается магазин приложений и тут же выстреливает
алертами: и какая-то ошибка, и регион не тот, и токен протух. Еле закрыл к
чертям, а то и дальше бы кидался ошибками.&lt;/p&gt;

&lt;p&gt;Скачал Питон с официального сайта, поставил. Ввожу &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python foo.py&lt;/code&gt; — опять та же
самая заглушка. Минуточку, где Питон, который я поставил минуту назад? Начинаю
искать. В дни моей молодости он ставился в корень: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Python27&lt;/code&gt;. Там его
нет. Ищу в &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Program Files&lt;/code&gt; (обоих папках) — тоже нет. Наконец догадался:
проверил ярлык в меню Пуск. Знаете куда он ведет? Вот:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Users\ivan\AppData\Local\Programs\Python\Python3.8\...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Удивляюсь, какими же уродами надо быть, чтобы так сделать? Мало того что
засунули его глубже некуда, так еще не сменили заглушку для магазина!&lt;/p&gt;

&lt;p&gt;Ладно, может быть заглушку нельзя трогать по условиям лицензии. Тогда почему
инсталятор не добавил путь к Питону в &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Ничего не работает как надо. Какое-то сборище клоунов, честное слово.&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Oct 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/win-10-python/</link>
        <guid isPermaLink="true">https://grishaev.me/win-10-python/</guid>
        
        <category>windows</category>
        
        <category>python</category>
        
        
      </item>
    
      <item>
        <title>Непонятный код</title>
        <description>&lt;p&gt;Одна из самых бесячих вещей — когда кто-то вбрасывает непонятный код и
спрашивает, что он выведет. Откуда я знаю, что он выведет? Запусти и
посмотри. Еще лучше исправить код, чтобы он был понятен сразу.&lt;/p&gt;

&lt;p&gt;Я еще могу понять, если это какой-нибудь сишный код, оптимизированный по самые
помидоры, чтобы умещаться в кэше процессора. Это чужой монастырь, и там свои
погремушки. Но когда это обычный бизнес-код типа “принять две мапы и взять
наибольший ключ”, оправданий быть не может.&lt;/p&gt;

&lt;p&gt;Почему-то мало кто понимает: писать непонятный код легко, а понятный —
трудно. На это уходят годы практики, нужно пройти много ситуаций, чтобы понять,
какой код и при каких обстоятельсвах понятен. Вываливать непонятный код — то же
самое, что мочиться в штаны. Нужно тихо решить проблему, а не тыкать ей в лицо.&lt;/p&gt;

&lt;p&gt;Вообще, угадывание — худшее, что есть в айти. Когда угадываешь, фактически ты на
дне. Ты исчерпал все нормальные варианты, ну или их не было. Должна быть легкая
возможность запустить код — привет, программисты без репла. Должны быть тесты,
линтеры, логи, метрики, бенчмарки, сбор ошибок и так далее.&lt;/p&gt;

&lt;p&gt;Угадайка — это билет в проигрыш, иначе быть не может. Да, бывают истории, когда
человек раз — и решил сложную проблему, не имея никаких улик. Но это ошибка
выжившего: на каждую такую историю приходится тысяча других, когда человек
просидел выходные, решая проблему брутфорсом — и на двадцать пятой итерации
что-то помогло. Я бы не рассчитывал на такую удачу.&lt;/p&gt;

&lt;p&gt;Короче, видишь плохой код — исправь, не гадай.&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Oct 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/weird-code/</link>
        <guid isPermaLink="true">https://grishaev.me/weird-code/</guid>
        
        <category>programming</category>
        
        <category>code</category>
        
        
      </item>
    
      <item>
        <title>Без исключений</title>
        <description>&lt;p&gt;Меня искренне изумляют ребята, которые обходят исключения стороной. Типа, вернем
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; и запишем в лог. Или вернем мапу &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&quot;success&quot;: false}&lt;/code&gt;. Или кортеж &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(nil,
&quot;error&quot;)&lt;/code&gt;. Или еще какой-то финт ушами.&lt;/p&gt;

&lt;p&gt;Мне интересно: а кто будет читать логи? Тот чел, который молча пишет в лог, у
него что, в договоре прописано каждое утро их читать? С какой частотой? И что
делать, если логи нашлись? Как реагировать? И кто следит, чтобы он их читал?&lt;/p&gt;

&lt;p&gt;Или какой-то калека вернул мапу &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{&quot;success&quot;: false}&lt;/code&gt;. Что с ней делать? Какая
была ошибка? В каком направлении двигаться? Просто неопытный разработчик
переложил на других то, что должен делать сам.&lt;/p&gt;

&lt;p&gt;Замалчивание ошибок — признак неопытности программиста. В единичном случае это
еще не страшно. Но когда каждая строчка возвращает &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; или мапу вместо
ошибки, работать невозможно. Приходиться писать строгие обертки вокруг таких
функций, которые кидают исключение с понятным сообщением: что я собирался делать
и что пошло не так.&lt;/p&gt;

&lt;p&gt;Один коллега предложил: давай я буду возвращать сообщение об ошибке, если файла
нет? Я аж чуть кофе не выплюнул: минуточку, все это время ты молчал о том, что
файла нет? Блин, уж будь добр, потрудись сообщить о проблеме.&lt;/p&gt;

&lt;p&gt;При либом отклонении от нормы нужно кидать исключение с максимально детальным
текстом. Вот, вобщем-то, простой секрет хорошего кода.&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Oct 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/no-exceptions/</link>
        <guid isPermaLink="true">https://grishaev.me/no-exceptions/</guid>
        
        <category>programming</category>
        
        <category>exceptions</category>
        
        
      </item>
    
      <item>
        <title>Фотографии на Маке</title>
        <description>&lt;p&gt;Моя семейная жизнь течет спокойно и счастливо, однако нет-нет да окажется на
грани развода. Всему виной они – фотографии.&lt;/p&gt;

&lt;p&gt;Когда у тебя трое детей, часто фотографируешь их по поводу и без, а потом
наступает тот самый момент: дорогой, давай я выберу фотографии для фоторамок в
кухне. Я оттягиваю его как могу, потому что знаю – будут крики и ругань.&lt;/p&gt;

&lt;p&gt;Даю жене яблочный ноут. Не проходит и пяти минут, как слышу: почему файл не
открывается по нажатию Enter? Почему, открыв фотографию, нельзя перейти к
соседней стрелочками? Почему сочетания кнопок такие неудобные? Почему нет
бегунка, чтобы превьюшки стали больше?&lt;/p&gt;

&lt;p&gt;Ни на один упрек я не знаю ответа. В этом плане я обычная тряпка, яблочный
приспособленец. Я не знаю, почему по нажатию Enter система предлагает
переименовать файл, а не открыть его. Возможно, Стив Джобс был под наркотой,
когда придумал это. Иначе как объяснить, что вместо Enter нужно либо дважды
кликнуть по файлу, либо нажать Command+Down?&lt;/p&gt;

&lt;p&gt;Как часто мы открываем файл, а как часто меняем его имя? Что в приоритете?
Ничего, что на клавише написано Enter – по-английски “войти”, а не
“переименовать”? Сколько ЛСД принял Стив в тот вечер?&lt;/p&gt;

&lt;p&gt;То же самое с переходом между фотографиями. Когда человек открыл одно фото, он
захочет посмотреть соседнее и нажмет стрелку влево или вправо. Логично же? Эпл
предлагает выделить фотографии в Finder, нажать правую кнопку мыши, открыть в
Preview. После этого можно просматривать несколько фотографий, – но только те,
что выбрал.&lt;/p&gt;

&lt;p&gt;Есть быстрый просмотр при помощи пробела, и внезапно в нем работают
стрелочки. Однако их поведение зависит от того, в каком виде показаны
файлы. Если это список, то работают клавиши вверх и вниз, а влево и вправо
бездействуют. Если файлы в режиме значков, перемещение по ним работает во все
стороны. Нажав вниз, вы перейдете к такой же позиции следующего ряда, пропустив
столько фотографий, сколько их в ряду. Это значит, нельзя просмотерть файлы один
за другим, используя одну кнопку. Нужно следить за курсором и нажимать влево,
вправо и вниз – другими словами, обходить файлы змейкой.&lt;/p&gt;

&lt;p&gt;Файлы в режиме значков не подстраиваются под ширину окна. Если в ряду их десять
и вы ужали окно, матрица не перестроится. Появится горизонтальный скроллинг, и
часть файлов вы не увидете.&lt;/p&gt;

&lt;p&gt;Выбор фотографий превратился в маленький адок, который нужно пережить. Однако и
я стал умнее. Зная, что супруга управляется с Виндой, я теперь делаю
так. Отбираю фотки, которые ее интересуют, и помещаю в какой-то альбом. Это
легко сделать на телефоне: достаточно выделить файлы и пометить тегом.&lt;/p&gt;

&lt;p&gt;Далее открываю яблочный ноут, приложение Photos. В нем работает экспорт файлов
на диск. Разумеется, можно достучаться до файлов и обычным способом, но это
нелегко. Фотографии хранятся в чертовом HEIC – яблочном формате, который
совмещает в себе JPEG и HDR. Это добро откроется только на яблочной машине. У
файлов машинные имена-уиды, а вся мета о них лежит во внутренней базе данных.&lt;/p&gt;

&lt;p&gt;Я думал, Эпл позволит экспортировать только штучные файлы. Но все оказалось
проще: можно экспортировать целый альбом, и на диске появятся нормальные джипеги
и mp4.&lt;/p&gt;

&lt;p&gt;Осталось перетащить их на Винду. Это тоже проблематично, потому что шаринг
файлов между Эплом и Виндой максимально костыльный. Есть вариант с флешкой в
exFAT. Но еще лучше воткнуть флешку в роутер и поднять на нем FTP- или
SMB-сервер. Все просто: на яблоке закинул, на Винде скачал.&lt;/p&gt;

&lt;p&gt;И знаете, жить стало намного легче!&lt;/p&gt;

&lt;p&gt;Вот так технологии спасают семейную жизнь.&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Oct 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/mac-photos/</link>
        <guid isPermaLink="true">https://grishaev.me/mac-photos/</guid>
        
        <category>life</category>
        
        <category>apple</category>
        
        <category>photos</category>
        
        
      </item>
    
      <item>
        <title>Чат вслух</title>
        <description>&lt;p&gt;Бывает, пишешь коллеге: дружище, я вызываю такой-то сервис, посылаю мапу:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{:foo 42
 :data [&quot;some-type&quot;]
 :items [:kek :lol :crap]}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Сервис возвращает не то. Вот логи, вот ссылки, вот трассировочный заголовок. Все
для тебя, мой милый-хороший.&lt;/p&gt;

&lt;p&gt;В ответ человек срет сообщениями:&lt;/p&gt;

&lt;p&gt;привет :)&lt;/p&gt;

&lt;p&gt;надо items передать через точку с запятой :)&lt;/p&gt;

&lt;p&gt;вроде так было в последнем коммите&lt;/p&gt;

&lt;p&gt;или погоди его не выкатили :)&lt;/p&gt;

&lt;p&gt;спроси девопсов выкатили или нет&lt;/p&gt;

&lt;p&gt;и еще foo надо не 42 а 41 :)&lt;/p&gt;

&lt;p&gt;по ходу да&lt;/p&gt;

&lt;p&gt;или не :)&lt;/p&gt;

&lt;p&gt;а да&lt;/p&gt;

&lt;p&gt;мы так тестировали работало :)&lt;/p&gt;

&lt;p&gt;на пре-проде работало помню&lt;/p&gt;

&lt;p&gt;и без двоеточий передай&lt;/p&gt;

&lt;p&gt;так заработает :)&lt;/p&gt;

&lt;p&gt;Я смотрю на это и думаю: ладно, есть люди, которые думают вслух. Им легче писать
и проговаривать про себя, чтобы что-то вспомнить. Бывает. С этим можно
смириться.&lt;/p&gt;

&lt;p&gt;Однако в конце этого выхлопа я ожидаю вердикт: какой запрос все-таки
передать. Но этого не происходит: собеседник решил, что уже помог. Приходится
идти по списку сообщений и применять каждое утверждение (“по ходу да”), а
возможно, откатывать (“или не”).&lt;/p&gt;

&lt;p&gt;Что тут сказать? Других мы не исправим, а вот себя исправить можно. Не
вываливайте на собеседника поток сознания, а если это имело место, подведите
итог. Достаточно смотаться к первому сообщению и коротко на него ответить.&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Sep 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/message-storm/</link>
        <guid isPermaLink="true">https://grishaev.me/message-storm/</guid>
        
        <category>life</category>
        
        
      </item>
    
      <item>
        <title>Интерфейс музыкальных сервисов</title>
        <description>&lt;p&gt;Не знаю, как так вышло, но сегодня ни один — буквально ни один — музыкальный
сервис не может сделать хороший интерфейс. Ни Гугл, ни Яндекс, ни кто бы то ни
было. Не помогают ни миллионы денег, которые сервисы гребут за подписку, ни
дизайнеры за 400 тыщщ долларов в год.&lt;/p&gt;

&lt;p&gt;Яндекс-музыка уже давно стала мемом а-ля Medium: хорошее начинание превратилось
в музей багов. Без преувеличения можно сказать, что каждый квадратный сантиметр
ее дизайна несет бред. Гугл со своей Музыкой не лучше: там все прыгает,
переключается, показывает выпадашки.&lt;/p&gt;

&lt;p&gt;Прикладываю картинки. Слушаю музыку из мультика, вроде бы все в порядке. Но
что-то нажал — открылось то же самое, но в другом лейауте. Почему? Без
понятия. Как вернуться обратно? Тоже без понятия.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/yt-music-ui/1.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/yt-music-ui/2.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Снизу без конца вылазит нотификашка, что контент для детей не доступен в
мини-плеере. Предлагает куда-то тапнуть, чтобы вернуться. О чем речь вообще?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/yt-music-ui/3.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;И разумеется, сервису не хватает места. Даже на 4к-мониторе дизайнер не может
все уместить. Треки приходят с сервера пачками по 20 штук, нужно проматывать
страницу, чтобы они подгрузились, иначе поиск на странице не работает.&lt;/p&gt;

&lt;p&gt;Ради интереса сравните с Винампом: на ЭЛТ-мониторе в разрешении 800x600 он
занимал только часть экрана. Там было все: кнопки, перемотка, плейлист,
эквалайзер. Можно было поставить рядом Total Commander, и места хватало на две
программы.&lt;/p&gt;

&lt;p&gt;Умели же люди делать плеер для монитора 800x600! А сегодня это сродни навыку
писать на ассемблере.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/yt-music-ui/4.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Секрет-то на самом деле простой. Я бы выдал дизайнерам ЭЛТ-мониторы и сказал:
все должно помещаться на экране. За каждую выпадашку этим монитором тебя будут
бить по голове. И тогда бы все наладилось — я гарантирую это (с).&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Sep 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/yt-music-ui/</link>
        <guid isPermaLink="true">https://grishaev.me/yt-music-ui/</guid>
        
        <category>ui</category>
        
        <category>youtube</category>
        
        
      </item>
    
      <item>
        <title>Пробел и пауза</title>
        <description>&lt;p&gt;Как-то давно я писал об ошибке в интерфейсе Ютуба. В нем клавиша “пробел”
означает не паузу, а действие по умолчанию для текущего виджета. По умолчанию
текущий виджет – экран, но если кликнуть по кнопке субтитров или громкости,
текущим станет другой виджет, и пробел тоже будет делать что-то другое.&lt;/p&gt;

&lt;p&gt;Сценарии я тоже описывал: посадил ребенка смотреть мультик, объяснил, что пробел
– это пауза. Но в последний момент поправил звук, и фокус остался на виджете
громкости. Ребенок жмет пробел – пропадает звук. То же самое с субтитрами:
усадил пожилого родственника, все объяснил и перед уходом отключил субтитры,
чтобы не загораживали экран. Родственник хочет паузу, жмет пробел и в результате
включает субчики.&lt;/p&gt;

&lt;p&gt;Ту же самую херню затащил Яндекс в свою Музыку. Играет трек, мне нравится, жму
сердечко. Потом хочу поставить паузу, жму пробел – трек играет, и написано
“удалено из избранного”. Оказалось, сердечко – это отдельный виджет, и теперь
когда фокус на нем, он добавляет и удаляет из избранного. То же самое с другими
кнопками и панелями.&lt;/p&gt;

&lt;p&gt;В общем-то, критиковать тут не за что: ребята стащили чужой подход вместе с
багами. В больших компаниях это безопасная стратегия: повторяй за гигантом, и
вопросов к тебе не будет. Касается не только менеджеров, но и разработчиков:
фраза “как в Гугле” всегда спасет твою задницу.&lt;/p&gt;

&lt;p&gt;И все-таки: если кто-то из читателей связан с Яндексом, будьте добры, передайте
им, что у пробела должна быть строго одна функция.&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Sep 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/youtube-pause/</link>
        <guid isPermaLink="true">https://grishaev.me/youtube-pause/</guid>
        
        <category>ui</category>
        
        <category>yandex</category>
        
        <category>pause</category>
        
        
      </item>
    
      <item>
        <title>Зависимости S3</title>
        <description>&lt;p&gt;Число для справки: сколько зависимостей нужно, чтобы сделать запрос к S3? Вот:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;software/amazon/awssdk/s3/2.33.1/s3-2.33.1.pom
software/amazon/awssdk/services/2.33.1/services-2.33.1.pom
software/amazon/awssdk/aws-sdk-java-pom/2.33.1/aws-sdk-java-pom-2.33.1.pom
software/amazon/awssdk/bom-internal/2.33.1/bom-internal-2.33.1.pom
software/amazon/awssdk/aws-xml-protocol/2.33.1/aws-xml-protocol-2.33.1.pom
software/amazon/awssdk/http-auth/2.33.1/http-auth-2.33.1.pom
software/amazon/awssdk/http-auth-aws/2.33.1/http-auth-aws-2.33.1.pom
software/amazon/awssdk/profiles/2.33.1/profiles-2.33.1.pom
software/amazon/awssdk/protocol-core/2.33.1/protocol-core-2.33.1.pom
software/amazon/awssdk/arns/2.33.1/arns-2.33.1.pom
software/amazon/awssdk/retries-spi/2.33.1/retries-spi-2.33.1.pom
software/amazon/awssdk/checksums/2.33.1/checksums-2.33.1.pom
software/amazon/awssdk/checksums-spi/2.33.1/checksums-spi-2.33.1.pom
software/amazon/awssdk/identity-spi/2.33.1/identity-spi-2.33.1.pom
software/amazon/awssdk/http-auth-spi/2.33.1/http-auth-spi-2.33.1.pom
software/amazon/awssdk/crt-core/2.33.1/crt-core-2.33.1.pom
software/amazon/awssdk/protocols/2.33.1/protocols-2.33.1.pom
software/amazon/awssdk/core/2.33.1/core-2.33.1.pom
software/amazon/awssdk/regions/2.33.1/regions-2.33.1.pom
software/amazon/awssdk/netty-nio-client/2.33.1/netty-nio-client-2.33.1.pom
software/amazon/awssdk/annotations/2.33.1/annotations-2.33.1.pom
software/amazon/awssdk/apache-client/2.33.1/apache-client-2.33.1.pom
software/amazon/awssdk/endpoints-spi/2.33.1/endpoints-spi-2.33.1.pom
software/amazon/awssdk/json-utils/2.33.1/json-utils-2.33.1.pom
software/amazon/awssdk/utils/2.33.1/utils-2.33.1.pom
software/amazon/awssdk/aws-core/2.33.1/aws-core-2.33.1.pom
software/amazon/awssdk/auth/2.33.1/auth-2.33.1.pom
software/amazon/awssdk/metrics-spi/2.33.1/metrics-spi-2.33.1.pom
software/amazon/awssdk/http-client-spi/2.33.1/http-client-spi-2.33.1.pom
software/amazon/awssdk/sdk-core/2.33.1/sdk-core-2.33.1.pom
software/amazon/awssdk/http-clients/2.33.1/http-clients-2.33.1.pom
io/netty/netty-codec/4.1.124.Final/netty-codec-4.1.124.Final.pom
io/netty/netty-transport/4.1.124.Final/netty-transport-4.1.124.Final.pom
io/netty/netty-codec-http/4.1.124.Final/netty-codec-http-4.1.124.Final.pom
io/netty/netty-codec-http2/4.1.124.Final/netty-codec-http2-4.1.124.Final.pom
io/netty/netty-buffer/4.1.124.Final/netty-buffer-4.1.124.Final.pom
io/netty/netty-handler/4.1.124.Final/netty-handler-4.1.124.Final.pom
io/netty/netty-common/4.1.124.Final/netty-common-4.1.124.Final.pom
io/netty/netty-parent/4.1.124.Final/netty-parent-4.1.124.Final.pom
software/amazon/awssdk/aws-query-protocol/2.33.1/aws-query-protocol-2.33.1.pom
io/netty/netty-resolver/4.1.124.Final/netty-resolver-4.1.124.Final.pom
io/netty/netty-transport-classes-epoll/4.1.124.Final/netty-transport-classes-epoll-4.1.124.Final.pom
software/amazon/awssdk/third-party-jackson-core/2.33.1/third-party-jackson-core-2.33.1.pom
software/amazon/awssdk/http-auth-aws-eventstream/2.33.1/http-auth-aws-eventstream-2.33.1.pom
software/amazon/awssdk/retries/2.33.1/retries-2.33.1.pom
software/amazon/awssdk/third-party/2.33.1/third-party-2.33.1.pom
io/netty/netty-transport-native-unix-common/4.1.124.Final/netty-transport-native-unix-common-4.1.124.Final.pom
io/netty/netty-codec/4.1.124.Final/netty-codec-4.1.124.Final.jar
io/netty/netty-common/4.1.124.Final/netty-common-4.1.124.Final.jar
io/netty/netty-transport-classes-epoll/4.1.124.Final/netty-transport-classes-epoll-4.1.124.Final.jar
io/netty/netty-codec-http2/4.1.124.Final/netty-codec-http2-4.1.124.Final.jar
io/netty/netty-buffer/4.1.124.Final/netty-buffer-4.1.124.Final.jar
io/netty/netty-handler/4.1.124.Final/netty-handler-4.1.124.Final.jar
software/amazon/awssdk/checksums-spi/2.33.1/checksums-spi-2.33.1.jar
software/amazon/awssdk/profiles/2.33.1/profiles-2.33.1.jar
software/amazon/awssdk/aws-xml-protocol/2.33.1/aws-xml-protocol-2.33.1.jar
software/amazon/awssdk/aws-query-protocol/2.33.1/aws-query-protocol-2.33.1.jar
software/amazon/awssdk/third-party-jackson-core/2.33.1/third-party-jackson-core-2.33.1.jar
software/amazon/awssdk/http-auth/2.33.1/http-auth-2.33.1.jar
software/amazon/awssdk/apache-client/2.33.1/apache-client-2.33.1.jar
software/amazon/awssdk/retries-spi/2.33.1/retries-spi-2.33.1.jar
io/netty/netty-transport/4.1.124.Final/netty-transport-4.1.124.Final.jar
software/amazon/awssdk/endpoints-spi/2.33.1/endpoints-spi-2.33.1.jar
io/netty/netty-transport-native-unix-common/4.1.124.Final/netty-transport-native-unix-common-4.1.124.Final.jar
software/amazon/awssdk/crt-core/2.33.1/crt-core-2.33.1.jar
io/netty/netty-codec-http/4.1.124.Final/netty-codec-http-4.1.124.Final.jar
software/amazon/awssdk/http-auth-aws-eventstream/2.33.1/http-auth-aws-eventstream-2.33.1.jar
software/amazon/awssdk/auth/2.33.1/auth-2.33.1.jar
software/amazon/awssdk/http-client-spi/2.33.1/http-client-spi-2.33.1.jar
io/netty/netty-resolver/4.1.124.Final/netty-resolver-4.1.124.Final.jar
software/amazon/awssdk/metrics-spi/2.33.1/metrics-spi-2.33.1.jar
software/amazon/awssdk/arns/2.33.1/arns-2.33.1.jar
software/amazon/awssdk/json-utils/2.33.1/json-utils-2.33.1.jar
software/amazon/awssdk/identity-spi/2.33.1/identity-spi-2.33.1.jar
software/amazon/awssdk/regions/2.33.1/regions-2.33.1.jar
software/amazon/awssdk/aws-core/2.33.1/aws-core-2.33.1.jar
software/amazon/awssdk/sdk-core/2.33.1/sdk-core-2.33.1.jar
software/amazon/awssdk/protocol-core/2.33.1/protocol-core-2.33.1.jar
software/amazon/awssdk/checksums/2.33.1/checksums-2.33.1.jar
software/amazon/awssdk/http-auth-aws/2.33.1/http-auth-aws-2.33.1.jar
software/amazon/awssdk/retries/2.33.1/retries-2.33.1.jar
software/amazon/awssdk/http-auth-spi/2.33.1/http-auth-spi-2.33.1.jar
software/amazon/awssdk/netty-nio-client/2.33.1/netty-nio-client-2.33.1.jar
software/amazon/awssdk/annotations/2.33.1/annotations-2.33.1.jar
software/amazon/awssdk/s3/2.33.1/s3-2.33.1.jar
software/amazon/awssdk/utils/2.33.1/utils-2.33.1.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 22 Sep 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/http-request-aws/</link>
        <guid isPermaLink="true">https://grishaev.me/http-request-aws/</guid>
        
        <category>programming</category>
        
        <category>aws</category>
        
        <category>http</category>
        
        
      </item>
    
      <item>
        <title>New library: PG.bin</title>
        <description>
&lt;p&gt;&lt;a href=&quot;https://github.com/igrishaev/pg-bin&quot;&gt;PG.bin is a library&lt;/a&gt; to parse Postgres COPY dumps made in binary format.&lt;/p&gt;

&lt;p&gt;Postgres has a great API to transfer data into and out from a database called
COPY. What is special about it is that it supports three different formats: CSV,
text and binary. Both CSV and text are trivial: values are passed using their
text representation. Only quoting rules and separating characters differ.&lt;/p&gt;

&lt;p&gt;Binary format is special in that direction that values are not text. They’re
passed exactly how they’re stored in Postgres. Thus, binary format is more
compact: it’s 30% less in size than CSV or text. The same applies to
performance: COPY-ing a binary data back and forth takes about 15-25% less time.&lt;/p&gt;

&lt;p&gt;To parse a binary dump, one must know its structure. This is what the library
does: it knows how to parse such dumps. It supports most of the built-in
Postgres types including JSON(b). The API is simple an extensible.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Add this to your project:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;;; lein&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com.github.igrishaev/pg-bin&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; deps&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com.github.igrishaev/pg-bin&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:mvn/version&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Let’s prepare a binary dump as follows:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_01&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_02&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_03&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_04&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_05&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_06&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_07&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_08&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_09&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timetz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_11&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_12&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_13&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamptz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_14&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_15&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_16&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_17&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_18&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;numeric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_19&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f_20&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;decimal&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;654&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'world'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'10:42:35'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'10:42:35+0030'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'2025-11-30'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'2025-11-30 10:42:35'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'2025-11-30 10:42:35.123567+0030'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;DEADBEEF'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'{&quot;foo&quot;: [1, 2, 3, {&quot;kek&quot;: [true, false, null]}]}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'{&quot;foo&quot;: [1, 2, 3, {&quot;kek&quot;: [true, false, null]}]}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'4bda6037-1c37-4051-9898-13b82f1bd712'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'123456.123456'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'123999.999100500'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;copy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/Users/ivan/dump.bin'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;binary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s peek what’s inside:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xxd -d /Users/ivan/dump.bin

00000000: 5047 434f 5059 0aff 0d0a 0000 0000 0000  PGCOPY..........
00000016: 0000 0000 1400 0000 0200 0100 0000 0400  ................
00000032: 0000 0200 0000 0800 0000 0000 0000 0300  ................
00000048: 0000 0101 0000 0004 42f6 e979 0000 0008  ........B..y....
00000064: 4084 7291 6872 b021 0000 0005 6865 6c6c  @.r.hr.!....hell
00000080: 6f00 0000 0577 6f72 6c64 0000 0008 0000  o....world......
00000096: 0008 fa0e 9cc0 0000 000c 0000 0008 fa0e  ................
00000112: 9cc0 ffff f8f8 0000 0004 0000 24f9 0000  ............$...
00000128: 0008 0002 e7cc 4a0a fcc0 0000 0008 0002  ......J.........
00000144: e7cb dec3 0d6f 0000 0004 dead beef 0000  .....o..........
00000160: 0030 7b22 666f 6f22 3a20 5b31 2c20 322c  .0{&quot;foo&quot;: [1, 2,
00000176: 2033 2c20 7b22 6b65 6b22 3a20 5b74 7275   3, {&quot;kek&quot;: [tru
00000192: 652c 2066 616c 7365 2c20 6e75 6c6c 5d7d  e, false, null]}
00000208: 5d7d 0000 0031 017b 2266 6f6f 223a 205b  ]}...1.{&quot;foo&quot;: [
00000224: 312c 2032 2c20 332c 207b 226b 656b 223a  1, 2, 3, {&quot;kek&quot;:
00000240: 205b 7472 7565 2c20 6661 6c73 652c 206e   [true, false, n
00000256: 756c 6c5d 7d5d 7d00 0000 104b da60 371c  ull]}]}....K.`7.
00000272: 3740 5198 9813 b82f 1bd7 1200 0000 0e00  7@Q..../........
00000288: 0300 0100 0000 0300 0c0d 8004 ceff ffff  ................
00000304: ff00 0000 1000 0400 0100 0000 0900 0c0f  ................
00000320: 9f27 0700 32ff ff                        .'..2..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now the library comes into play:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some.ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clojure.java.io&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pg-bin.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;taggie.core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FIELDS&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:int2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:int4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:int8&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:boolean&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:float4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:float8&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:text&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:varchar&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:time&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:timetz&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:date&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:timestamp&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:timestamptz&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:bytea&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:jsonb&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:uuid&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:numeric&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:text&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy/parse&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/Users/ivan/dump.bin&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FIELDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;123.456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;654.321&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LocalTime&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10:42:35&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OffsetTime&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10:42:35+00:30&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LocalDate&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2025-11-30&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2025-11-30T10:42:35&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OffsetDateTime&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2025-11-30T10:12:35.123567Z&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;=bytes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-34&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-83&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-66&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{\&quot;foo\&quot;: [1, 2, 3, {\&quot;kek\&quot;: [true, false, null]}]}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{\&quot;foo\&quot;: [1, 2, 3, {\&quot;kek\&quot;: [true, false, null]}]}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4bda6037-1c37-4051-9898-13b82f1bd712&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;123456.123&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;123999.999100500&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here and below: I use &lt;a href=&quot;https://github.com/igrishaev/taggie&quot;&gt;Taggie&lt;/a&gt; to render complex values like date &amp;amp;
time, byte arrays and so on. Really useful!&lt;/p&gt;

&lt;p&gt;This is what is going on here: we parse a source pointing to a dump using the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse&lt;/code&gt; function. A source might be a file, a byte array, an input stream and so
on – anything that can be coerced to an input stream using the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clojure.java.io/input-stream&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Binary files produced by Postgres don’t know their structure. Unfortunately,
there is no information about types, only data. One should help the library
traverse a binary dump by specifying a vector of types. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIELDS&lt;/code&gt; variable
declares the structure of the file. See below what types are supported.&lt;/p&gt;

&lt;h2 id=&quot;api&quot;&gt;API&lt;/h2&gt;

&lt;p&gt;There are two functions to parse, namely:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg-bin.core/parse&lt;/code&gt; accepts any source and returns a vector of parsed
lines. This function is eager meaning it consumes the whole source and
accumulates lines in a vector.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg-bin.core/parse-seq&lt;/code&gt; accepts an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InputStream&lt;/code&gt; and returns a lazy sequence
of parsed lines. It must be called under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with-open&lt;/code&gt; macro as follows:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-open&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;io/input-stream&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/Users/ivan/dump.bin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy/parse-seq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FIELDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doseq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both functions accept a list of fields as the second argument.&lt;/p&gt;

&lt;h2 id=&quot;skipping-fields&quot;&gt;Skipping fields&lt;/h2&gt;

&lt;p&gt;When parsing, it’s likely that you don’t need all fields to be parsed. You may
keep only the leading ones:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy/parse&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DUMP_PATH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:int2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:int4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:int8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To skip fields located in the middle, use either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:skip&lt;/code&gt; or an underscore:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy/parse&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DUMP_PATH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:int2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:skip&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:_&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;raw-fields&quot;&gt;Raw fields&lt;/h2&gt;

&lt;p&gt;If, for any reason, you have a type in your dump that the library is not aware
about, or you’d like to examine its binary representation, specify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:raw&lt;/code&gt; or
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:bytes&lt;/code&gt;. Each value will be a byte array then. It’s up to you how to deal with
those bytes:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy/parse&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DUMP_PATH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:raw&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:raw&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;handling-json&quot;&gt;Handling JSON&lt;/h2&gt;

&lt;p&gt;Postgres is well-known for its vast JSON capabilities, and sometimes tables that
we dump have json(b) columns. Above, you saw that by default, they’re parsed as
plain strings. This is because there is no a built-in JSON parser in Java and I
don’t want to tie this library to a certain JSON implementation.&lt;/p&gt;

&lt;p&gt;But the library provides a number of macros to extend undelrying
multi-methods. With a line of code, you can enable parsing json(b) types with
Chesire, Jsonista, Clojure.data.json, Charred, and JSam. This is how to do it:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some.ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pg-bin.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pg-bin.json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json/set-cheshire&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; overrides multimethods&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy/parse&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DUMP_PATH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FIELDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:kek&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}]}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:kek&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}]}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set-cheshire&lt;/code&gt; macro extends multimethods assuming you have Cheshire
installed. Now the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse&lt;/code&gt; function, when facing json(b) types, will decode them
properly.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg-bin.json&lt;/code&gt; namespace provides the following macros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set-string&lt;/code&gt;: parse json(b) types as strings again;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set-cheshire&lt;/code&gt;: parse using Cheshire;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set-data-json&lt;/code&gt;: parse using clojure.data.json;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set-jsonista&lt;/code&gt;: parse using Jsonista;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set-charred&lt;/code&gt;: parse using Charred;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set-jsam&lt;/code&gt;: parse using JSam.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of them accept optional parameters that are passed into the underlying
parsing function.&lt;/p&gt;

&lt;p&gt;PG.Bin doesn’t introduce any JSON-related dependencies. Each macro assumes you
have added a required library into the classpath.&lt;/p&gt;

&lt;h2 id=&quot;metadata&quot;&gt;Metadata&lt;/h2&gt;

&lt;p&gt;Each parsed line tracks its length in bytes, offset from the beginning of a file
(or a stream) and a unique index:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy/parse&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DUMP_PATH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FIELDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:pg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:length&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;306&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:index&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:offset&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Knowing these values might help reading a dump by chunks.&lt;/p&gt;

&lt;h2 id=&quot;supported-types&quot;&gt;Supported types&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:raw :bytea :bytes&lt;/code&gt; for raw access and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bytea&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:skip :_ nil&lt;/code&gt; to skip a certain field&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:uuid&lt;/code&gt; to parse UUIDs&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:int2 :short :smallint :smallserial&lt;/code&gt; 2-byte integer (short)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:int4 :int :integer :oid :serial&lt;/code&gt; 4-byte integer (integer)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:int8 :bigint :long :bigserial&lt;/code&gt; 8-byte integer (long)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:numeric :decimal&lt;/code&gt; numeric type (becomes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BigDecimal&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:float4 :float :real&lt;/code&gt; 4-byte float (float)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:float8 :double :double-precision&lt;/code&gt; 8-byte float (double)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:boolean :bool&lt;/code&gt; boolean&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:text :varchar :enum :name :string&lt;/code&gt; text values&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:date&lt;/code&gt; becomes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.time.LocalDate&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:time :time-without-time-zone&lt;/code&gt; becomes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.time.LocalTime&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:timetz :time-with-time-zone&lt;/code&gt; becomes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.time.OffsetTime&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:timestamp :timestamp-without-time-zone&lt;/code&gt; becomes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.time.LocalDateTime&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:timestamptz :timestamp-with-time-zone&lt;/code&gt; becomes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.time.OffsetDateTime&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ping me for more types, if needed.&lt;/p&gt;

&lt;h2 id=&quot;on-writing&quot;&gt;On Writing&lt;/h2&gt;

&lt;p&gt;At the moment, the library only parses binary dumps. Writing them is possible
yet requires extra work. Ping me if you really need writing binary files.&lt;/p&gt;

&lt;h2 id=&quot;scenarios&quot;&gt;Scenarios&lt;/h2&gt;

&lt;p&gt;Why using this library ever? Imagine you have to fetch a mas-s-s-ive chunk of
rows from a database, say 2-3 million to build a report. That might be an issue:
you don’t want to saturate memory, neither you want to paginate using
LIMIT/OFFSET as it’s slow. A simple solution would be to dump the data you need
into a file and process it. You won’t keep the database constantly busy as
you’re working with a dump! Here is a small demo:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some.ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pg-bin.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pg-bin.json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make-copy-manager&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;
  Build an instance of CopyManager from a connection.
  &quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CopyManager&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CopyManager&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;jdbc/get-connection&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data-source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mgr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make-copy-manager&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;copy table_name(col1, col2...) to stdout with (format binary)&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; you can use a query without parameters as well&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;copy (select... from... where...) to stdout with (format binary)&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-open&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;io/output-stream&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/path/to/dump.bin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.copyOut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mgr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-open&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;io/input-stream&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/path/to/dump.bin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy/parse-seq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:int2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:text&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doseq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Above, we dump the data into a file and then process it. There is a way to
process lines on the fly using another thread. The second demo:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;jdbc/get-connection&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data-source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mgr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make-copy-manager&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;copy table_name(col1, col2...) to stdout with (format binary)&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PipedInputStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;started?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; a future to process the output&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-open&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; must close it afterward&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deliver&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;started?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; must report we have started&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy/parse-seq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:int2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:text&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doseq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; process on the fly&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; without touching the disk&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; ensure the future has started&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;started?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; drain down to the piped output stream&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-open&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PipedOutputStream&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.copyOut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mgr&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fut&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; wait for the future to complete&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 15 Sep 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/clj-pg-bin/</link>
        <guid isPermaLink="true">https://grishaev.me/clj-pg-bin/</guid>
        
        <category>programming</category>
        
        <category>clojure</category>
        
        <category>postgres</category>
        
        <category>binary</category>
        
        <category>copy</category>
        
        
      </item>
    
      <item>
        <title>Место работы</title>
        <description>&lt;p&gt;Я, кстати, придумал вот что: прошелся по всем профилям и убрал текущее место
работы. Оставил только vast fintech с описанием технологий — и довольно.&lt;/p&gt;

&lt;p&gt;Почему? Считаю, рекрутерам не нужно знать, где я работаю. Прошлые места смотрите
ради бога, а текущее вас не касается. Буду искать работу — созвонимся, и я все
расскажу. А пока держите от меня фигу с маслом.&lt;/p&gt;

&lt;p&gt;Есть и моральный аспект. Когда ведешь бложик, работа часто подкидывает темы — в
том числе основанные на противоречии, когда не согласен и хочешь
выговориться. Чтобы не бросать на кого-то тень, считаю правильным не раскрывать,
где работаешь.&lt;/p&gt;

&lt;p&gt;Когда-то я волновался о том, как выгляжу на Линкед-ине. Но когда в пятый раз
находишь работу по знакомству, это становится неважно.&lt;/p&gt;

&lt;p&gt;В целом я считаю излишним, когда о тебе знает каждый угол интернета. Еще давно я
удалился из всех соцсетей и ни разу не пожалел. Оставил только Гитхаб и
Линкед-ин: этих двух хватает, чтобы найти работу где угодно — однако им
необязательно знать все.&lt;/p&gt;
</description>
        <pubDate>Sat, 13 Sep 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/workplace/</link>
        <guid isPermaLink="true">https://grishaev.me/workplace/</guid>
        
        <category>life</category>
        
        <category>work</category>
        
        
      </item>
    
  </channel>
</rss>
