<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ivan Grishaev's blog</title>
    <description>Writing on programming, education, books and negotiations.
</description>
    <link>https://grishaev.me/</link>
    <atom:link href="https://grishaev.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 07 Apr 2023 19:04:56 +0000</pubDate>
    <lastBuildDate>Fri, 07 Apr 2023 19:04:56 +0000</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>Clojure + GraalVM framework for AWS Lambda</title>
        <description>
&lt;p&gt;&lt;a href=&quot;https://github.com/igrishaev/lambda&quot;&gt;Lambda&lt;/a&gt; is a small framework to run AWS Lambdas compiled with Native Image.&lt;/p&gt;

&lt;h3 id=&quot;motivation--benefits&quot;&gt;Motivation &amp;amp; Benefits&lt;/h3&gt;

&lt;p&gt;There are a lot of Lambda Clojure libraries so far: a &lt;a href=&quot;https://clojars.org/search?q=lambda&quot;&gt;quick search&lt;/a&gt; on
Clojars gives several screens of them. What is the point of making a new one?
Well, because none of the existing libraries covers my requirements, namely:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I want a framework free from any Java SDK, but pure Clojure only.&lt;/li&gt;
  &lt;li&gt;I want it to compile into a single binary file so no environment is needed.&lt;/li&gt;
  &lt;li&gt;The deployment process must be extremely simple.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As the result, &lt;em&gt;this&lt;/em&gt; framework:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Depends only on Http Kit and Cheshire to interact with AWS;&lt;/li&gt;
  &lt;li&gt;Provides an endless loop that consumes events from AWS and handles them. You
only submit a function that processes an event.&lt;/li&gt;
  &lt;li&gt;Provides a Ring middleware that turns HTTP events into a Ring handler. Thus,
you can easily serve HTTP requests with Ring stack.&lt;/li&gt;
  &lt;li&gt;Has a built-in logging facility.&lt;/li&gt;
  &lt;li&gt;Provides a bunch of Make commands to build a zipped bootstrap file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Leiningen/Boot:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[com.github.igrishaev/lambda &quot;0.1.1&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Clojure CLI/deps.edn:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;com.github.igrishaev/lambda {:mvn/version &quot;0.1.1&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;writing-your-lambda&quot;&gt;Writing Your Lambda&lt;/h3&gt;

&lt;h4 id=&quot;prepare-the-code&quot;&gt;Prepare The Code&lt;/h4&gt;

&lt;p&gt;Create a core module with the following code:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;demo.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lambda.log&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lambda.main&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:gen-class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log/infof&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Event is: %s&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;process-event&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:result&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;-main&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;main/run&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handler&lt;/code&gt; function takes a single argument which is a parsed Lambda
payload. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lambda.log&lt;/code&gt; namespace provides &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debugf&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;infof&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;errorf&lt;/code&gt;
macros for logging. In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-main&lt;/code&gt; function you start an endless cycle by
calling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;On each step of this cycle, the framework fetches a new event, processes it with
the passed handler and submits the result to AWS. Should the handler fail, it
catches an exception and reports it as well without interrupt the cycle. Thus,
you don’t need to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try/catch&lt;/code&gt; in your handler.&lt;/p&gt;

&lt;h4 id=&quot;compile-it&quot;&gt;Compile It&lt;/h4&gt;

&lt;p&gt;Once you have the code, compile it with GraalVM and Native image. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Makefile&lt;/code&gt;
of this repository has all the targets you need. You can borrow them with slight
changes. Here are the basic definitions:&lt;/p&gt;

&lt;div class=&quot;language-make highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;NI_TAG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ghcr.io/graalvm/native-image:22.2.0

&lt;span class=&quot;nv&quot;&gt;JAR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; target/uberjar/bootstrap.jar

&lt;span class=&quot;nv&quot;&gt;PWD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;NI_ARGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;--initialize-at-build-time&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;--report-unsupported-elements-at-runtime&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;--no-fallback&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-jar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;${JAR}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-J-Dfile&lt;/span&gt;.encoding&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;UTF-8 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;--enable-http&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;--enable-https&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt;:+PrintClassInitialization &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt;:+ReportExceptionStackTraces &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt;:Log&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;registerResource &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt;:Name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bootstrap

&lt;span class=&quot;nl&quot;&gt;uberjar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	lein &amp;lt;...&amp;gt; uberjar

&lt;span class=&quot;nl&quot;&gt;bootstrap-zip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	zip &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; bootstrap.zip bootstrap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pay attention to the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ensure the jar name is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bootstrap.jar&lt;/code&gt; in your project. This might be
done by setting these in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project.clj&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:target-path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;target/uberjar&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:uberjar-name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bootstrap.jar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NI_ARGS&lt;/code&gt; might be extended with resources, e.g. if you want an EDN config
file baked into the binary file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then compile the project either on Linux natively or with Docker.&lt;/p&gt;

&lt;h5 id=&quot;linux-local-build&quot;&gt;Linux (Local Build)&lt;/h5&gt;

&lt;p&gt;On Linux, add the following Make targets:&lt;/p&gt;

&lt;div class=&quot;language-make highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;graal-build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	native-image &lt;span class=&quot;nv&quot;&gt;${NI_ARGS}&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;build-binary-local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;${JAR} graal-build&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;bootstrap-local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uberjar build-binary-local bootstrap-zip&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make bootstrap-local&lt;/code&gt;. You’ll get a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bootstrap.zip&lt;/code&gt; with a single binary file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bootstrap&lt;/code&gt; inside.&lt;/p&gt;

&lt;h5 id=&quot;on-macos-docker&quot;&gt;On MacOS (Docker)&lt;/h5&gt;

&lt;p&gt;On MacOS, add these targets:&lt;/p&gt;

&lt;div class=&quot;language-make highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;build-binary-docker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;${JAR}&lt;/span&gt;
	docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;${PWD}&lt;/span&gt;:/build &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; /build &lt;span class=&quot;nv&quot;&gt;${NI_TAG}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;${NI_ARGS}&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;bootstrap-docker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uberjar build-binary-docker bootstrap-zip&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make bootstrap-docker&lt;/code&gt; to get the same file but compiled in a Docker
image.&lt;/p&gt;

&lt;h4 id=&quot;create-a-lambda-in-aws&quot;&gt;Create a Lambda in AWS&lt;/h4&gt;

&lt;p&gt;Create a Lambda function in AWS. For the runtime, choose a custom one called
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;provided.al2&lt;/code&gt; which is based on Amazon Linux 2. The architecture (x86_64/arm64)
should match the architecture of your machine. For example, as I build the
project on Mac M1, I choose arm64.&lt;/p&gt;

&lt;h3 id=&quot;deploy-and-test-it&quot;&gt;Deploy and Test It&lt;/h3&gt;

&lt;p&gt;Upload the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bootstrap.zip&lt;/code&gt; file from your machine to the lambda. With no
compression, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bootstrap&lt;/code&gt; file takes 25 megabytes. In zip, it’s about 9
megabytes so you can skip uploading it to S3 first.&lt;/p&gt;

&lt;p&gt;Test you Lambda in the console to ensure it works.&lt;/p&gt;

&lt;h3 id=&quot;ring-handler-for-http-requests&quot;&gt;Ring Handler for HTTP Requests&lt;/h3&gt;

&lt;p&gt;The framework can turn HTTP events into Ring maps. There is a middleware that
transforms a your handler into a Ring handler. In the example below, pay
attention to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ring/wrap-ring-event&lt;/code&gt; middleware on top of the stack. It’s
responsible for turning an event map into Ring and back. Right after
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ring/wrap-ring-event&lt;/code&gt;, feel free to add any Ring middleware for POST
parameters, JSON, and so on.&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;demo.core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lambda.ring&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lambda.main&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:as&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ring.middleware.json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:refer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrap-json-body&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrap-json-response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ring.middleware.keyword-params&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:refer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrap-keyword-params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ring.middleware.params&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:refer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrap-params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:gen-class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:keys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request-method&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:status&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:body&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:some&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}}}))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn-event&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wrap-keyword-params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wrap-params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wrap-json-body&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:keywords?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wrap-json-response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ring/wrap-ring-event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;-main&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;main/run&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn-event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sharing-the-state-between-events&quot;&gt;Sharing the State Between Events&lt;/h3&gt;

&lt;p&gt;In AWS, a Lambda can process several events if they happen in series. Thus, it’s
useful to preserve the state between the handler calls. A state can be a config
map read from a resource or an open connection to some resource.&lt;/p&gt;

&lt;p&gt;An easy way to share the state is to close your handler function over some
variables. In this case, the handler is not a plain function but a function that
returns a function:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process-event&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;jdbc/with-transaction&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;jdbc/insert!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;jdbc/delete!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make-handler&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;config.edn&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io/resource&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aero/read-config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;jdbc/get-connection&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:db&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;process-event&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;-main&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make-handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;main/run&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make-handler&lt;/code&gt; call builds a function closed over the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db&lt;/code&gt; variable which
holds a persistent connection to a database. Under the hood, it calls the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process-event&lt;/code&gt; function which accepts the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db&lt;/code&gt; as an argument. The connection
stays persistent and won’t be created from scratch every time you process an
event. This, of course, applies only to a case when you have multiple events
served in series.&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Apr 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/en/lambda/</link>
        <guid isPermaLink="true">https://grishaev.me/en/lambda/</guid>
        
        <category>clojure</category>
        
        <category>programming</category>
        
        <category>aws</category>
        
        <category>lambda</category>
        
        <category>graalvm</category>
        
        
      </item>
    
      <item>
        <title>Заменят ли ИИ разработчиков и почему? Если да, то на каких задачах?</title>
        <description>&lt;p&gt;&lt;em&gt;Меня попросили ответить на вопросы из заголовка. Думал, будет абзац, но как обычно вышла простыня. Впрочем, мысли об ИИ были уже давно, и это отличный повод собрать их в статью.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Что ж, если коротко, то нет: ИИ, который у нас сегодня, не заменит программистов. Волноваться незачем, продолжайте работу. Если вы учитесь на программиста и испытываете тревогу, успокойтесь и продолжайте. Никакие чаты и боты программистам не угрожают. А также журналистам, учителям и вообще — любым профессионалам своего дела.&lt;/p&gt;

&lt;p&gt;Да, про ИИ говорят и пишут из каждого утюга. Но важно знать, что информационная волна всегда сильнее повода, который ее вызвал. Изданиям нужен трафик, а люди склонны экстраполировать: если сегодня бот написал Тетрис, то через год он сделает Киберпанк. Увы, это не так.&lt;/p&gt;

&lt;p&gt;Причина моего скепсиса в том, что все помощники и боты слабы в деталях. У меня есть колонка Яндекса, она прекрасно играет музыку и говорит погоду. Но ее крайне легко ввести в ступор. Например, играет песня, и я хочу послушать альбом, которому она принадлежит (пусть даже первый, если их несколько). Однако этой функции не предусмотрено: какую бы фразу я ни высказал — перейди к альбому, включи альбом, из какого это альбома, — Алиса не понимает. Хотя в мобильном приложении это одна кнопка “show album”.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Похожее творится с чатами банков: Олегом, Салютом, Модуль-банком. Спрашиваешь про перевод денег с определенными — и очень важными —  условиями. Бот выделяет ключевые слова (“тариф”, “перевод”, “сроки”) и кидает ссылку, где указана минимальная публичная информация. Словно я не посмотрел там, перед тем как спрашивать.&lt;/p&gt;

&lt;p&gt;В айти-индустрии уже не раз заявляли о том, что программистов вот-вот что-то заменит. Примером служит проект Copilot. Говорилось, что он будет писать код за вас, а программист только руководит процессом. Теперь когда Copilot ушел из повестки, видно, что этих целей он не достиг. Отзывы о нем смешанные: общая тональность такова, что он скорее помогает, но за ним нужно проверять. По моим наблюдением, программист с Copilot не имеет преимуществ перед коллегой без Copilot.&lt;/p&gt;

&lt;p&gt;Популярный сегодня Chat GPT следует понимать как продвинутый Гугл. Если раньше мы вводили запрос, а потом переходили к странице, то сейчас этот шаг упразднен: ответ появляется в том же окне. Это важно, потому что, отпустив пользователя, Гугл теряет его (даже с учетом кук, браузера и аналитики). В случае с Chat GPT пользователь остается на одном сайте и выдает больше информации: род деятельности, интересы, сексуальные предпочтения, семейные и профессиональные тайны.&lt;/p&gt;

&lt;p&gt;Мы много слышали, что Chat GPT решает задачи на программирование. Обыватель считает, что если Chat GPT выдал какой-то код, то задача решена: запустил его и радуешься. Это совершенно не так. Кто работает с кодом, знает, что нельзя встроить чужой код в программу без обработки. Это как пойти в магазин и купить кусок стены, идеально вырезанный под нужный контур и с поклеенными обоями. Так не бывает.&lt;/p&gt;

&lt;p&gt;Предоложим, вы попросили бота написать HTTP-запрос с чтением JSON. Скорее всего, это будет популярный ответ со StackOverflow или из README.md какой-то библиотеки. Уверен, он даже будет работать. Проблема в том, что в каждом проекте с HTTP работают по-разному. Это могут быть разные библиотеки: асинхронные и блокирующие; по-разному обрабатывают ошибки; некоторым HTTP-клиентам нужно состояние, например, пул соединений. Бот ничего не знает об этих вещах, а попытка объяснить ему займет больше времени, чем сделать самому.&lt;/p&gt;

&lt;p&gt;Кроме того, если проект более-менее серьезный, в нем будут линтеры, тесты и прочие санитарные нормы. Как вы объясните боту, что код не проходит линтер из-за неправильных отступов или переменных? Сможет ли бот написать тест с локальным HTTP-сервером и добиться, чтобы он проходили на CI? Мне это кажется маловероятным.&lt;/p&gt;

&lt;p&gt;Каждый, кто пользовался Chat GPT, знаком с явлением “дрифт”. Это когда бот “поплыл”, то есть забыл постановку задачи и стал сочинять. Причина в том, что контекст бота ограничен, при этом контекст работает по принципу “первым пришло — первым ушло”, то есть старые данные забываются. А это, между прочим, главная черта разработчика — понимать и помнить кодовую базу. Насколько я знаю, нельзя скормить боту большой проект и на базе этого что-то улучшить. Пока что Chat GPT работает ситуативно.&lt;/p&gt;

&lt;p&gt;Допускаю, что в будущем в Chat GPT можно будет арендовать часть инфраструктуры, обученную конкретно под вас. Но и к этой модели много вопросов. OpenAI — американская частная фирма, ее код закрыт. Тут и санкции, и вопрос доверия, и этика — хочешь ли ты, чтобы твой проект использовали для обучения чего-то другого.&lt;/p&gt;

&lt;p&gt;Чего точно не сможет сделать ИИ, так это сменить повестку в команде. Предположим, вы скормили боту проект и он отвечает релевантно. Проблема в том, что бот считает входные данные нормой и отталкивается от них. Поэтому, если ваша ORM производит сотни лишних запросов, решения бота будут страдать тем же. Если нет тестов — их и не будет. Если нет линтеров, бот повторит ошибки, накопленные предыдущими программистами. Из мусора можно получить только мусор. В то время как на практике у этой проблемы простое решение — пригласить программиста со стороны со свежим взглядом.&lt;/p&gt;

&lt;p&gt;Обязательно случится так, что какой-нибудь джуниор не найдет работу, потому что босс зарегистрировался в Chat GPT. Будут твиты, посты на Хакер-Ньюз и прочих площадках. Как сказано в начале статьи, люди обожают экстраполировать — писать комментарии о том, что еще вот-вот и… Но жизнь будет идти своим чередом: тысячи программистов устроятся на работу и построят карьеру.&lt;/p&gt;

&lt;p&gt;В программировании важна точность. Линтеры, CI, анализаторы и прочие утилиты хороши тем, что они точны. Запустите их с интервалом в год, и результат не изменится. А ручаться за чат-бота не может никто. Это ненадежно: помощник, который не ошибается почти никогда похож на партнера, который честен почти всегда. В таких категориях важна полнота: либо да, либо нет. Но это вопрос личных предпочтений.&lt;/p&gt;

&lt;p&gt;Конечно, Chat GPT заберет часть работы у людей, не это не будет массово. Подобно тому, как фотография не заменила живопись, а телевидение — театр, боты не вытеснят ручной труд. Мир расширится, и в нем хватит места и тому, и другому.&lt;/p&gt;

&lt;p&gt;В первую очередь изменения коснутся тех, кто пишет низкопробный текст. Например, любовные романы — на развалах их продают чемоданами, и я удивлен, почему до сих пор их не пишет программа. Вроде тех, что составляет судоку: вжух, и свежий номер готов. Сюда же относятся порно-рассказы, мусорные статьи о фитнесе, образе жизни и психологии — как правило, их пишут ради рекламы или просто чтобы на сайте был какой-то текст.&lt;/p&gt;

&lt;p&gt;Однако те, кто гонят халтуру, прекрасно это понимают и при случае переходят на другую халтуру, пока что еще не автоматизированную.&lt;/p&gt;

&lt;p&gt;Но вы же не гоните халтуру? Поэтому нечего волноваться! Наращивайте профессионализм, инвестируйсте в себя, а не в “интеллектуальных” помощников. Делайте то, что вам интересно, изучайте, дерзайте, и никакие боты вам не страшны.&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Apr 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/ai/</link>
        <guid isPermaLink="true">https://grishaev.me/ai/</guid>
        
        <category>life</category>
        
        <category>ai</category>
        
        
      </item>
    
      <item>
        <title>Такой же</title>
        <description>&lt;p&gt;Наверное, вы слышали вопрос о корабле, заданный еще до нашей эры. Если постепенно заменить в корабле все детали, будет ли это тот самый корабль?&lt;/p&gt;

&lt;p&gt;Проблема в том, что на вопрос отвечают, не разобравшись с определениями. Если не договориться, что значит “тот же самый”, можно спорить весь день, имея в виду не то, о чем думает оппонент.&lt;/p&gt;

&lt;p&gt;В программировании эта проблема известна: равенство не означает “то же самость”. В современных языках есть отдельные операторы для сравнения указателей и сравнения значений. Хорошие языки пытаются избежать путаницы и сводят две эти вещи к одной. Например, если коллекции неизменяемы, то их можно сравнить в лоб, не заботясь о ссылках. Кроме того, хеш неизменяемой коллекции рассчитывается один раз при создании. Из-за этого сравнение не делает полный обход, а сводится к равенству двух чисел.&lt;/p&gt;

&lt;p&gt;Еще один довод в адрес “то же самости” — это мы сами. Тело человека обновляется постоянно. Скелет меняется за три года, а у кожи, волос и ногтей срок исчисляется днями. Жидкости поступают и выходят.&lt;/p&gt;

&lt;p&gt;Мы сегодня и мы три года назад — это разный набор атомов. Тот человек, что изображен в паспорте, уже сотни раз обновил каждую клетку организма. Однако ни у кого нет сомнений, что человек в паспорте и вы — один и тот же. Просто потому что так удобней.&lt;/p&gt;

&lt;p&gt;Поэтому и корабль, в котором обновили все доски, тот же самый. Если, конечно, понимать под “тем же самым” то, что удобно большинству.&lt;/p&gt;

&lt;p&gt;Забавный эпиграф к библиотеке re-frame8:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This, milord, is my family’s axe. We have owned it for almost nine hundred years, see. Of course, sometimes it needed a new blade. And sometimes it has required a new handle, new designs on the metalwork, a little refreshing of the ornamentation … but is this not the nine hundred-year-old axe of my family? And because it has changed gently over time, it is still a pretty good axe, y’know. Pretty good.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Вкратце: господин, этот топор служит нашей семье девять столетий. Иногда ему меняли рукоять, а иногда клинок. Но поскольку это делали постепенно, это все тот же топор.&lt;/p&gt;

&lt;p&gt;В этом и проявляется забавное свойство “той  же самости”: если ее размазать по времени, предмет будет тем же самым (менять ручку и клинок раз в сто лет). Если потерять топор и заказать новый, это будет другой топор.&lt;/p&gt;

&lt;p&gt;Принцип плавных изменений очень полезен. Например, ничто не бесит так сильно, как внезапное обновление интерфейса. Хорошо, когда его плавно меняют в нужном русле.&lt;/p&gt;

&lt;p&gt;Команда может саботировать новые правила, если их слишком много. Внедряйте по одному с интервалом в месяц.&lt;/p&gt;

&lt;p&gt;Добавить линтер в огромную кодовую базу кому-то покажется невозможным. А нужно всего ничего: задать список путей, которые подвергаются линтингу, и плавно его наращивать.&lt;/p&gt;

&lt;p&gt;В завершение — пазл, который висит у меня на стене (Яцек Йерка):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/same/1.jpeg&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/the-same/</link>
        <guid isPermaLink="true">https://grishaev.me/the-same/</guid>
        
        <category>life</category>
        
        
      </item>
    
      <item>
        <title>Письма Notion</title>
        <description>&lt;p&gt;К сожалению, в компании, где я работаю, пользуются Ноушеном. Это сплошная боль, потому что к Ноушену у меня нулевая терпимость — бесит каждый элемент, каждая кнопка и анимация. Постепенно собираю коллекцию их косяков, чтобы запостить разом, но сегодня не удержался от нового прокола.&lt;/p&gt;

&lt;p&gt;Итак, я написал текст в Ноушене и попросил руководство обсудить. На следующий день открываю почту на телефоне и вижу штук 20 уведомлений от Ноушена: пошли комментарии. Тыкаю, чтобы прочитать. А письма, сюрприз, выглядят так:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/notion/1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Не знаю какой это кегль  — второй или третий — но прочесть эти письма физически невозможно. Нужно зрение орла или увеличительное стекло. Словом, с телефона я ничего не прочел и смог это сделать только когда сел за комп с 4к-монитором.&lt;/p&gt;

&lt;p&gt;И вот опять, смотрите: сапожник без сапог. Как мы помним, Дропбокс, программа для работы с файлами, &lt;a href=&quot;/design-dropbox/&quot;&gt;не умеет показывать файлы&lt;/a&gt;. А Ноушен, программа для текста, не может показать текст. Разработчики, вы вообще своим Ноушеном пользуетесь? Если бы я там работал, то в первый же день открыл бы тикет и долбил им каждый спринт — ваши сраные письма не читаются. Поправьте стили. Высылайте plain text вместо HTML, он мне нахрен не сдался. Просто чтобы можно было прочесть текст.&lt;/p&gt;

&lt;p&gt;Директор Ноушена без конца гонит какую-то графоманию, которую постят на Хакер-ньюз и Хабре. Подобно Грефу внедряет искусственный интеллект и машинное обучение (которые дают пустую строку). И при этом никто сделает нормальный шрифт в письмах. Просто стыд.&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/notion/</link>
        <guid isPermaLink="true">https://grishaev.me/notion/</guid>
        
        <category>notion</category>
        
        
      </item>
    
      <item>
        <title>Эта удивительная Clojure: что на ней разрабатывают, чем она отличается от других языков и подходит ли для входа в программирование</title>
        <description>
&lt;p&gt;Эта статья была написана для одного издания, но по ряду причин ее не опубликовали. Размещаю здесь, чтобы материал не пропал. В подготовке статьи участвовали:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dside.ru/&quot;&gt;Павел Пеганов&lt;/a&gt; и &lt;a href=&quot;https://grishaev.me/&quot;&gt;Иван Гришаев&lt;/a&gt;, программисты;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://darovska.com/&quot;&gt;Маша Даровская&lt;/a&gt;, редактор.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Мы расспросили разработчиков на Clojure из сообщества &lt;a href=&quot;https://t.me/clojure_ru&quot;&gt;clojure_ru&lt;/a&gt;. Выясняли, как применяют язык, что на нём пишут, легко ли на нём программировать.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;что-программируют-на-clojure&quot;&gt;Что программируют на Clojure&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Павел:&lt;/strong&gt; сфера применения Clojure в техническом плане — в основном веб и серверные приложения. На успешно работающий Clojure-код можно посмотреть, например, в продуктах &lt;a href=&quot;https://www.metabase.com/&quot;&gt;Metabase&lt;/a&gt; и &lt;a href=&quot;https://penpot.app/&quot;&gt;Penpot&lt;/a&gt;, их исходный код открыт.&lt;/p&gt;

&lt;p&gt;Но постепенно язык проникает и в другие области. ClojureScript работает в браузерах и других средах для JavaScript, с помощью проекта Esprit его уже запускают на микроконтроллерах, а сейчас развивают ClojureDart, чтобы захватывать мир Flutter. Конечно, не все эксперименты в итоге «взлетят», но такое разнообразие работающих проектов показывает, что применимость языка ограничена скорее настроениями разработчиков, чем самим языком.&lt;/p&gt;

&lt;p&gt;Если говорить о предметных областях, то в вакансиях и проектах с Clojure, о которых слышу я, эмпирически кажется, что финтеха больше, чем прочих. Даже компания, поддерживающая Clojure, Cognitect, принадлежит банку Nubank. Но кроме финтеха областей тоже хватает.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Иван:&lt;/strong&gt; сфера применения Clojure широка, она решает те же задачи, что Java, Python и другие языки. На ней пишут сетевые сервисы, бэкенд веб- и мобильных приложений. Clojure подходит для обработки данных из разных источников — баз данных, очередей, HTTP API — и часто служит их оркестратором.&lt;/p&gt;

&lt;p&gt;Существует &lt;a href=&quot;https://clojurescript.org/&quot;&gt;ClojureScript&lt;/a&gt; — компилятор кода на Clojure в JavaScript. С его помощью создают браузерный фронтенд и мобильные приложения на базе React Native.&lt;/p&gt;

&lt;p&gt;Код на Clojure можно скомпилировать при помощи GraalVM и native image, получив бинарный файл. С этим подходом пишут утилиты командной строки, интерпретаторы, AWS Lambda и многое другое.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;чем-clojure-отличается-от-других-языков-семейства-lisp-и-почему-эти-языки-несовместимы&quot;&gt;Чем Clojure отличается от других языков семейства Lisp и почему эти языки несовместимы&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Павел:&lt;/strong&gt; с другими диалектами Lisp я за всю карьеру (с 2014 года) ни разу на практике не столкнулся. Видел пару образцов кода на Scheme, и те в книге Structure and Interpretation of Computer Programs, а не на работе. Слышал также о Racket, но только в академическом контексте.&lt;/p&gt;

&lt;p&gt;Вообще от разных языков странно ожидать совместимости на основе только некоторого сходства в синтаксисе. Иногда такое действительно можно наблюдать, но разве что когда сходство — это следствие родства, когда один язык прямо вырастает из другого, и несовместимости достаточно быстро возникают и в таких случаях. К примеру, некоторые программы на C можно собрать и как C++, но только совсем простые. Аналогичная ситуация между Ruby и Crystal.&lt;/p&gt;

&lt;p&gt;Clojure же относительно самобытен. &lt;a href=&quot;https://xkcd.ru/297/&quot;&gt;Обилие скобок бросается в глаза&lt;/a&gt;, конечно, но это лишь одна из составляющих языка. И в отличие от многих собратьев по семейству, он активно пользуется &lt;em&gt;разными видами&lt;/em&gt; скобок, не только круглыми.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Иван:&lt;/strong&gt; Lisp — это семейство языков, объединённых схожим синтаксисом, а Clojure — наиболее современный их представитель. Для обывателя все Лиспы одинаковы, но на самом деле разница велика: каждый диалект силён в своих областях.&lt;/p&gt;

&lt;p&gt;От классических диалектов вроде Common Lisp или Scheme Clojure отличается более современными идеями. Язык поощряет неизменяемость данных, асинхронные и ленивые вычисления.&lt;/p&gt;

&lt;p&gt;Clojure предлагает мощные коллекции и функции для работы с ними. Они доступны по умолчанию без сторонних библиотек. По сравнению с Common Lisp улучшены макросы. Разработка на Clojure ведётся через REPL, как это принято в классических диалектах.&lt;/p&gt;

&lt;p&gt;Синтаксис Clojure отличается от других Lisp-языков. В нём меньше круглых скобок, а некоторые формы задают квадратными и фигурными. Шутки про множество скобок уже не так актуальны для Clojure, как это было со старыми диалектами.&lt;/p&gt;

&lt;p&gt;Главное отличие Clojure от других Лиспов в том, что Clojure работает на платформе JVM. При компиляции получается jar-файл, который позже запускается силами Java. Это отпугивает разработчиков на Common Lisp, которые привыкли к машинному коду. JVM позволяет повторно использовать код на Java, который писали и отлаживали десятилетиями. Этому Clojure обязана своей популярностью: сразу после выхода на ней можно было писать промышленный код, не дожидаясь библиотек.&lt;/p&gt;

&lt;h2 id=&quot;можно-ли-начать-программировать-с-clojure&quot;&gt;Можно ли начать программировать с Clojure&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Павел:&lt;/strong&gt; можно ли освоить Clojure как первый язык? Определённо. Язык довольно прост по своей структуре, встроенных механик в нём немного, удивительно многие механизмы можно реализовать посредством функций и макросов у себя в коде, не вмешиваясь в устройство самого языка. А REPL можно поначалу воспринимать как своего рода «чат» с языком или как калькулятор, способный на обработку не только чисел. Не нужно разбираться со структурой проекта, процессом сборки, способом запуска, обязательной точкой входа (необходимостью всё заворачивать в классы и методы, например) — всё это для самого первого языка лишнее.&lt;/p&gt;

&lt;p&gt;Логично начинать знакомство с сайта языка: &lt;a href=&quot;https://clojure.org/&quot;&gt;clojure.org&lt;/a&gt;. Там прекрасные руководства, пусть кому-то они и могут показаться суховатыми. Есть и книги, причём некоторые даже в свободном доступе. Мне здорово помогла &lt;a href=&quot;http://clojure-cookbook.com/&quot;&gt;Clojure Cookbook&lt;/a&gt;, объясняющая язык на примерах — от примитивных и абстрактных до прикладных. Её исходники доступны &lt;a href=&quot;https://github.com/clojure-cookbook/clojure-cookbook&quot;&gt;на GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Мой совет: не браться изучать редактор Emacs одновременно с Clojure, что часто рекомендуют другие. Так &lt;em&gt;можно&lt;/em&gt; делать, конечно, просто Emacs — это целый мир, и не каждому хватит упорства осваивать сразу две настолько широких темы параллельно. Для начинающего я бы посоветовал в качестве редактора VSCode с расширением Calva, его интерфейс гораздо больше похож на то, с чем можно столкнуться в повседневной околокомпьютерной деятельности.&lt;/p&gt;

&lt;p&gt;Для тех же, кто погружается после других языков, для ознакомления может быть полезна краткая шпаргалка по Clojure с сайта &lt;a href=&quot;https://learnxinyminutes.com/docs/clojure/&quot;&gt;Learn X in Y Minutes&lt;/a&gt; (есть и на &lt;a href=&quot;https://learnxinyminutes.com/docs/ru-ru/clojure-ru/&quot;&gt;русском языке&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Иван:&lt;/strong&gt; я бы не рекомендовал Clojure в качестве первого языка. Она опирается на JVM, и это усложнит путь начинающему разработчику. &lt;a href=&quot;https://ru.wikipedia.org/wiki/Scheme&quot;&gt;Scheme&lt;/a&gt; или &lt;a href=&quot;https://racket-lang.org/&quot;&gt;Racket&lt;/a&gt; станут отличным выбором — неслучайно курс SICP и &lt;a href=&quot;https://mitpress.mit.edu/1984-structure-and-interpretation-of-computer-programs/&quot;&gt;одноимённая книга&lt;/a&gt; используют Scheme.&lt;/p&gt;

&lt;p&gt;Начните с официального сайта Clojure: его разделы описывают философию языка, устройство и первые шаги.&lt;/p&gt;

&lt;p&gt;На русском языке доступны книги &lt;a href=&quot;https://www.labirint.ru/books/483189/&quot;&gt;«Программирование на Clojure»&lt;/a&gt; и &lt;a href=&quot;https://grishaev.me/clojure-in-prod/&quot;&gt;«Clojure на производстве»&lt;/a&gt;, причём последняя — не перевод. Из английских подойдут &lt;a href=&quot;https://www.manning.com/books/the-joy-of-clojure-second-edition&quot;&gt;The Joy of Clojure&lt;/a&gt; и &lt;a href=&quot;https://www.braveclojure.com/&quot;&gt;Clojure for Brave and True&lt;/a&gt;. Вступите в группу &lt;a href=&quot;https://t.me/clojure_ru&quot;&gt;clojure_ru&lt;/a&gt; в «Телеграме», чтобы обращаться за советами.&lt;/p&gt;

&lt;h2 id=&quot;полезные-библиотеки&quot;&gt;Полезные библиотеки&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Павел:&lt;/strong&gt; Clojure подключается к уже существующим экосистемам. Классическая реализация для JVM позволяет использовать почти всё, что можно использовать из Java. Такое же отношение между ClojureScript и JavaScript, ClojureDart и Dart и т.д. Так что в переписывании существующих библиотек из других экосистем Clojure не сильно нуждается, разве что в обёртках для библиотек с платформы, а их уже написано немало.&lt;/p&gt;

&lt;p&gt;Но есть интересные образцы и в самой Clojure. Мне, например, было интересно попробовать re-frame (для браузерных приложений), Instaparse (даёшь строку с грамматикой — получаешь функцию-парсер) и DataScript (иммутабельная БД с языком запросов).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Иван:&lt;/strong&gt; в Clojure есть все необходимые библиотеки для баз данных, кэширования, очередей сообщений. Поддерживаются известные форматы и протоколы, средства веб-разработки. Проблемы отсутствующих библиотек нет как таковой.&lt;/p&gt;

&lt;p&gt;Можно сказать, Clojure умеет всё, что умеет Java из-за повторного использования кода. При этом абстракции, построенные на Clojure, оказываются изящными и ёмкими.&lt;/p&gt;

&lt;p&gt;У Clojure свой репозиторий библиотек, который называется &lt;a href=&quot;https://clojars.org/&quot;&gt;Clojars&lt;/a&gt;. Поддерживается Maven — центральный репозиторий Java. Зависимости могут находиться в репозитории Git, что позволяет указывать версии с точностью до тега или коммита. Этим пользуются в больших фирмах, где много внутренних библиотек.&lt;/p&gt;

&lt;h2 id=&quot;популярность-языка&quot;&gt;Популярность языка&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Иван:&lt;/strong&gt; Clojure менее популярна, чем Java или Python, но ее доля растёт. На западе Clojure используется всё чаще, и эта тенденция плавно доходит до нас. Пока что в России мало компаний, которые ищут разработчиков на Clojure: это Health Samurai, Сбербанк, Ростелеком. На мировом рынке вакансий больше на порядок, но из-за последних событий тяжело устроиться, если находишься в России.&lt;/p&gt;

&lt;p&gt;Типичная вакансия на Clojure — это сетевой сервис или бэкенд веб- или мобильного приложения. Код сводится к обработке данных из разных источников — БД, Redis, Kafka. Реже встречается фронтенд с различными обертками над React.&lt;/p&gt;

&lt;p&gt;Зарплата удалённого разработчика в западных фирмах варьируется от 5 до 12 тысяч долларов в месяц. Среди российских вакансий самая высокая ЗП обозначена «до 330 тысяч рублей». Я не собеседовался туда и не могу подтвердить, правда это или для привлечения внимания.&lt;/p&gt;

&lt;p&gt;Работу в России ищут в телеграм-канале clojure_ru в топике вакансий. Удалённые вакансии размещают в слаке &lt;a href=&quot;https://clojurians.slack.com&quot;&gt;Clojurians&lt;/a&gt; в канале &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#remote-jobs&lt;/code&gt;, а также на сайтах &lt;a href=&quot;http://clojurejobboard.com&quot;&gt;clojurejobboard.com&lt;/a&gt; и &lt;a href=&quot;https://remoteok.com/&quot;&gt;remoteok.com&lt;/a&gt; по тегу clojure.&lt;/p&gt;

&lt;h2 id=&quot;как-в-сообществе-относятся-к-новичкам&quot;&gt;Как в сообществе относятся к новичкам&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Павел:&lt;/strong&gt; Clojure редко изучают как первый язык. Наверное, поэтому в части сообщества, что я видел, много сформировавшихся и опытных специалистов с холодными головами, привыкших к странным вопросам от людей, пришедших из других экосистем. Те дискуссии, что я видел, были конструктивными, познавательными и в целом приятными. Инциденты случаются, но редко, чаще даже с особо абразивными участниками получается наладить диалог, хоть выглядит этот диалог порой забавно. В целом, как и почти везде — на уважительное отношение можно ожидать взаимности.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Иван:&lt;/strong&gt; пожалуй, у Clojure самое доброе и отзывчивое сообщество, что мне приходилось видеть. Возможно, потому, что к Clojure приходят в более старшем возрасте, нежели к PHP, Javascript или Python. Люди общаются в позитивном ключе — задавайте вопросы, и вам помогут.&lt;/p&gt;

&lt;h2 id=&quot;тулинг-языка-и-поддержка-в-ide&quot;&gt;Тулинг языка и поддержка в IDE&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Павел:&lt;/strong&gt; это язык, за который без инструментов лучше не браться. Тот, кто впервые видит Clojure, чаще всего пугается обилия скобочек. Но, наверное, никто из тех, кто плотно занимается Clojure, вручную их не расставляет. Для этого есть как минимум Paredit и Parinfer. С ними можно фокусироваться на структуре кода, а не на тексте, из которого он состоит. Из поддержки именно в IDE я слышал только о Cursive для сред Intellij от JetBrains, чаще же используют просто текстовые редакторы вроде Emacs, Vim и VSCode. Есть и Language Server, интегрировать который в новые редакторы для облегчения работы с Clojure не должно быть большой проблемой.&lt;/p&gt;

&lt;p&gt;Со сборкой дела обстоят чуть сложнее, но тоже хорошо. Нет какого-то одного инструмента, который используется везде, но и огромного ассортимента, из которого не понятно что выбирать, тоже нет. Сейчас на сайте clojure.org советуют Clojure CLI, который вполне неплох. А если касаться других реализаций Clojure вроде ClojureScript, то, скорее всего, там будет что-то своё, это придётся осваивать отдельно — единства инструментов в разных реализациях нет.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Иван:&lt;/strong&gt; Clojure предлагает все средства для комфортной работы. Прежде всего это утилита &lt;a href=&quot;https://leiningen.org/&quot;&gt;Leiningen&lt;/a&gt; для управления проектами. При помощи неё код запускают с разными профилями, собирают uberjar, прогоняют тесты, загружают библиотеки в репозиторий Clojars. Lein расширяется плагинами, которых великое множество под разные задачи.&lt;/p&gt;

&lt;p&gt;Кроме Leiningen, доступны утилиты Clojure CLI и Boot со схожими возможностями. Clojure CLI более гибко работает с classpath, что порой необходимо в сложных проектах.&lt;/p&gt;

&lt;p&gt;Для Clojure создан и поддерживается LSP-сервер и плагины к популярным редакторам. LSP используют многие разработчики, его популярность растёт. Однако лучшей IDE для Clojure считается Emacs с модулем Cider.&lt;/p&gt;

&lt;p&gt;Важно понимать, что разработка на Clojure протекает не так, как в других языках. В них программист полагается на статический анализатор кода. В Clojure всё решает REPL-driven-development, когда код запускают в REPL по мере написания. В этом плане связка Emacs+Cider предлагают наиболее продвинутые средства.&lt;/p&gt;

&lt;p&gt;Поскольку Emacs — это вещь в себе, будет трудно изучать его вместе с Clojure. В идеале с ним знакомятся отдельно. Я перешёл на Emacs ещё до Clojure. Возможно, на первых порах подойдут IntelliJ IDEA или VS Code — они тоже поддерживают Clojure за счёт сторонних модулей.&lt;/p&gt;

&lt;p&gt;Набирает популярность проект &lt;a href=&quot;https://babashka.org/&quot;&gt;babashka&lt;/a&gt; — интерпретатор Clojure, написанный на Clojure и скомпилированный GraalVM. С его помощью запускают скрипты, написанные на Clojure, без компиляции. Babashka полезен в облачном сервисе AWS Lambda и в системном программировании.&lt;/p&gt;

&lt;h2 id=&quot;проблема-статической-типизации-в-clojure&quot;&gt;Проблема статической типизации в Clojure&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Павел:&lt;/strong&gt; статическая типизация — это, пожалуй, тема самых бурных и длинных дебатов в чатах по Clojure.&lt;/p&gt;

&lt;p&gt;Основная проблема со статической типизацией — негибкость. Либо статически типизирован весь код, либо код просто не собирается и не запускается, либо систему типов на определённых участках приходится отключать, лишаясь её преимуществ. Необходимость постоянно с этим бороться здорово замедляет разработку: очень непросто вписать предметную область, особенно недоосвоенную, в формальные ограничения системы типов.&lt;/p&gt;

&lt;p&gt;Обычный контраргумент на это — что именно из-за таких взглядов нестабильное программное обеспечение распространилось настолько, что к этому даже пользователи уже привыкли. Я с ним не вполне согласен — на мой взгляд, для испытания какой-то новой идеи даже не вполне стабильное ПО полезнее, чем никакое. Проблемы начинаются, когда на такое нестабильное ПО начинают существенно опираться. Но это вина уже явно не типизации.&lt;/p&gt;

&lt;p&gt;Для желающих есть библиотека &lt;a href=&quot;https://typedclojure.org/&quot;&gt;Typed Clojure&lt;/a&gt;, ранее core.typed. Но я не припомню, чтобы она была сколько-нибудь популярна. Популярны &lt;em&gt;схемы&lt;/em&gt; (schemas). Когда-то на слуху была библиотека Schema, позднее появились Clojure.spec и Malli. Они позволяют зафиксировать структуру значений в ключевых местах, где ожидаются проблемы. Но где это делать и как — дело ваше.&lt;/p&gt;

&lt;p&gt;Хотя на «краях» языка, где идёт взаимодействие с хост-платформой, указывать типы местами всё-таки приходится. На классическом Clojure для JVM при вызове класса на Java может потребоваться type hint, чтобы ускорить код или вызвать правильный метод из разных перегрузок. А в ClojureScript они могут использоваться в &lt;a href=&quot;https://clojurescript.org/guides/externs&quot;&gt;экстернах&lt;/a&gt; для сжатия скомпилированного кода на JavaScript с помощью &lt;a href=&quot;https://developers.google.com/closure/compiler&quot;&gt;Google Closure Compiler&lt;/a&gt;. Но таких случаев немного, и их можно запереть в библиотеках-обёртках, чтобы в повседневной жизни с ними не сталкиваться.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Иван:&lt;/strong&gt; Clojure — не чисто функциональный язык как Haskell. Разработчики говорят о нём: tends to be functional — тяготеет к функциональному стилю, но не полностью. Надёжность кода на Clojure обусловлена тем, что код на нём запускают в REPL по мере написания. Из-за этого сразу видно, работает код или нет. В других языках код проверяет статический анализатор. Он покажет типовые ошибки, но их отсутствие не гарантирует безошибочную работу. Clojure, напротив, отталкивается от запуска кода, что даёт решающее преимущество.&lt;/p&gt;

&lt;p&gt;В Clojure были попытки создать статическую типизацию. Проект называется &lt;a href=&quot;https://typedclojure.org/&quot;&gt;Clojure Typed&lt;/a&gt;; с его помощью в код добавляют аннотации с типами, а затем он проверяется на корректность. Судьба проекта неоднозначна: некоторые компании им пользовались, но с развитием кодовой базы типизация скорее мешает, чем приносит пользу.&lt;/p&gt;

&lt;p&gt;В Clojure приняты другие, более простые способы следить за типами. Прежде всего это тесты: юнит-, интеграционные, smoke- и другие. Есть набор линтеров — утилит для статического анализа кода. Встроенный пакет &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clojure.spec&lt;/code&gt; позволяет описать структуру данных, в том числе аргументов функции и её результата. Всё вместе это устраняет проблемы динамической типизации, оставляя только её положительные стороны.&lt;/p&gt;

&lt;p&gt;За восемь лет работы с Clojure я помню лишь несколько случаев, когда на проде возникала ошибка типов. Чаще всего причина была в слабой проверке входных данных, что исправлялось тестами.&lt;/p&gt;

&lt;p&gt;Динамическая типизация в лучшей степени ложится на окружающий мир. Хоть и возможно описать типами 90% данных, останутся те 10%, для которых это сделать тяжело, при этом сложность типов растёт нелинейно. Добавьте сюда частые изменения бизнес-требований. Как бы странно это ни звучало, именно динамическая типизация оказывается удобней на долгом этапе разработки.&lt;/p&gt;

&lt;h2 id=&quot;язык-для-удовольствия&quot;&gt;Язык для удовольствия&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Павел:&lt;/strong&gt; мне удовольствие приносит даже не сам язык, сколько &lt;em&gt;культура&lt;/em&gt; разработки приложений на нём, подкреплённая не только архитектурными догмами и лучшими практиками, но и заметной практической пользой. По мере ознакомления с некоторыми библиотеками первое время мозг сворачивается в трубочку, но, когда приходит понимание для чего они нужны, остаётся недоумение, почему приведённые подходы так слабо распространены.&lt;/p&gt;

&lt;p&gt;Я сходу припоминаю два крупных эпизода, заставивших меня испытать это ощущение.&lt;/p&gt;

&lt;p&gt;Первый — с &lt;a href=&quot;https://github.com/stuartsierra/component&quot;&gt;Component&lt;/a&gt;. Он меня отправил в целое путешествие на тему подмены кода у уже работающего приложения новой версией (что при разработке хочется делать постоянно) без каких-либо скрытых сложных механизмов, лишний раз закрепил тему вреда глобальных переменных, продемонстрировал интересный сорт внедрения зависимостей (dependency injection) и подтолкнул ознакомиться с другими подходами к этой же задаче на этом же языке: &lt;a href=&quot;https://github.com/tolitius/mount&quot;&gt;Mount&lt;/a&gt; и &lt;a href=&quot;https://github.com/weavejester/integrant&quot;&gt;Integrant&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Второй — с &lt;a href=&quot;https://day8.github.io/re-frame/re-frame/&quot;&gt;re-frame&lt;/a&gt;. Инструменты по созданию браузерных приложений, что я видел до того момента, то и дело вводили для генерации разметки собственные языки с собственными правилами и операторами, вместо того чтобы подключить к процессу всю мощь JavaScript. Это отбивало у меня охоту лезть во фронтенд без острой необходимости, которой так и не возникло. Re-frame же всё делал в ClojureScript, в том числе разметку, и этим убедил меня как минимум попробовать. И это очень быстро вылилось в работающий браузерный чат на WebRTC.&lt;/p&gt;

&lt;p&gt;И с тех пор я раз за разом возвращаюсь, надеясь, что случится ещё один эпизод.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Иван:&lt;/strong&gt; очевидно, что на языке, на котором приятно программировать, вы сделаете больше. Clojure дарит удовольствие тем, что ёмко выражает ваши мысли. На текущий момент я не знаю языка, который переводит мои намерения в код с той же лёгкостью. Много лет назад я писал на Python и был такого же мнение о нём, но Clojure в этом плане ушла дальше.&lt;/p&gt;

&lt;p&gt;Преимущества Clojure это:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;неизменямость данных, из-за чего уходит целый пласт ошибок;&lt;/li&gt;
  &lt;li&gt;REPL-driven development, когда код запускают из редактора по мере написания. Из-за этого раньше видны ошибки и дальнейший путь разработки;&lt;/li&gt;
  &lt;li&gt;макросы, с которыми легко писать выразительный код, избегать повторов и многое другое.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ни в одном языке нет этих трёх компонентов, развитых в той же мере, что и в Clojure.&lt;/p&gt;

&lt;h2 id=&quot;про-популярность-языка&quot;&gt;Про популярность языка&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Павел:&lt;/strong&gt; было бы неплохо, чтобы язык стал популярнее. Но популяризация может произойти по-разному, и не все возможные сценарии этого мне нравятся. Иногда возникают обсуждения, что Clojure нужен какой-то доминирующий фреймворк или инструмент, который привлечёт огромную толпу людей. Что от этого бывает, я своими глазами видел в Ruby on Rails. Фреймворк захватил экосистему самого языка настолько, что разработчиков на Rails, вероятно, больше, чем разработчиков на Ruby, как бы парадоксально это ни звучало. И вредные привычки из фреймворка растекаются далеко за его пределы.&lt;/p&gt;

&lt;p&gt;Поэтому мне даже нравится то, что в экосистеме Clojure нет монополистов в отдельных видах инструментов — я считаю, что это постепенно культивирует качественные решения через конкуренцию, а также способствует хорошей сочетаемости инструментов разного рода.&lt;/p&gt;

&lt;p&gt;Но это, так уж вышло, несколько поднимает порог входа из-за того, что выбирать первые инструменты приходится вслепую, а это неприятно. Разработчик испытывает страх неизвестности, не хочется потом переписывать весь проект из-за неверного выбора на ранних этапах. Но, к счастью, обычно это и не требуется, т. к. нет чего-то, что пронизывает весь проект настолько, чтобы замена одного узла потребовала полного переписывания. И жертвовать этой чертой ради популярности мне видится вредным.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Иван:&lt;/strong&gt; Популярность Clojure растёт, но это происходит медленно. На западе ее не считают экзотикой. Clojure применяют в крупных банках, например &lt;a href=&quot;https://www.rbinternational.com/en/raiffeisen.html&quot;&gt;Raiffeisen Bank International&lt;/a&gt; и &lt;a href=&quot;https://nubank.com.br/en/&quot;&gt;NuBank&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;На официальном сайте Clojure есть раздел &lt;a href=&quot;https://clojure.org/community/companies&quot;&gt;Companies&lt;/a&gt;, где перечислены компании, когда-либо замеченные в найме Clojure-разработчиков. Возможно, читателей удивит длина списка, а также участие в нём Facebook, Apple, Netflix, Atlassian и других крупных компаний. Мне довелось переписываться с разработчиком из Apple. По его словам, Clojure используют для сбора данных и статистики.&lt;/p&gt;

&lt;p&gt;Участники &lt;a href=&quot;https://t.me/clojure_ru&quot;&gt;clojure_ru&lt;/a&gt; вносят посильный вклад в развитие языка: проводят встречи, пишут библиотеки, книги, статьи в блогах, в том числе на английском языке.&lt;/p&gt;

&lt;h2 id=&quot;низкая-производительность-правда-или-миф&quot;&gt;Низкая производительность: правда или миф&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Павел:&lt;/strong&gt; в любом проекте можно встретить «функциональные ядра», в которых происходит решение прикладных задач, и «императивные оболочки», через которые получаются условия задач и приводятся в исполнение решения. Иногда они не очень чётко разделены в коде, но разделить деятельность программы на эти две категории несложно.&lt;/p&gt;

&lt;p&gt;Основное назначение «ядра» — решить задачу правильно. И это проще сделать, имея выразительный язык и хорошие средства для абстрагирования. Этого у Clojure в достатке. Но за их использование обычно приходится платить скоростью, и Clojure на это повлиять не в силах. Но это «ядро» лишь часть системы.&lt;/p&gt;

&lt;p&gt;Основная же задача «оболочки» — принять и передать дальше данные так, чтобы с обеих сторон были довольны. Там важны скорость, низкая задержка и высокая пропускная способность — поэтому часто приходится от высоких абстракций отказываться и излагать алгоритмы более императивно и мутабельно, чтобы машине было проще их выполнять&lt;/p&gt;

&lt;p&gt;И хоть у Clojure и есть функциональные черты и идиомы, императивный подход ему тоже не чужд (хотя и вторичен). У встроенных иммутабельных коллекций есть более шустрые мутабельные версии, а с объектами хост-платформы, зачастую мутабельными, можно работать напрямую. В таком стиле писать надёжный код сложнее и дольше, но если нужно, то можно. И это, на мой взгляд, мощное преимущество перед «насквозь функциональными» языками. Он «осторожно, но настойчиво» подталкивает к функциональному стилю, а не ставит перед фактом.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Иван:&lt;/strong&gt; тезис о том, что функциональные языки медленные, был справедлив лет двадцать назад, но сегодня вопрос уже не актуален. На это есть несколько причин.&lt;/p&gt;

&lt;p&gt;Появились алгоритмы неизменяемых структур, где копирование данных сведено к минимуму. И хотя они медленней изменяемых аналогов, разница не столь велика, а преимуществ гораздо больше.&lt;/p&gt;

&lt;p&gt;Многие промышленные языки в той или иной степени функциональны: это Scala, Kotlin, Rust. Опыт показывает, что неизменяемость и монадические типы (Try, Maybe) удобны в разработке. Эти абстракции не бесплатны, но они окупаются.&lt;/p&gt;

&lt;p&gt;Сегодня уже нет чёткого разделения языков по принципу императивный — функциональный. Удачные решения из ФП заимствуют, потому что они оправдывают себя на практике.&lt;/p&gt;

&lt;p&gt;Как мы упоминали, Clojure — гибридный язык. Код на нём варьируется от императивного до функционального стиля. Разработчик вправе выбирать, какой крайности придерживаться. Медленные участки кода легко переписать на манер Java. Например, заменить неизменяемый словарь Clojure на HashMap, неизменяемый вектор — на массив и так далее.&lt;/p&gt;

&lt;p&gt;Существует исследование, где сравнивают скорость Java и Clojure: &lt;a href=&quot;https://www.diva-portal.org/smash/get/diva2:1424342/FULLTEXT01.pdf&quot;&gt;A performance comparison of Clojure and Java&lt;/a&gt;. Вывод гласит, что Clojure медленней Java в среднем от 2 до 5 раз, что совпадает с моими личными наблюдениями. Однако в силу своей гибкости Clojure предлагает много способов ускорить неоптимальный код.&lt;/p&gt;

&lt;p&gt;Вместе с тем код на Clojure оказывается если не на порядок, то примерно в 5-7 раз короче аналогичного кода на Java. Меньший объем кода упрощает его поддержку, облегчает внедрение новых требований.&lt;/p&gt;

&lt;p&gt;Если важен быстрый старт, например, в окружении AWS Lambda, проект компилируют с помощью GraalVM и native-image. Получается бинарный файл, запуск которого занимает микросекунды. Так работает несколько моих проектов: &lt;a href=&quot;https://github.com/igrishaev/teleward&quot;&gt;телеграм-бот&lt;/a&gt;, обработчик &lt;a href=&quot;https://github.com/igrishaev/blog-backend&quot;&gt;HTML-форм&lt;/a&gt; и другие.&lt;/p&gt;

&lt;h2 id=&quot;важность-иммутабельности-и-ленивости-языка&quot;&gt;Важность иммутабельности и ленивости языка&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Павел:&lt;/strong&gt; ленивости в Clojure, надо сказать, не так уж много. Есть ленивые преобразования коллекций, ленивые последовательности. Это встречается более-менее везде, где существуют итераторы. У Clojure преобразования в стандартной библиотеке ленивые &lt;em&gt;по умолчанию&lt;/em&gt;, что встречается уже не так часто.&lt;/p&gt;

&lt;p&gt;Полезна ли такая ленивость? Определённо. Она позволяет обрабатывать данные потоково, когда это возможно, держа в памяти только то, что нужно на текущем шаге. Это помогает проще обрабатывать непрерывные потоки или просто большие объёмы данных, не затрачивая больше ресурсов, чем необходимо. А поскольку это поведение по умолчанию, такую полезную возможность можно получить случайно, не задумываясь.&lt;/p&gt;

&lt;p&gt;А вот с иммутабельностью интереснее. Я бы даже сказал, что это одна из самых полезных особенностей языка! Есть общие доводы в пользу иммутабельности — то, что вносимые в объекты изменения видны явно, т. к. изменённую версию надо откуда-то явно получить и передать дальше. Это снижает риск «случайной зависимости», когда разработчик, вызывая функцию на каком-то значении, не рассчитывает, что она его изменит и, возможно, поломает остаток алгоритма.&lt;/p&gt;

&lt;p&gt;Но есть у иммутабельности и синергия с разработкой через REPL. Поскольку большинство конструкций вместо изменения уже сформированных объектов формируют новые, код очень часто можно выполнять по кусочкам и повторно. Благодаря этому можно делать в кусочках небольшие изменения и немедленно проверять, какой они вызывают эффект, не перезапуская всей программы. Это позволяет идти к решению постепенно, небольшими шагами, вовремя поворачивая, когда что-то идёт не по плану. А ещё это сильно упрощает юнит-тесты.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Иван:&lt;/strong&gt; Clojure поддерживает ленивость и иммутабельность «из коробки», в этом его отличительная черта. Ленивость применяют по ситуации: иногда с ней трудно отладить код, поэтому ленивые вычисления «проталкивают», чтобы они совершились перед следующей операцией.&lt;/p&gt;

&lt;p&gt;Гораздо важнее иммутабельность данных. Она исключает ошибки, связанные со случайными изменениями данных: словарей, списков, полей объекта. Метод &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.setSomething(x)&lt;/code&gt;, вставленный или удалённый где-то посередине, способен разрушить проект. В Clojure это невозможно в принципе: каждая функция принимает результат вычислений другой функции. Даже если какая-то функция дополнит словарь новыми полями, прежний экземпляр останется нетронутым.&lt;/p&gt;

&lt;p&gt;В Clojure есть свои изменяемые типы, но они ведут себя как обёртки над неизменяемыми. Они применяются точечно и выделяются на общем фоне. Изменяемый объект, добавленный без причины, вызовет замечания коллег.&lt;/p&gt;

&lt;p&gt;Программировать в неизменяемом стиле сперва непривычно. Однако позже, когда мозг перестроится на новый лад, будет так же трудно вернуться к изменяемому стилю. Станет очевидно, насколько он подвержен ошибкам.&lt;/p&gt;

&lt;h2 id=&quot;ссылки-и-ресурсы&quot;&gt;Ссылки и ресурсы&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Документация
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://clojure.org/&quot;&gt;Официальный сайт&lt;/a&gt; и его разделы:
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;https://clojure.org/about/rationale&quot;&gt;Rationale&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://clojure.org/guides/getting_started&quot;&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Книги
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.labirint.ru/books/483189/&quot;&gt;«Программирование на Clojure»&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://grishaev.me/clojure-in-prod/&quot;&gt;«Clojure на производстве»&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.braveclojure.com/&quot;&gt;Clojure for Brave and True&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.manning.com/books/the-joy-of-clojure-second-edition&quot;&gt;The Joy of Clojure&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;Веб-ресурсы
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://planet.clojure.in/&quot;&gt;Planet Clojure&lt;/a&gt; - агрегатор блогов на тему Clojure&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://ask.clojure.org/&quot;&gt;Ask Clojure&lt;/a&gt; - сайт вопросов и ответов&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;Видео
    &lt;ul&gt;
      &lt;li&gt;Канал &lt;a href=&quot;https://www.youtube.com/@ClojureTV/videos&quot;&gt;ClojureTV&lt;/a&gt; на Ютубе&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=LKtk3HCgTa8&quot;&gt;Simple Made Easy&lt;/a&gt; by Rich Hickey (2011)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=nD-QHbRWcoM&quot;&gt;A History of Clojure&lt;/a&gt; by Rich Hickey with Q&amp;amp;A&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=wASCH_gPnDw&quot;&gt;Inside Clojure&lt;/a&gt; - Rich Hickey and Brian Beckman&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Сообщества
    &lt;ul&gt;
      &lt;li&gt;Чат &lt;a href=&quot;https://t.me/clojure_ru&quot;&gt;@clojure_ru&lt;/a&gt; в Телеграме&lt;/li&gt;
      &lt;li&gt;Группа &lt;a href=&quot;https://clojurians.slack.com&quot;&gt;Clojurians&lt;/a&gt; в Slack&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/clojure-article/</link>
        <guid isPermaLink="true">https://grishaev.me/clojure-article/</guid>
        
        <category>programming</category>
        
        <category>clojure</category>
        
        
      </item>
    
      <item>
        <title>Сбер</title>
        <description>&lt;p&gt;Постоянно пользуюсь Сбером, чтобы оплатить что-нибудь по QR-коду. Каждый раз
удивляюсь анимации вверху экрана. За каким-то хреном кнопка с QR не
зафиксирована, а выезжает справа. Как в рекламных полях, где анимацию делают
ради анимации: что-то выехало, покачалось, мигнуло. Типа, управление вниманием.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/sber/1.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Зачем? Кто просил эту анимацию? На автомате тычу в левый угол, клик приходится
на другой элемент, открывается что-то не то. Ясное дело, все тормозит, потому
что параллельно загружаются другие виджеты.&lt;/p&gt;

&lt;p&gt;Если функция кнопки известна заранее, а также ее текст и оформление, никакой
анимации не нужно. Может, балбесу-дизайнеру из Сбера нравится: у него эмулятор
на мощной тачке, запущено одно приложение, все плавно. А потребитель видит
слайдшоу и промахивается кнопкой.&lt;/p&gt;

&lt;p&gt;Дорогие дизайнеры! &lt;del&gt;Засуньте&lt;/del&gt; уберите ваши анимации подальше. Они не нужны, вы
делаете лишнюю и вредную работу.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/sber-app/</link>
        <guid isPermaLink="true">https://grishaev.me/sber-app/</guid>
        
        <category>life</category>
        
        <category>sber</category>
        
        <category>mobile</category>
        
        
      </item>
    
      <item>
        <title>The Mask library for Clojure</title>
        <description>&lt;p&gt;&lt;em&gt;(This is a copy of the readme file from the repository.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/igrishaev/mask&quot;&gt;Mask&lt;/a&gt; is a small library to prevent secrets from being logged, printed or leaked
in any similar way. Ships tags for Clojure, EDN and Aero.&lt;/p&gt;

&lt;p&gt;Why? Because I’ve been in such a situation three times, namely:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We don’t mask the secrets.&lt;/li&gt;
  &lt;li&gt;Someone logs the entire config.&lt;/li&gt;
  &lt;li&gt;Secrets have leaked!&lt;/li&gt;
  &lt;li&gt;Rotate all the keys, tokens, etc.&lt;/li&gt;
  &lt;li&gt;Change the team and face the same.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This library is an attempt to break this vicious circle.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Leiningen/Boot:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com.github.igrishaev/mask&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Clojure CLI/deps.edn:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;com.github.igrishaev/mask&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:mvn/version&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mask.core&lt;/code&gt; namespace provides &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mask&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unmask&lt;/code&gt; functions. Pass a value
to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mask&lt;/code&gt; to make it safe for logging or printing in REPL:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;in-ns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'mask.core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask.core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;-m&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Secret123&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;-m&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;masked&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The password is &quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;-m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The password is &amp;lt;&amp;lt; masked &amp;gt;&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Masking is idempotent meaning that you can mask the same value multiple times
but the result will be one-level masked value:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;-m&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;masked&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To release a value from a mask, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unmask&lt;/code&gt; it:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unmask&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;-m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Secret123&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unmasking is idempotent a well:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(-&amp;gt; -m unmask unmask unmask)
&quot;Secret123&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note: the library treats &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; as an error value that cannot be masked. You’ll
get an exception:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Execution&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;core.clj&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cannot&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Masking an empty value signals you’re doing something wrong. Most likely you’ve
missed a corresponding key or an environment variable. Thus, the further work
makes no sense.&lt;/p&gt;

&lt;h4 id=&quot;spec&quot;&gt;Spec&lt;/h4&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mask.spec&lt;/code&gt; module provides the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::mask&lt;/code&gt; spec that checks if a value is
really masked. An example from the tests:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:username&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ivan&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;secret&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;s/valid?&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;::config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;clojure-tag&quot;&gt;Clojure tag&lt;/h4&gt;

&lt;p&gt;The built-in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#mask&lt;/code&gt; tag wraps any value with a mask:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:token&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abc123&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SecretABC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:token&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;masked&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;&amp;gt;&amp;gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SecretABC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;edn-tag&quot;&gt;EDN tag&lt;/h4&gt;

&lt;p&gt;There is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reader-edn&lt;/code&gt; function that acts like an EDN reader for the same tag:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{:foo #mask 42}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;edn/read-string&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:readers&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'mask&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader-edn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; {:foo &amp;lt;&amp;lt; masked &amp;gt;&amp;gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;aero-tag&quot;&gt;Aero tag&lt;/h4&gt;

&lt;p&gt;To extend Aero with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#mask&lt;/code&gt; tag, import the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mask.aero&lt;/code&gt; namespace:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'mask.aero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then read a config with the tag:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;;; config.edn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SOME_PASSWORD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; code&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aero/read-config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;io/resource&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;config.edn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; {:foo &amp;lt;&amp;lt; masked &amp;gt;&amp;gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Aero dependency is not included. You’ve got to provide it by your own.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ivan Grishaev, 2023&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/en/mask/</link>
        <guid isPermaLink="true">https://grishaev.me/en/mask/</guid>
        
        <category>clojure</category>
        
        <category>programming</category>
        
        
      </item>
    
      <item>
        <title>Эй</title>
        <description>&lt;p&gt;Почему-то большие компании не могут нормально составить письмо на русском. Будут
ошибки или нелепые обороты. Сегодня получил письмо от Дискорда, где ко мне
обращаются на “эй”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/hey/1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Сам ты эй! Понятно, это дурацкая калька с английского hey. Почему не нашли
русского чувака, чтобы показать ему перевод перед отправкой? В больших фирмах
всегда найдется русский, украинец, поляк или венгр. Даже если он кодер, пусть
посмотрит. Он скажет, что обращение на эй в русском не только неестественно, но
даже грубо.&lt;/p&gt;

&lt;p&gt;Жаль, не сохранил скриншоты Гугла и Godaddy. Иной раз такую дичь присылают, что
хватаешься за волосы. Сейчас реже, но все равно.&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Mar 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/hey/</link>
        <guid isPermaLink="true">https://grishaev.me/hey/</guid>
        
        <category>life</category>
        
        <category>internet</category>
        
        
      </item>
    
      <item>
        <title>Silent Hill 2</title>
        <description>
&lt;p&gt;Появился трейлер переиздания &lt;a href=&quot;https://ru.wikipedia.org/wiki/Silent_Hill_2&quot;&gt;Silent Hill 2&lt;/a&gt; — одной из главных игр моего детства. Наверняка вы его смотрели, но вот на всякий случай:&lt;/p&gt;

&lt;iframe width=&quot;772&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/pyC_qiW_4ZY&quot; title=&quot;Silent Hill 2 - Teaser Trailer | PS5 Games&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Графика выше всяких похвал, сказать нечего. Однако у меня вопрос — что не так с этим трейлером? Не проматывая вниз, постарайтесь подумать.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Музыка.&lt;/p&gt;

&lt;p&gt;Напомню, музыка оригинального Silent Hill 2 — это произведение искусства. Можно сказать, что игра наполовину состоит из музыки. Логично ожидать в трейлере знакомые гитарные темы. Но почему-то вместо них звучит какой-то эмбиент и бряцание. Разве что на отметке 0:53 узнаваемый перебор на клавишах.&lt;/p&gt;

&lt;p&gt;Это пугает. Поймите, я не против перевыпуска. Графика — такая вещь, которую можно улучшать бесконечно. Разрешение, трассировка и все в этом духе. Но есть вещи, улучшить которые уже нельзя — это музыка. Саундтрек к SH2 нельзя улучшить, можно записать что-то другое, но как я уже говорил, игра с другой музыкой — другая игра.&lt;/p&gt;

&lt;p&gt;Самое худшее, что может случиться — это какие-нибудь юридические проблемы с правами на саундтрек. Вдруг у Акиры Ямаоки особые отношения с Конами, и у новых разрабов нет прав на оригинальные темы. Это настолько плохо, что даже не хочется говорить.&lt;/p&gt;

&lt;p&gt;Впрочем, по одному трейлеру судить нельзя. Вполне возможно, что с музыкой все в порядке, а я зря нагнетаю. Путь так оно и будет.&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/sh2-remake/</link>
        <guid isPermaLink="true">https://grishaev.me/sh2-remake/</guid>
        
        <category>games</category>
        
        <category>sh2</category>
        
        
      </item>
    
      <item>
        <title>Праздники</title>
        <description>&lt;p&gt;Не люблю праздники посреди недели. Скажем, по четвергам я хожу в зал, но завтра он не работает. Что мешает администратору прийти и открыть дверь, непонятно. И вообще — чем этот четверг отличается от других четвергов? Ничем, кроме дурацкого обычая, что в какой-то день вместо работы валяют дурака.&lt;/p&gt;

&lt;p&gt;Хотел переставить на среду, но оказывается, что у жены на работе поменяли смены из-за предпраздничного дня. У старших детей укороченные уроки, и нужно ехать за ними раньше обычного.&lt;/p&gt;

&lt;p&gt;Вот и думаешь: стоило ли переставлять кучу дел из-за одного праздника? Кому вообще всрались эти 23 Февраля, 8 Марта, Дни единства и все такое? Кто эти люди, что их празднуют? И как?&lt;/p&gt;

&lt;p&gt;Выгоду от праздников получают только дети, потому что не надо идти в школу. Взрослые, даже если они бюджетники, должны что-то переставлять и отрабатывать, что еще то мучение и нарушение ритма.&lt;/p&gt;

&lt;p&gt;Считаю, любой праздник должен автоматом переноситься на ближайший выходной —
празднуй сколько хочешь, а другим не мешай работать. Исключение из этого правило
одно — Новый год, его празднуют строго по календарю. Но это и так очевидно.&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/holidays/</link>
        <guid isPermaLink="true">https://grishaev.me/holidays/</guid>
        
        <category>life</category>
        
        
      </item>
    
  </channel>
</rss>
