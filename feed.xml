<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ivan Grishaev's blog</title>
    <description>Writing on programming, education, books and negotiations.
</description>
    <link>https://grishaev.me/</link>
    <atom:link href="https://grishaev.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 06 Jul 2024 11:52:58 +0000</pubDate>
    <lastBuildDate>Sat, 06 Jul 2024 11:52:58 +0000</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>Глобальное потепление</title>
        <description>&lt;p&gt;Уже год я преподаю английский: одному человеку и бесплатно. Первые полгода
занимались по моей программе, которую я составил по книге Мерфи. Затем перешли
на учебник Language Leader, по которому я учился когда-то сам.&lt;/p&gt;

&lt;p&gt;Он хорошо составлен: он интересен взрослому, потому что авторы добавили много
фактов из реальной жизни. Из него буквально фонит то, что было в мире на момент
его составления. В том числе поэтому проходить некоторые темы забавно.&lt;/p&gt;

&lt;p&gt;Одна из таких тем — погода. Лет 10-15 назад весь мир стоял на ушах из-за так
называемого “глобального потепления”. Ему приписывались любые природные явления:
шторм, торнадо — потепление, озоновая дыра — потепление, ядовитые испарения в
тундре — потепление.&lt;/p&gt;

&lt;p&gt;Забавно, как в учебнике повторяется то же самое. Упражнения самых разных
форматов — текст, диалоги, грамматика, — и везде потепление, потепление,
потепление. Других причин не бывает. А если и есть причина, то какая у нее
первопричина? Угадайте.&lt;/p&gt;

&lt;p&gt;Поэтому я воспринимаю учебник как исторический документ. Читая его, видно, как
штырило людей на эту тему в прошлом. Гринпис и прочие радикальные группировки
штурмовали платформы Шелл, а их отгоняли водометами. Население “прикладывало
линейку” — если сегодня потеплело на градус, а завтра на два, то через месяц
потеплеет на тридцать.&lt;/p&gt;

&lt;p&gt;Сегодня, когда глобальное потепление уже выдохлось, повестка изменилась. Теперь
у нас “борьба с изменением климата”. Это более гибкая конструкция, потому что
нигде не говориться, как долго нужно бороться. Горизонт работ заложен уже в
постановке задачи.&lt;/p&gt;

&lt;p&gt;Грета куда-то пропала, а у меня смешной стикер-пак с ней. Пропадает без дела.&lt;/p&gt;

&lt;p&gt;Хороших выходных!&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Jul 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/warming/</link>
        <guid isPermaLink="true">https://grishaev.me/warming/</guid>
        
        <category>warming</category>
        
        <category>life</category>
        
        <category>english</category>
        
        
      </item>
    
      <item>
        <title>Перекладывание</title>
        <description>&lt;p&gt;Иногда говорят: это тебе не джейсоны перекладывать, тут думать надо. А между
прочим, перекладывать джейсоны – очень трудное занятие.&lt;/p&gt;

&lt;p&gt;Прилетает вам джейсон из сети. Надо его прочитать, провалидировать, распарсить
даты, подрезать лишнее. Потом выгрести из базы то, из кэша се, из S3 третье и
все это собрать в нечто нужное бизнесу. Сделать эксельку, положить в S3 и
отписать в очередь.&lt;/p&gt;

&lt;p&gt;На каждом шаге может быть сто причин для эксепшена. Записать логи, не раскрывая
бизнес-данных и секретов, собрать исключения и отправить в Сентри.&lt;/p&gt;

&lt;p&gt;Иные джейсоны пятиэтажной вложенности. Нужно рыскать по их кишкам и строить
обратные мапы (индексы). Потом передавать по пять индексов в другие функции.&lt;/p&gt;

&lt;p&gt;Читать из базы миллион джейсонов так, чтобы не умереть от нехватки памяти в AWS.&lt;/p&gt;

&lt;p&gt;В идеале покрыть все случаи тестами, желательно с Докером, чтобы были настоящие
база, Редис, S3 и так далее.&lt;/p&gt;

&lt;p&gt;Все еще легко, на ваш взгляд? Не знаю, мне кажется трудным. Поэтому над
“перекладыванием” я не смеюсь.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Jul 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/json-pass/</link>
        <guid isPermaLink="true">https://grishaev.me/json-pass/</guid>
        
        <category>programming</category>
        
        <category>json</category>
        
        
      </item>
    
      <item>
        <title>Excel и CSV</title>
        <description>&lt;p&gt;Маленькая техническая заметка. Не пользуйтесь CSV в надежде, что он откроется в
Экселе. Если ваши потребители – люди с Экселем (а таких большинство), нужно
генерить &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xlsx&lt;/code&gt;, а не &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.csv&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Дело в том, что Эксель писали в Микрософте. Может быть, сегодняшний MS уже обрел
какую-то человечность. Но Эксель отсчитывает возраст с 1985 года – прямо как я –
и старше многих читателей этой заметки. Поэтому ни о какой человечности говорить
не приходится.&lt;/p&gt;

&lt;p&gt;Эксель никогда не откроет CSV без ошибок. Он обязательно промажет с
разделителем: если в файле запятая, он ищет точку с запятой и наоборот. Для
обхода придумали грубый костыль: в первой строке может быть выражение sep=, и
тогда Эксель возьмет запятую. Но этот заголовок ломает парсеры CSV, которые ни о
каком Экселе не слышали.&lt;/p&gt;

&lt;p&gt;Разделитель по умолчанию может зависеть от локали. У француза откроется, а у
австрийца не откроется.&lt;/p&gt;

&lt;p&gt;Эксель по-прежнему игнорирует UTF8. Немецкие умляуты становятся
кракозябрами. Махинации с меткой BOM ни к чему не приводят.&lt;/p&gt;

&lt;p&gt;В Экселе есть мастер импорта из CSV, но можно подумать, людям больше нечем
заняться, как импортировать что-то куда-то ради таблички.&lt;/p&gt;

&lt;p&gt;В общем, нужно напрячь булки и выкинуть CSV, и вместо этого генерить нормальный
Эксель.&lt;/p&gt;

&lt;p&gt;Если вдруг у вас Джава или Кложа, берите fastexcel и fastexcel-reader – они
быстрее и компилируются Граалем. Все, что основано на Apache POI, тормозное и не
компилируется Граалем. Я эту дорогу прошел и вот делюсь с вами.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Jul 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/csv-to-xlsx/</link>
        <guid isPermaLink="true">https://grishaev.me/csv-to-xlsx/</guid>
        
        <category>programming</category>
        
        <category>excel</category>
        
        <category>csv</category>
        
        
      </item>
    
      <item>
        <title>Мои объявления</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/static/aws/avito-my/1.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Авито, страница “Мои объявления” — разве это не забавно? На экране все что
угодно, кроме моих объявлений. Огромная плашка, громадные пустоты. Слоеный
дизайн, когда каждый слой, пусть даже занимает сантиметр в ширину, растекается
на весь экран.&lt;/p&gt;

&lt;p&gt;Очередной калека-дизайнер, которому “не хватило места”. Важная часть уехала на
экран ниже — потому что первый экран занял всякий шлак.&lt;/p&gt;

&lt;p&gt;Считаю, таких дизайнеров надо даже не учить, а лечить. Обучение бессильно, пусть
действуют профильные специалисты.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Jul 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/avito-my/</link>
        <guid isPermaLink="true">https://grishaev.me/avito-my/</guid>
        
        <category>avito</category>
        
        <category>ui</category>
        
        <category>idiots</category>
        
        
      </item>
    
      <item>
        <title>Загрузка в Амазоне</title>
        <description>&lt;p&gt;У веб-панели S3 есть особенность: если скачать оттуда файл, Амазон поправит
расширение в зависимости от Content-Type, который назначили файлу при
создании. Например, если у файла нет расширения, а Content-Type равен
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application/json&lt;/code&gt;, то Амазон допишет в конец .json, чтобы файлик открылся.&lt;/p&gt;

&lt;p&gt;Казалось бы, хорошо? А вот что имеем на практике.&lt;/p&gt;

&lt;p&gt;Если залить файл &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.json.gzip&lt;/code&gt;, внутри которого сжатый Gzip-ом JSON, и
указать заголовки &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type: application/json&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Encoding: gzip&lt;/code&gt;, то
при загрузке произойдет следующее.&lt;/p&gt;

&lt;p&gt;Файл будет декодирован Амазоном, чтобы клиенту не пришлось делать это руками. Не
бог весть какая помощь, потому что и текстовые редакторы, и файловые менеджеры
открывают gzip-файлы. Но ладно.&lt;/p&gt;

&lt;p&gt;После раскодировки Амазон смотрит: что там внутри? Application/json? Значит
удалим &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gzip&lt;/code&gt; и добавим &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.json&lt;/code&gt;. В результате получается файл
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.json.json&lt;/code&gt;. Я не шучу, проверьте сами.&lt;/p&gt;

&lt;p&gt;Второй случай: я залил в Амазон файл &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;report.xlsx&lt;/code&gt;, но указал не тот
Content-Type. Указал старый &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application/vnd.ms-excel&lt;/code&gt; для xls документов, а
надо было такую колбасу:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&lt;/code&gt;. При
загрузке Амазон молча исправил расширение с &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xlsx&lt;/code&gt; на &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xls&lt;/code&gt;. А Эксель тоже
хорош: по клику на файл он пишет, что формат битый, ничего не знаю – нет бы
первые 100 байтов проверить, тупица.&lt;/p&gt;

&lt;p&gt;На ровном месте Амазон заруинил файл, хотя никто об этом не просил.&lt;/p&gt;

&lt;p&gt;Понимаете, не нужно мне помогать! Не нужно что-то тайно переименовывать для моей
же пользы. Если прям чешется в одном месте – спроси, и я нажму “больше не
спрашивать”.&lt;/p&gt;

&lt;p&gt;Кроме того, надо помнить: в Амазоне работают не боги, а такие же кодеры, как и
везде. Перед нами обычный баг, который живет в проде не один год, и никому нет
дела. Баг состоит в том, что махинации с расширением нужно производить только
если у файла нет расширения. Вдобавок у расширения приоритет выше, чем у
Content-Type, потому что последний – это метаинформация, которая может
потеряться или исказиться. Вероятность потерять расширение гораздо ниже, нежели
Content-Type.&lt;/p&gt;

&lt;p&gt;Верю, что когда-нибудь в Амазоне это поймут.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Jul 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/amazon-download/</link>
        <guid isPermaLink="true">https://grishaev.me/amazon-download/</guid>
        
        <category>programming</category>
        
        <category>aws</category>
        
        <category>s3</category>
        
        <category>files</category>
        
        
      </item>
    
      <item>
        <title>Время в Interstellar</title>
        <description>&lt;p&gt;Вы же смотрели Интерстеллар? Помните высадку на планету с волной? А музыку в
фоне, такую тревожную, помните? Тик-так, тик-так по нарастающей?&lt;/p&gt;

&lt;p&gt;Этот тик-так — неспроста. Каждый тик равен 1.37 секунды, и за это время на Земле
проходят сутки. Именно такое соотношение времени между Землей и той планетой
из-за близости к черной дыре. Ганс Циммер гений.&lt;/p&gt;

&lt;p&gt;Когда знаешь об этом, в сцену добавляется новый оттенок. Теперь уже не смотришь
на метания за разбитым кораблем: слушаешь тик-так и представляешь, как впустую
проходит чья-то жизнь — твоя, например.&lt;/p&gt;

&lt;p&gt;Иногда по вечерам, вытряхнув себя из-за компа, я чувствую что-то похожее. Словно
жизнь — это фильм, а в фоне кто-то цокает языком. Исправляешь чей-то быдлокод и
косяки, потом идешь домой и думаешь — что я вообще делал?&lt;/p&gt;

&lt;p&gt;Нечто похожее встретилось в дневниках Корнея Чуковского времен блокады
Ленинграда: “дни сгорают как бумажные”. Потому он и великий писатель, что не
уходят, не летят, а именно сгорают.&lt;/p&gt;

&lt;p&gt;Впрочем, потом меня отпускает, и я снова иду править чужой код и косяки. И так
постоянно.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;500&quot; src=&quot;https://www.youtube.com/embed/60h6lpnSgck&quot; title=&quot;Interstellar | “Tidal Wave&amp;quot; Full Scene (Anne Hathaway, Matthew McConaughey) | Paramount Movies&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Fri, 05 Jul 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/interstellar-tick/</link>
        <guid isPermaLink="true">https://grishaev.me/interstellar-tick/</guid>
        
        <category>life</category>
        
        <category>interstellar</category>
        
        
      </item>
    
      <item>
        <title>Список через запятую</title>
        <description>&lt;p&gt;Одна из самых дурацких вещей в айти – это список через запятую, например:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(1, 2, 3)
[&quot;test&quot;, &quot;foo&quot;, &quot;hello&quot;]
[{:id 1}, {:id 2}, {:id 3}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Каждый, кто работал с таким форматом, знает, какой геморрой учитывать
запятые. Элементы нельзя просто записать в цикле. Нужно собрать их в массив, а
потом join-ить запятой. Это сводит на нет стриминг элементов, когда их много. А
чтобы работал стриминг, нужно завести флажок “запятая уже была”, выставить его в
первый раз и постоянно проверять: была или не была?&lt;/p&gt;

&lt;p&gt;То есть на каждом шаге из миллиона нужно делать эту проверку, которая сработала
один раз. Из-за какой-то никчемной запятой.&lt;/p&gt;

&lt;p&gt;Какие проблемы возникнут, если запятые убрать?&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(1 2 3)
[&quot;test&quot; &quot;foo&quot; &quot;hello&quot;]
[{:id 1} {:id 2} {:id 3}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Не вижу причины, по которой любой их списков не может быть распаршен. Все три
читаются и подлежат парсингу на ура.&lt;/p&gt;

&lt;p&gt;В одном скобочном языке запятые вообще считаются пробелами: они уничтожаются
парсером, словно их нет. И это никак не влияет работу: все читается, и даже
лучше: меньше визуального шума.&lt;/p&gt;

&lt;p&gt;Список через запятую – рудимент, от которого пора избавиться. Случись вам
изобретать свой формат данных – откажитесь от запятых как значимых символов.&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Jul 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/comma-separated/</link>
        <guid isPermaLink="true">https://grishaev.me/comma-separated/</guid>
        
        <category>programming</category>
        
        <category>comma</category>
        
        <category>csv</category>
        
        <category>list</category>
        
        
      </item>
    
      <item>
        <title>Выпадашка в Хроме</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/static/aws/chrome-dropdown/1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;На скриншоте — типичная ситуация наших дней. По клику на аватару появляется
выпадашка, но содержимое не вмещается, и у выпадашки появляется прокрутка.&lt;/p&gt;

&lt;p&gt;Окно браузера растянуто максимально, ничего не сжато. Зум нулевой. Никаких
вредоносных действий с моей стороны. Просто дизайнеру “не хватило” места. Еще
бы: если обернуть каждый элемент в паддинг, скруглить углы, добавить отступы где
только можно, поместить всю фигуру в другой паддинг, сместить вниз — откуда ж
возьмется место?&lt;/p&gt;

&lt;p&gt;На полном серьезе спрашиваю: что происходит с фронтендерами? Может у них
пост-ковидный синдром? Вакцина дала побочку? Иначе это не объяснить. Дай
фронтендеру экран размером со стену — и он поместит все нужное в выпадашку,
которая появится по клику на гамбургер. Внутри все “воздушное”, не хватает
места, и появляется прокрутка.&lt;/p&gt;

&lt;p&gt;Раньше можно было понять: разрешение 800 на 600, кривой IE6, умирающий Netscape,
ранние оперы и фейерфоксы. У каждого багов — как блох на жучке. Но сегодня-то
что? Везде ретины, 4К, только Хром и его поделки. Что мешает делать нормально:
без выпадашек с прокрутками?&lt;/p&gt;

&lt;p&gt;Какая-то загадка.&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Jul 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/chrome-dropdown/</link>
        <guid isPermaLink="true">https://grishaev.me/chrome-dropdown/</guid>
        
        <category>ui</category>
        
        <category>chrome</category>
        
        <category>dropdown</category>
        
        
      </item>
    
      <item>
        <title>Датомик</title>
        <description>
&lt;p&gt;Лет семь назад я увлекся &lt;a href=&quot;https://www.datomic.com/&quot;&gt;Датомиком&lt;/a&gt;. Кто не знает, это база данных,
написанная на Сlojure и Java. Среди ее плюсов – неизменяемость (данные только
накапливаются), независимость от времени (можно вернуться в прошлое) и
выразительный язык запросов Datalog, взятый из Пролога.&lt;/p&gt;

&lt;p&gt;Я долго ходил вокруг да около, а потом повезло: семья уехала на неделю, и я
провел это время, читая доки и экспериментируя. У меня тогда был пет-проект на
Postgres, и я перевел его на Датомик. Позже я использовал его в других проектах,
в том числе в Хайлоад-капах от Mail.ru. Я &lt;a href=&quot;/en/pg-to-datomic/&quot;&gt;написал статью&lt;/a&gt; про миграцию
с Постгреса на Датомик, и она даже попала на главную Хакер-Ньюз.&lt;/p&gt;

&lt;p&gt;У Датомика есть важное свойство: он красивый. Бросил взгляд, и сразу мысль – да,
круто. Это изящная абстракция, воздвигнутая на элементарных вещах. Мало
проектов, где эти свойства – изящность и простота – выражены столь же ярко.&lt;/p&gt;

&lt;p&gt;Я много играл с Датомиком и даже пытался реализовать его поверх реляционных
баз. Кое-что мне удалось, но поделки я так и не довел до ума. Практика показала,
что скучные Postgres/Maria удобней в работе.&lt;/p&gt;

&lt;p&gt;Прежде всего, неизменяемость из коробки не нужна. Там, где нужно хранить
историю, Postgres/Maria справляются за счет триггеров или запросов вида &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSERT
...  FROM UPDATE/INSERT/DELETE&lt;/code&gt;. Когда говорят об исторических данных, у меня
сразу вопрос – как вы ими пользуетесь? Они вообще вам нужны?&lt;/p&gt;

&lt;p&gt;Далее: страшные буквы GDPR. Если пользователь хочет удалить свои данные, с
Датомиком будут проблемы. В Датомике атрибуты не меняются, а добавляются новые с
поздним временем. Поэтому, читая один и тот же атрибут в разное время, получим
разные значения. Но GDPR требует, чтобы в базе физически не было личных
данных. Если вы записали в базу атрибут &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(42, :user/name &quot;XXXXXX&quot;)&lt;/code&gt;, то старый
атрибут &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(42, :user/name &quot;Ivan&quot;)&lt;/code&gt; остался, и прочитать его – дело техники.&lt;/p&gt;

&lt;p&gt;В Датомике есть функция физической очистки атрибутов, но она дорогая и
выполняется во время обслуживания, то есть требует остановки прода.&lt;/p&gt;

&lt;p&gt;Можно отключить историю атрибутов, но тогда вопрос – зачем вообще история,
которой так гордится Датомик?&lt;/p&gt;

&lt;p&gt;Кто-то скажет: ладно, пусть имя пользователя будет без истории, а остальное с
историей. Практика показывает, что GDPR требует чистки чуть ли не всех
таблиц. Когда мы удаляли пользователей из приложения с короткими видео, то
пришлось шерстить десятки таблиц: профили, лайки, коменты, друзья, подписчики,
обращения, сообщения… это были недели ада. Если представить, что у каждой
таблицы история, ситуация станет еще хуже.&lt;/p&gt;

&lt;p&gt;У Датомика никакой поиск, нет сортировки и пагинации. Как с этим жить – решать
вам. Кого ни спрашивал – каждый пилит свои костыли, каждый случай – свое
маленькое приключение.&lt;/p&gt;

&lt;p&gt;Есть еще кое-что: Датомик, при всей своей красоте, нарушает доменную область. Я
как-то говорил о том, что главное свойство домена – его ортогональность другим
доменам. Другими словами, у базы и кода на Сlojure разные зоны
ответственности. Датомик стирает эту границу: он превращает базу в хранилище, к
которой только он имеет доступ. Этому есть объяснение, поскольку физически
данные хранятся как бинарные дампы с кусками индексов, и работать с ними умеет
только Датомик.&lt;/p&gt;

&lt;p&gt;На практике это выливается в то, что если я хочу поправить записи в Датомике,
нужно писать код на Кложе, который выгребает данные, исправляет и записывает в
базу.&lt;/p&gt;

&lt;p&gt;Это резко контрастирует с Postgres/Maria, которые предлагают свои языки и
инструменты для работы с данными. Это и есть домен, когда я могу исправить
данные, не обращаясь к Кложе. Бывает, я сижу в psql днями и неделями,
манипулируя данными на чистом SQL.&lt;/p&gt;

&lt;p&gt;Датомик нарушает это правило. Да, у него есть веб-консоль, но по сравнению с
psql она крайне уныла, а до программ уровня PGAdmin или DBeaver ей как до луны.&lt;/p&gt;

&lt;p&gt;Датомик как мороженное: он красивый, но позже липнет и затекает туда, где ему не
следует быть. Поэтому я прекратил с ним шашни и продолжаю работать с
Постгресом. И кстати, Постгрес в последние годы просто летит в космос,
нарадоваться не могу.&lt;/p&gt;

&lt;p&gt;Выбирая Датомик, имейте в виду вышесказанное.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Jul 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/datomic/</link>
        <guid isPermaLink="true">https://grishaev.me/datomic/</guid>
        
        <category>programming</category>
        
        <category>datomic</category>
        
        
      </item>
    
      <item>
        <title>Кража дизайна</title>
        <description>&lt;p&gt;Иногда я слушаю дизайнера Женю Арутюнова, он говорит клевые вещи. Говорит мягко
и с самоиронией. Не бывает так, что слушаешь тезис, а потом: кто не со мной, тот
мудак.&lt;/p&gt;

&lt;p&gt;У Жени как-то спросили, как не красть чужой дизайн. Он ответил: спокойно воруй,
потому что даже если не будет последствий, ты увидишь, что чужой дизайн не
решает задачу полностью. Чтобы решал, нужно поправить здесь, поправить тут, и в
итоге краденый дизайн либо развалится, либо изменится так, что перестанет быть
краденым.&lt;/p&gt;

&lt;p&gt;То же самое можно сказать про код. Даже если вы украли чей-то код, заставить
работать его на вас трудно. Адаптация кода под задачу займет столько времени,
что проще написать свой. А если выигрыш и возможен, его трудно оценить.&lt;/p&gt;

&lt;p&gt;Иные проекты тянут сотни зависимостей — их написали другие люди. И все-таки мы
пишем и отлаживаем свой код в папке src. Есть даже похожие сервисы и бизнесы, и
некоторые с открытым кодом. Но нет — не смотря на колоссальные объемы открытого
кода, нас продолжают нанимать. Мы пишем код, ловим баги, сидим в отладчике.&lt;/p&gt;

&lt;p&gt;Именно поэтому когда случилась колоссальная утечка Яндекса — 50 гигабайтов
исходников — я даже ухом не повел. Их обсасывали на всех новостных ресурсах, но
скажите: что вы хотели там найти? Обычный корпоративный код: прочитать JSON,
проверить его, положить в базу, дернуть очередь, записать в лог, собрать
эксепшены в сборщик ошибок.&lt;/p&gt;

&lt;p&gt;По той же причине я скептичен к коду, написанному ИИ. Пусть он пишет тетрис и
змейку, этого добра на Гитхабе пруд пруди. Как мне поможет ИИ, если нужно
впендюрить очередной if цепочку бизнес-процессов, чтобы ничего не упало? Как он
придумает новый твиттер? Как он придумает игру, где участники отрывают жопы от
стула(!) и идут в парк ловить виртуальных зверей?&lt;/p&gt;

&lt;p&gt;Идея первична, лишь затем следует код.&lt;/p&gt;

&lt;p&gt;Вот почему, имея горы открытого кода, мы, словно герой Никулина, ищем “такой же,
но с перламутровыми пуговицами”. Потому что требования. Потому что это наша
работа.&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Jun 2024 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/steal-design/</link>
        <guid isPermaLink="true">https://grishaev.me/steal-design/</guid>
        
        <category>programming</category>
        
        <category>design</category>
        
        
      </item>
    
  </channel>
</rss>
