<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ivan Grishaev's blog</title>
    <description>Writing on programming, education, books and negotiations.
</description>
    <link>https://grishaev.me/</link>
    <atom:link href="https://grishaev.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 05 Feb 2025 07:33:55 +0000</pubDate>
    <lastBuildDate>Wed, 05 Feb 2025 07:33:55 +0000</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>Просто берите Postgres</title>
        <description>&lt;p&gt;Несколько месяцев назад завирусилась статья &lt;a href=&quot;https://mccue.dev/pages/8-16-24-just-use-postgres&quot;&gt;Just Use
Postgres&lt;/a&gt;. Она была на всех
площадках, а том числе в переводе на русский. Я чуть было не репостнул ее, но
передумал. На проверку статья оказалось поверхностной: скажем, автор на полном
серьезе сравнивает Postgres с SQLite. Мне показалось, в статье нет глубины, и
тезис из заголовка ничем не подтверждается. И хотя вывод верный — Just Use
Postgres — автор пришел к нему странным способом.&lt;/p&gt;

&lt;p&gt;В своей заметке я расскажу, как пришел к аналогичному выводу сам — только
доводов будет больше.&lt;/p&gt;

&lt;p&gt;Последний год я занимаюсь Посгресом все активнее. Я мигрировал большую систему с
OpenSearch на Postgres. Это 30 сервисов с большими JSON-документами — от
нескольких тысяч до миллионов в каждом сервисе. Нужен поиск по вложенным полям,
поиск по вхождению, простое ранжирование, а также всякая отчетность. И пока я
все это мигрировал, узнал о Постгресе столько, что хватит на несколько
докладов. В том числе — почему именно Постгрес так хорош.&lt;/p&gt;

&lt;p&gt;Я давно понял одну вещь, а миграция только ее укрепила. Хранение данных
определяет разработку. Это фундамент, относительно которого планируешь куда
копать и что возводить. Кто-то считает, что абстракцией можно уравновесить любое
хранилище: сделать так, что get-by-id либо идет в базу, либо качает файл из
S3. Это справедливо в простых случаях. На практике каждое хранилище вносит свои
особенности, с которыми нужно мириться. Если у вас условные OpenSearch или
Cassandra, их особенности будут фонить сквозь код. Избежать этого нельзя. На мой
взгляд, Постгрес фонит меньше всех: с ним у вас будет меньше проблем в
абстракцях.&lt;/p&gt;

&lt;p&gt;Но довольно расплывчатых слов, перейдем к конкретике. Начну с того, что Постгрес
легко ставится и работает на любой машине, будь то локальный комп с Виндой,
Маком, Линуксом или сервер. Он есть во всех пакетах. Постгрес написан на Си, и
на выходе бинарный файл, которому не нужна Джава. Помню, как ставил Датомик на
Убунте — это было тяжело. Вроде бы Джава, “compile once, run everywhere (c)” —
но вылетают ошибки о том, что классы не найдены. Оказалось, нужна другая Джава,
которую нужно ставить отдельно. С Постгресом такого не было никогда.&lt;/p&gt;

&lt;p&gt;Для Мака есть проект &lt;a href=&quot;http://postgres.app/&quot;&gt;Postgres.app&lt;/a&gt;. Это приложение с
графическим интерфейсом, чтобы запустить Postgres. Можно скачать любую версию по
отдельности; есть убер-приложение со всеми версиями и установленным PostGis. Так
что любой человек может завести Postgres + PostGis в два клика.&lt;/p&gt;

&lt;p&gt;Особой похвалы заслуживает &lt;a href=&quot;https://hub.docker.com/_/postgres&quot;&gt;докерный образ
Postgres&lt;/a&gt;. Он очень гибко настраивается:
почти любую опцию можно задать переменной среды, легко прокинуть свою
конфигурацию. У образа убойная фича: папка, куда можно накидать файлы .sql, .sh
и .gz. При запуске образ запустит эти файлы в алфавитном порядке. Если у вас
миграции или посев тестовых данных, смонтируйте файлы в образ, и при запуске
получится готовая база.&lt;/p&gt;

&lt;p&gt;По наивности я думал, что так работают образы других баз данных. Оказалось
нет. Запустил образ Кассандры, а она ничего не знает о первичной
настройке. Нужны разделы и таблицы? Создай сам. Нужны топики в Кафке? Создай
сам. Нужна точка обмена в RabbitMQ? Создай сам! После запуска образа нужно
дождаться, пока поднимутся все потроха (обычно это поллинг порта), а потом
создать таблицы и топики. Почему-то в Постгресе подумали над этим, а остальным
безразлично. Считаю, что образ postgres нужно брать за образец.&lt;/p&gt;

&lt;p&gt;У документо-ориентированных баз и key-value хранилищ есть преимущество: они
хорошо реплицируются в силу дизайна. Часто говорят: вы со своим Постгресом
упретесь в потолок, когда нужно хранить данные в разных датацентрах, но при этом
иметь легкий доступ из одного центра к другому. Условная Кассандра чувствует
себя лучше в подобных условиях. Но забывают, что реплицировать нужно не все
данные, а только их часть. Например, только базовые сведения о пользователях и
сущностях, чтобы быстро выяснить, в каком дата-центре они лежат и выполнить
запрос там.&lt;/p&gt;

&lt;p&gt;Так у нас было устроено в одном облачном хостинге. В каждом дата-центре данные
хранились в MySQL, а пользователи и права доступа дублировались в кластер
Кассанды, который в силу репликации был доступен отовсюду.&lt;/p&gt;

&lt;p&gt;Postgres тоже не стоит на месте, и в нем все больше средств репликации и
кластеризации. Есть проекты вроде Debezium, которые читают журнал WAL и стримят
изменения в другие базы, очереди и так далее.&lt;/p&gt;

&lt;p&gt;Postgres силен в проекции данных. Бывает, на одни и те же данные нужно смотреть
под разным углом: делать группировки, поворачивать таблицы. Часто нужны левые
соединения: это когда слева находится полный набор данных, а справа — неполный,
и данные слева не должны пропадать. В редких случаях нужно декартово
произведение двух таблиц (каждый по каждому), что тоже делается легко. Есть
много функций, которые разбивают данные на строки (переводят массивы в строки
элементов) и наоборот — агрегируют записи в коллекции.&lt;/p&gt;

&lt;p&gt;Postgres силен рекурсивными запросами. Это когда запрос разбивается на две
части: первичный посев и рекурсивная логика, которая принимает предыдущий
результат и порождает новый. Пока он не пустой, строки складываются в итоговую
таблицу. За счет рекурсии прекрасно обходятся таблицы со ссылками на себя,
например структура папок, иерархия сущностей.&lt;/p&gt;

&lt;p&gt;В финансах очень важны оконные функции: посчитать нарастающий доход, остаток на
счете, стоимость проекта по неделям и многое другое. Оконные функции слегка
пугают, но достаточно прочитать одну книжку, чтобы овладеть ими (см ниже). Без
оконных функций происходит следующее: человек выгребает из базы массив данных и
проделывает вручную то, что умеет база — только на порядок медленней и с кучей
багов. О похожем случае &lt;a href=&quot;/postgres-csv/&quot;&gt;я как-то уже писал&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Огромную пользу можно получить из связки materialized view и pg_cron. Напомню,
materialized view — это вьюхи, которые сбрасываются в физическую таблицу. На нее
можно навесить индексы, чтобы ускорить поиск. Польза таких вьюх огромна — это
различные проекции и отчеты. Чтобы каждый раз не гонять огромный запрос, его
“запекают” во вьюху и материализуют, после чего выбирают строки обычным SELECT.&lt;/p&gt;

&lt;p&gt;В текущем проекте мы храним огромные JSON-документы. У них сложная структура, но
отчетность должна быть плоской. Сначала я писал запросы со множеством операторов
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&amp;gt;&amp;gt;&lt;/code&gt;, которые извлекают данные из JSON по пути в виде массива. Но со временем
стал делать плоские представления этих документов вьюхами — и дело пошло
лучше. Аналитикам и менеджерам тоже легче: им постоянно нужные данные, и они
пишут запросы сами, чтобы не дергать программистов.&lt;/p&gt;

&lt;p&gt;Расширение &lt;a href=&quot;https://github.com/citusdata/pg_cron&quot;&gt;pg_cron&lt;/a&gt; выводит Постгрес на
новый уровень: с его помощью можно выполнить любой скрипт по
расписанию. Расширение использует стандартный синтаксис crontab. У меня
множество крон-задач на материализацию вьюх и прогрев индексов — их
принудительный загон в оперативную память. С &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg_cron&lt;/code&gt; база становится полностью
автономной: не нужен сторонний крон, который пинает скрипты. Я недоволен только
одним: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pg_cron&lt;/code&gt; — стороннее расширение, и его нет в поставке. Однако облачные
провайдеры вроде Амазона предустанавливают его.&lt;/p&gt;

&lt;p&gt;На сегодня Постгрес — лучшая база для работы с JSON-документами. Я не в восторге
от JSON и насколько возможно, храню данные в таблицах. Но порой выбора нет:
бизнес завязан на какие-то стандарты. Пример — медицинский &lt;a href=&quot;https://www.hl7.org/fhir/overview.html&quot;&gt;формат
FHIR&lt;/a&gt;. Это огромные документы тройной и
более вложенности. Раскладывать их по таблицам и собирать джоинами тяжело,
поэтому их хранят в поле jsonb. У меня похожая ситуация : 30 сервисов, каждый
отвечает за свою бизнес-сущность. Это большие JSON-ы, и сервисы гоняют их
туда-сюда; на них завязан фронтенд. Я пытался представить их в плоском виде, но
это очень трудно.&lt;/p&gt;

&lt;p&gt;Постгрес предлагает богатные возможности для JSON: доступ ко вложенным полям по
массиву ключей, обновление вложенных полей, слияние словарей, гибкую замену,
индексацию документа целиком или подмножества… Есть даже встроенный язык &lt;a href=&quot;https://www.postgresql.org/docs/current/functions-json.html#FUNCTIONS-SQLJSON-PATH&quot;&gt;JSON
PATH&lt;/a&gt;
для поиска! Да, внутри SQL может быть строка с мини-языком JSON PATH. Я
использую его в сочетании индексами btree по отдельным полям.&lt;/p&gt;

&lt;p&gt;В последнем Постгресе 17 появилась функция
&lt;a href=&quot;https://www.postgresql.org/docs/current/functions-json.html#FUNCTIONS-SQLJSON-TABLE&quot;&gt;JSON_TABLE&lt;/a&gt;. По
указанной спеке она переводит JSON в таблицу с выводом типов. Если у вас вектор
мап, то легко получить таблицу. JSON_TABLE поддерживает вложенность, в
результате чего можно развернуть мапу мап в плоскую таблицу. Далее вы
материализуете ее, ставите на крон и готово — можно выбрать плоские данные
селектом.&lt;/p&gt;

&lt;p&gt;Для Постгреса создано великое число обучающих материалов: книг, курсов,
самоучителей. Многие из них изначально созданы на русском, то есть не являются
переводами. Российский вендор Postgres Pro не только пишет отличные книги, но и
&lt;a href=&quot;https://postgrespro.ru/education/books&quot;&gt;выкладывает на сайте&lt;/a&gt;
бесплатно. Бесплатно! Я читал некоторые из них, и это не халтура, а
действительно проработанные материалы. Книга Егора Рогова “Postgres изнутри”
описывает устройство базы в мельчайших деталях. Наверное, нет книги лучше, чтобы
понять, как работают современные базы данных.&lt;/p&gt;

&lt;p&gt;В Постгресе отличный анализатор запросов: он покажет, какие стратегии выбрал
движок для обхода таблиц и джоинов; какие индексы были использованы и какую их
часть пришлось читать с диска. Да, понадобится время, чтобы понять его вывод. Но
иные базы данных не предлагают вообще ничего! Просто дают рекомендации, а дальше
пробуй сам. Есть расширения, которые фиксируют медленные запросы и их план
выполнения. Расширение pg_stat_statements ведет статистику по всем запросам:
число вызовов, частота, минимальное, максимальное, среднее время выполнения,
ожидание, объем передачи данных и прочее. Все это помогает отлаживать случаи,
когда базе нехорошо.&lt;/p&gt;

&lt;p&gt;В Постгресе достойный полнотекстовый поиск. Для начала подойдет &lt;a href=&quot;https://www.postgresql.org/docs/current/pgtrgm.html&quot;&gt;триграммный
нечеткий поиск&lt;/a&gt; по
коэффициенту совпадения. Позже можно добавить ts_vector — вектор лексем и
стемминга. Из коробки есть стемминг для десятка языков, в том числе
русского. Когда заходят разговоры об OpenSearch и других поисковых движках,
оказывается, что на Постгресе можно сделать не хуже и главное — без добавления в
систему нового узла.&lt;/p&gt;

&lt;p&gt;У Постгреса обширный тулинг: консольные и графические клиенты — браузерные и
настольные. PGAdmin, DBeaver, DataGrip… стандартная утилита psql покрывает
множество случаев. Она показывает сведения обо всех сущностях, выводит данные
разными способами, умеет импорт-экспорт. Можно редактировать запросы и сущности
во внешнем редакторе, например Emacs или Vim.&lt;/p&gt;

&lt;p&gt;Постгрес поддерживает &lt;a href=&quot;https://www.postgresql.org/docs/current/sql-copy.html&quot;&gt;апишку
COPY&lt;/a&gt;, с помощью которой
данные гоняют в обе стороны. Если я хочу слить таблицу в CSV, пишу что-то вроде:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_table&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;STDOUT&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEADER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CSV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;и Постгрес выплевывает CSV-шный файл. Можно записать файл на диск или читать
построчно из сети. Это работает и в обратную сторону: если я хочу вставить CSV в
таблицу, то пишу:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_table&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;STDIN&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HEADER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CSV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;и стримлю в соединение строки CSV. Кроме CSV, Постгрес поддерживает бинарный
формат. Спецификация довольна проста, и на практике он работает на 30% быстрее.&lt;/p&gt;

&lt;p&gt;Словом, гонять большие данные в Постгресе очень просто. Я как-то &lt;a href=&quot;/pagination/&quot;&gt;писал о
том&lt;/a&gt;, что источник данных хорош настолько, насколько удобно
забрать из него данные. В том же OpenSearch забор данных превращается в муку:
нужна ручная пагинация по страницам. А Постгрес выплюнет миллион строк и не
моргнет глазом — только успевай их принимать.&lt;/p&gt;

&lt;p&gt;Не менее важна генерация данных. Скажем, у вас на проде миллион записей, и нужно
воспроизвести сложный запрос. Если в локальной базе только тысяча записей, он
поведет себя по-другому; нужен именно миллион. Как вы их вставите?&lt;/p&gt;

&lt;p&gt;Обычно на этом месте расчехляют Питон и всякие FakeMockGenerator-ы — библиотеки
для генерации случайных данных по спеке. Этот код долго писать, и вставка тоже
будет долгой, потому что мы передаем данные от клиента серверу. Еще нужен
рантайм, то есть среда, где запускается код: какая-то машина, нода, плейбук.&lt;/p&gt;

&lt;p&gt;А ведь достаточно написать примерно такой скрипт и выполнить его в PGAdmin:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;documents&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gen_random_uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jsonb_build_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'__generated__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'meta'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonb_build_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'eyes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'color-%s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'attrs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonb_build_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'user-%s@test.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Test Name %s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'roles'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonb_build_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'admin'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;generate_series&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;returning&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Он вставит в базу столько JSON-документов, сколько указано в функции
generate_series. Хочешь миллион? Да пожалуйста. Важно, что данные генерятся
&lt;strong&gt;сразу на сервере&lt;/strong&gt; — мы не гоняем их по сети. Все происходит внутри Постгреса,
и это значительно быстрее. Миллион огромных JSON-ов вставляются за несколько
минут. Этот скрипт легко поправить, чтобы поля высчитывались по-другому. Каждый
может скопировать его и выполнить на свой базе, не прибегая к Питону.&lt;/p&gt;

&lt;p&gt;Иные жалуются, что SQL устарел. Мол, это архаичный язык, он плохо
шаблонизируется, и логично выразить его данными, например JSON-ом. Что тут
сказать… Да, SQL со скрипом ложится на всякие ORM. Но сегодня полно библиотек,
которые строят SQL из объектов и коллекций. А во-вторых, мне нравится
самобытность SQL, то, что он остается вещью в себе. Когда пишешь большие
запросы, начинаешь видеть его красоту. Со временем понимаешь, что заменить его
нечем — слишком много ситуаций и выражений.&lt;/p&gt;

&lt;p&gt;Я рассматриваю SQL как REPL к данным. Наверное, вы знаете, что программисты на
Лиспе днями сидят в репле. О преимуществе REPL-driven develpoment сказано много,
и нет смысла повторять. По аналогии, SQL — это репл для данных со всеми
преимуществами REPL-driven develpoment. Легко понять, какие данные прилетят в
код, выполнив запрос в базе. Вместо быдлокода, который вынимает тысячи записей,
исправляет их и записывает в базу, можно выполнить один UPDATE. Поймал себя на
том, что целыми днями сижу в PGAdmin, а к коду приступаю в последнюю очередь.&lt;/p&gt;

&lt;p&gt;Повторю тезис, который как-то высказывал. Данные — это отдельный домен. Ключевое
свойство домена — его ортогональность другим доменам. Я хочу, чтобы данные не
были привязаны ко всяким Питонам и Джавам. Я хочу управлять ими независимо от
языка или потребителей. Мне не нравятся встраиваемые хранилища или базы, которые
“сливаются” с приложением. Если данные можно извлечь только вызовом метода, я
пас.&lt;/p&gt;

&lt;p&gt;Рассказывать о том, как динамично развивается Постгрес, нет смысла. Это видно
всем. Есть классический Постгрес, есть вендорский Postgres Pro, где доступны
различные фичи до того, как они окажутся в классике — правда, за
деньги. Развиваются расширения, появляются новые вендоры, проводят митапы и
конференции, выходят книги, видосы… на любой запрос найдется контент.&lt;/p&gt;

&lt;p&gt;Важно, что сообщество Постгреса прошло проверку на адекватность. Как только один
&lt;em&gt;чудак&lt;/em&gt; заявил, что нужно выгнать русских разработчиков и откатить их код, ему
быстро объяснили, что к чему. Больше эту тему не поднимали, по крайней мере в
публичном пространстве.&lt;/p&gt;

&lt;p&gt;И вот теперь, в конце шестого листа, я говорю: &lt;em&gt;вот поэтому&lt;/em&gt; берите Постгрес.&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Feb 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/just-use-postgres/</link>
        <guid isPermaLink="true">https://grishaev.me/just-use-postgres/</guid>
        
        <category>programming</category>
        
        <category>postgres</category>
        
        <category>sql</category>
        
        
      </item>
    
      <item>
        <title>SOLID и контекст</title>
        <description>&lt;p&gt;Когда говорят про SOLID, забывают вот о чем. Принцип SOLID — типичный пример,
когда контекст, в котором возникло явление, важнее самого явления.&lt;/p&gt;

&lt;p&gt;SOLID возник в момент, когда в ООП-тусовке царил упадок. До повсеместного
перехода на ООП говорили, что объекты решат все проблемы. Достаточно выразить
сущности классами и нарисовать UML-схему — и все станет понятно. Звучит примерно
как “Земля плоская”, но тогда в это верили. И когда ООП-модель стала буксовать,
придумали SOLID, чтобы вдохнуть в нее новую жизнь.&lt;/p&gt;

&lt;p&gt;У SOLID есть даже не аналогия, а буквальный пример из жизни. Каждый тренер
знает, что главное у спортсмена — настрой (разумеется, не исключая питание и
тренировки). Если настрой в упадке, есть не совсем честные способы его
поднять. Скажем, когда команда проигрывает всухую, тренер берет таймаут и выдает
“заряженные” клюшки, которыми играли великие спортсмены. Или переставляет
участников местами, говоря, что сейчас будем играть по “секретной”
тактике. Поскольку спортсмены суеверны, это работает.&lt;/p&gt;

&lt;p&gt;Та же самая история у военных, полицейских, пожарных. У них есть церемонии
раздачи “заряженных” девайсов, например, касок погибших героев. Надевая такую
каску, боец буквально получает +100 к отваге. Вопрос о том, действительно ли
герой носил эту каску, тактично обойдем стороной.&lt;/p&gt;

&lt;p&gt;С принципом SOLID то же самое. Когда стало ясно, что нагромождение классов не
решает прошлых проблем, а только добавляет новых, кто-то придумал SOLID. Посыл в
том, что отныне мы не блуждаем в потемках, а идем к некой цели. Пишем не просто
быдлокод, а по некой методичке. И пусть она спорна и расплывчата, это неважно —
есть ориентир. Спортсмен снова мотивирован и готов брать рубежи.&lt;/p&gt;

&lt;p&gt;Поэтому отношение к SOLID у меня спорное. Смысловая составляющая высосана из
пальца, но запал колоссальный. Уже десятки лет люди спорят о том, как писать код
по SOLID правильно. В этом смысле я снимаю перед создателем шляпу, потому что
ведь надо так уметь! — вдохновить толпы народа без какой-либо конкретики.&lt;/p&gt;

&lt;p&gt;Но у любой легенды есть запас прочности, и актуальность SOLID подходит к
концу. Я понимаю, когда о нем пишут в рекламных блогах или курсах для
новичков. SOLID — это все и ни о чем, универсальный рецепт, из которого можно
выжать тысячи текстов. Но удивляет, когда кто-то всерьез рассуждает о том, как в
2025 году писать код по SOLID. Здесь можно сказать одно: как бы ни держалась
стюардесса, ее пора закопать.&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Jan 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/solid-context/</link>
        <guid isPermaLink="true">https://grishaev.me/solid-context/</guid>
        
        <category>solid</category>
        
        
      </item>
    
      <item>
        <title>SOLID и другие аббревиатуры</title>
        <description>&lt;p&gt;Читатель Дмитрий снял с языка одну мысль, которую я приберег для отдельной
заметки. Если коротко, все удачные аббревиатуры вроде SOLID, как правило,
высосаны из пальца. Вероятность, что первые буквы пяти слов образуют другое
емкое слово, равна нулю. Поэтому слова подгоняют под аббревиатуру.&lt;/p&gt;

&lt;p&gt;Другими словами, сначала придумывают емкий термин, затем под каждую букву ищется
слово. Разумеется, за уши притягивают лишние слова, как например принцип Liskov,
который никому не сдался. Но без Liskov не получилось бы слова, поэтому пришлось
взять.&lt;/p&gt;

&lt;p&gt;В своем комментарии Дмитрий приводит пример. Берем выразительную аббревиатуру,
например ANALSEX и просим чат-ГПТ придумать расшифровку. Чат справился
прекрасно:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;A: Abstraction&lt;/strong&gt; Focus on hiding complex implementation details and exposing
only essential features.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;N: Normalization&lt;/strong&gt; Ensure that data structures and databases are designed
efficiently, avoiding redundancy.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;A: Automation&lt;/strong&gt; Prioritize automating repetitive tasks and workflows to
increase efficiency and reduce errors.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;L: Loose Coupling&lt;/strong&gt; Design components to have minimal dependencies, making
systems more modular and easier to maintain.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;S: Scalability&lt;/strong&gt; Build systems capable of handling growth in users, data,
and operations effectively.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;E: Encapsulation&lt;/strong&gt; Keep implementation details private within modules or
classes, exposing only necessary interfaces.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;X: eXpandability&lt;/strong&gt; Design with future growth and adaptability in mind,
ensuring that new features can be added without major rewrites.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Особенно хорош последний пункт. Слов на X мало, поэтому чат выделил вторую букву
в eXpandability.&lt;/p&gt;

&lt;p&gt;И главное, все по делу: абстракции — нужны, автоматизация — нужна,
масштабирование — нужно, расширяемость — тоже. Не прикопаешься. Так что всем
внедрять ANALSEX! Обсудите с коллегами и расскажите начальству.&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Jan 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/solid-abbrev/</link>
        <guid isPermaLink="true">https://grishaev.me/solid-abbrev/</guid>
        
        <category>solid</category>
        
        <category>anal-sex</category>
        
        
      </item>
    
      <item>
        <title>Электронные квитанции</title>
        <description>&lt;p&gt;Иногда снабжающие организации присылают письма:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Иван Викторович!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Давайте беречь бумагу и планету! Перейдем на электронные квитанции во имя
добра. Согласны? Если да, откройте файл из вложения, заполните и отправьте.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Конечно, я за природу, планету и все такое. Открываю файл &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?????????????.doc&lt;/code&gt; из
вложения, смотрю, а там: укажите ФИО, адрес, юридический адрес, ИНН, реквизиты
счета, телефон, номер и дату договора, почту, а еще — название документооборота
и фирму-эмитент электронной подписи. Всего-то…&lt;/p&gt;

&lt;p&gt;Смотрю на этот файл минуту, а потом отправляю в корзину вместе с письмом. До
следующего раза.&lt;/p&gt;

&lt;p&gt;Хочется спросить: ребята, если вам так нужно перетащить меня в какую-то систему,
нельзя ли этому поспособствовать? Скажем, поручить кодеру Васе написать скрипт,
который вытащит мои данные из базы — я указывал их при заключении договора — и
состряпает PDF, который останется только подписать. Что, нельзя так?&lt;/p&gt;

&lt;p&gt;Наверняка эти письма рассчитаны на биг-боссов, которые пересылают их секретарше
Леночке со словами “разбери это дерьмо”. Но у меня нет секретарши, и тратить час
на заполнение Ворда я не хочу.&lt;/p&gt;

&lt;p&gt;Самое забавное — фирма уже высылает документы по электронной почте, но вдобавок
зачем-то кладет в почтовый ящик распечатки толщиной с палец. Уже который раз
пишу им, мол, перестаньте слать бумагу, электронка вполне устраивает. Но им
нужно заявление в Ворде.&lt;/p&gt;

&lt;p&gt;Удивительно, как быстро у людей деформируются мозги в больших фирмах.&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Jan 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/edocs/</link>
        <guid isPermaLink="true">https://grishaev.me/edocs/</guid>
        
        <category>life</category>
        
        <category>planet</category>
        
        
      </item>
    
      <item>
        <title>The Fuck</title>
        <description>
&lt;p&gt;Может быть, вы не знали, но есть программа с выразительным названием &lt;a href=&quot;https://github.com/nvbn/thefuck&quot;&gt;The
Fuck&lt;/a&gt;. Написана на Питоне, 90 тысяч звезд, работает следующим образом.&lt;/p&gt;

&lt;p&gt;Предположим, вы запустили что-то в терминале, но получили ошибку. Не указан
такой-то флаг, это депрекейтед, то-се. Если ввести &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fuck&lt;/code&gt;, то программа считает
предыдущую команду и повторит ее, но на этот раз правильно.&lt;/p&gt;

&lt;p&gt;Звучит непонятно, так что рассмотрим пример. Скажем, я сделал новую ветку и хочу
запушить ее на сервер:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout -b ssl-no-validation
git add .
git commit -m &quot;some changes&quot;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Вот что я получу:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fatal: The current branch ssl-no-validation has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin ssl-no-validation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Гит прекрасно понял, что я имел в виду, но предлагает ввести команду
повторно. Если же ввести &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fuck&lt;/code&gt;, то утилита считает bash_history и выполнит то,
что нравится Гиту.&lt;/p&gt;

&lt;p&gt;В последнем Гите это починили: теперь &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt; делает апстрим
самостоятельно. Однако долгое время меня выручал fuck.&lt;/p&gt;

&lt;p&gt;Сегодня я им не пользуюсь, но вспомнил вот почему. Программа хорошо расширяется
регулярками, и народ собрал целую кладезь fuck-рецептов. Получилась своего рода
энциклопедия бредовых случаев. Мне кажется, они достойны изучения просто затем,
чтобы знать, как делать не надо. Если же ваша программа оказалась среди рецептов
– это нужно быстро исправить.&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jan 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/the-fuck/</link>
        <guid isPermaLink="true">https://grishaev.me/the-fuck/</guid>
        
        <category>programming</category>
        
        <category>python</category>
        
        <category>fuck</category>
        
        
      </item>
    
      <item>
        <title>Постгрес и отчеты</title>
        <description>&lt;p&gt;В очередной раз выручил Постгрес.&lt;/p&gt;

&lt;p&gt;По работе я много занимаюсь отчетностью: генерю CSV и эксельки со всякими
цифрами. Дело это не хитрое, но много нюансов: нужно собрать данные из десяти
источников, очистить, переколбасить, построить прямые и обратные индексы. В
идеале распараллелить. Потом пробежаться по коллекциям и записать итоговый
документ.&lt;/p&gt;

&lt;p&gt;Поскольку дело происходит в лямбде, я очень стеснен в ресурсах и
времени. Процессор медленный, памяти и диска немного, а на выполнение дается не
более 15 минут. Это только кажется много, а на самом деле первые 7 минут уходят
только на то, чтобы скачать архивы.&lt;/p&gt;

&lt;p&gt;Из последнего: в папке S3 лежит огромный CSV на 10 миллионов записей. Нужно
выбрать из него одно подмножество, затем второе, а потом склеить их по id =
parent_id.&lt;/p&gt;

&lt;p&gt;Написал на Кложе черновик — работает, занимает 11 минут. Можно плюнуть и
оставить, но 11 минут — это уже близко к 15 минутам, а значит, можно получить
таймаут. Переписал с параллельной обработкой — стало 5 минут, волноваться не о
чем.&lt;/p&gt;

&lt;p&gt;А потом смотрю и думаю: ты же, дурачок, написал ровно то, что делает база
данных. Только раз в десять медленней и костыльней. Убери быдлокод, загони CSV в
базу и выполни запрос — получишь то же самое.&lt;/p&gt;

&lt;p&gt;Так и сделал: получаю из Амазона стрим с CSV-содержимым. Не скачивая его на
диск, направляю прямиком в Постгрес во временную таблицу (апишка COPY FROM
STDIN). Тот загружает 10 миллионов записей за 40 секунд. Потом посылаю SQL с
двумя подзапросами и джоином — результат готов за 15 секунд. Его даже не нужно
писать в CSV самому. Вызываешь COPY TO STDOUT — и Постгрес сам записывает CSV на
диск. Точнее, в стрим, который я направляю в файл.&lt;/p&gt;

&lt;p&gt;Минус два экрана быдлокода, быстрее почти на порядок — все довольны, все
смеются. Сразу после этой доработки мне написал один человек — мол, репорт
хороший, только надо еще одну табличку заджойнить. Да не вопрос.&lt;/p&gt;

&lt;p&gt;Отсюда мораль — если что-то можно поручить базе, поручайте базе. Постгрес уже 20
лет делает джоины и проекции таблиц. Вероятность того, что вы сделаете быстрее,
стремится к нулю.&lt;/p&gt;

&lt;p&gt;Ради интереса глянул на SQLite — зачем брать серверный Постгрес, если можно
локально справиться? Оказалось, SQLite не умеет импортировать CSV. Такая команда
есть в интерактивном шелле, а в протоколе обмена — нет. А в Постгресе есть
потоковый COPY, поэтому выбора не остается.&lt;/p&gt;

&lt;p&gt;Есть у нас сервис, который пилят другие люди. Там логика крутится вокруг CSV и
пакетного импорта в другие сервисы. Посмотрел и ужаснулся: километры кложурного
быдлокода можно заменить импортом в базу и парой-тройкой запросов. Дай бог
доберусь, переделаю.&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jan 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/postgres-csv/</link>
        <guid isPermaLink="true">https://grishaev.me/postgres-csv/</guid>
        
        <category>postgres</category>
        
        <category>sql</category>
        
        <category>csv</category>
        
        
      </item>
    
      <item>
        <title>Код на русском</title>
        <description>&lt;p&gt;Я как-то рассказывал про феномен: показываешь человеку код на Лиспе, и он
начинает хихикать, хрюкать, постить смайлики, словом, теряет всякое
лицо. Примерно как школьник, принесший в класс эротический журнал.&lt;/p&gt;

&lt;p&gt;Заметил, что такая же ерунда с кодом на 1С. Если где-то всплывет код на русском,
начинаются крики, эмоции… ужасно.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/lol-1c/1.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Я писал на 1С три с половиной года в Чите, в славном Энергосбыте. У нас были две
жирные программы: одна на Дельфях, вторая на 1С. Я поддеживал обе, и до сих пор
нежно люблю эти платформы.&lt;/p&gt;

&lt;p&gt;Так вот, торжественно заявляю: код на русском поддерживается точно так же, как и
на английском. Разницы нет. Когда читаешь код, то воспринимаешь его как
структурированный набор команд. Никто не читает по буквам
“Если…То… Конец”. Глаз выделяет структуру, операторы, циклы, словом, все как
в обычном языке.&lt;/p&gt;

&lt;p&gt;Да, у 1С свои проблемы. Во-первых, язык не отличается врожденной красотой, а
во-вторых, у 1С радикально низкий порог входа. Хотя то же самое можно сказать о
раннем PHP. Еще одна косвенная проблема – 1С стоит особняком от других
технологий, и в результате типичный 1С-программист ничего не знает о протоколох,
безопасности и алгоритмах.&lt;/p&gt;

&lt;p&gt;Эти проблемы я признаю и готов обсуждать. Но когда очередной клоун смеется над
кодом с русскими буквами, боюсь, он получит только мое презрение.&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jan 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/lol-1c/</link>
        <guid isPermaLink="true">https://grishaev.me/lol-1c/</guid>
        
        <category>1c</category>
        
        <category>life</category>
        
        
      </item>
    
      <item>
        <title>Дети в телефонах</title>
        <description>&lt;p&gt;Разговаривал с пожилым человеком, и он выдал следующую мысль. Цитирую
максимально близко.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Мы, старики, часто бухтим, что дети сидят в телефонах. А разве пожилые люди
чем-то лучше? Еду в поезде — книги нет ни у кого, все от мала до велика в
телефонах и планшетах. Даже старики, которых в свое время приучали читать. На
работе у нас пять чатов в Вацапе: младшая группа, старшая, родители, педсовет,
бухгалтерия. И все туда пишут, отвечают, спорят. Постят картинки а-ля “с
добрым утром”. Набрасывают политические новости, уже на втором сообщении
переходят на личности. Бывает, три человека стоят в метре друг от друга и
пишут в один чат. Чем они отличаются от детей, которых мы ругаем? Если сами не
можем себя контролировать и каждую минуту открываем телефон, то что требовать
от детей? Они повторяют за нами.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;И я подумал: эту мысль стоит разместить здесь.&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jan 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/grumping/</link>
        <guid isPermaLink="true">https://grishaev.me/grumping/</guid>
        
        <category>life</category>
        
        <category>phones</category>
        
        
      </item>
    
      <item>
        <title>Получить деньги</title>
        <description>&lt;p&gt;Если вы работаете вне штата (контрактор, ИП, самозанятый), то получить даньги с
закачика — ваша работа. Получение денег может быть трудным и долгим, и обычно о
нем не говорят. Но чем раньше вы примите тезис из первого предложения, тем
скорее на вас снизойдет благодать.&lt;/p&gt;

&lt;p&gt;Когда вы работаете в штате, волноваться не о чем: зарплата сама падает на
карточку. Даже до карт выдача зарплаты была регламентирована. В назначенный день
бухгалтер вызывает в кабинет и дает деньги под роспись. Все строго, пропускать
нельзя.&lt;/p&gt;

&lt;p&gt;Некоторые думают, что у ИП и контракторов то же самое: поработал — получил
деньги. Это не так: сотрудник должен заполнить часы, посчитать зарплату,
выпустить квитанцию и отправить ее нужным людям. Потом ждать и пинать тех, кто
отправляет деньги. Потом пройти валютный контроль в банке: предоставить
документы, контракт, квитанцию, в сотый раз доказать, что все законно. Если
затупить на любом этапе, деньги не придут, и заказчик лишь пожмет плечами: сам
виноват.&lt;/p&gt;

&lt;p&gt;Штатные сотрудники полагают, что бухгалтер переводит им зарплату по доброте
душевной. На самом деле бухгалтер делает это из страха перед государством. Дело
вот в чем: с каждой зарплаты фирма платит налог. В России мало об этом думают,
потому что получают зарплату уже после вычета налогов. Но если кому-то не
выплатили зарплату, то и налог с нее тоже не заплатили. Если государство узнает,
что Иванову удержали зарплату, оно накажет фирму — но не за то, что Иванову
нечего есть, а за то, что не уплачен налог.&lt;/p&gt;

&lt;p&gt;Получается, что у штатного работника есть “крыша” в виде государства, которая,
разумеется, оказывает свои услуги за ренту. А поскольку ИП платит налоги
по-другому, то волноваться о том, получил он деньги или нет, не нужно. Точнее,
нужно, но в другом ключе: от кого и за какие услуги.&lt;/p&gt;

&lt;p&gt;Поэтому напоминаю тем, кто выходит со штатной работы на удаленку: выбивание
денег ложится на ваши плечи. Лучше сразу принять это как данность, чем потом
обвинять всех вокруг.&lt;/p&gt;

&lt;p&gt;Понимаю, что заметка немного опоздала из-за, как сейчас пишут, “изменившегося
контекста”. Этот “контекст” нынче такой, что удаленщики возвращаются в штат. Но
лучше поздно, чем никогда. А чтобы заметка не выглядела сухой, расскажу кулстори
о том, как выколачивал деньги.&lt;/p&gt;

&lt;p&gt;Все началось хорошо: американский стартап с командой в Европе. Технический
руководитель очень компетентный, полное понимание. Проходит месяц, жду
зарплату. А девушка бухгалтер говорит: не могу отправить платеж, система не
позволяет, то-се. Период оплаты прошел, программа закрыла бюджет, теперь в
следующий раз.&lt;/p&gt;

&lt;p&gt;Проходит месяц, девушка выходит замуж и улетает в свадебное
путешествие. Программа автоматом рассылает деньги всем, кроме меня. Жду.&lt;/p&gt;

&lt;p&gt;Девушка прилетает через пять недель, раскачивается еще неделю. Договариваемся на
звонок. Разница 12 часов, она шарит экран, я подсказываю, куда какие реквизиты
вводить. Вроде бы норм, деньги должны уйти, но в назначенный день не
уходят. Девушка звонит в свой банк, ей объясняют, как правильно заполнить форму.&lt;/p&gt;

&lt;p&gt;Чтобы не томить — на пятый раз деньги ушли и потом приходили стабильно. Но вот
курьез: мне не выплатили четыре зарплаты и делают вид, что все хорошо. Начинаю
осторожные переговоры: мол, заплатите мне эти деньги тоже. А мне говорят: ты не
волнуйся. Когда будешь увольняться, мы тебе все разом выплатим. Нет, говорю,
лучше добавляйте к каждой зарплате бонус, пока не закроем прошлые выплаты. Они
очень неохотно, но согласились.&lt;/p&gt;

&lt;p&gt;Возникли вопросы у налоговой: в контракте указано N тысяч фантиков, а приходит
на четверть больше. Как так? Пришлось выставлять квитанции якобы за переработки
и допуслуги.&lt;/p&gt;

&lt;p&gt;Но дело шло: мало-помалу долг закрывался. Вот и первую зарплату погасили,
вторую, третью… а потом случилась банальная для стартапа история. Не прошли
очередной раунд ивестиций — и все, денег нет. Собрали звонок и говорят: мы не
будем возражать, если найдете другую работу. Можете работать на нас, но без
каких-либо гарантий выплат.&lt;/p&gt;

&lt;p&gt;Я пишу, что за вами осталась одна непогашенная зарплата, на что отвечают —
держись, денег нет. Я решил, что ничего не поделать и был рад хотя бы тому, что
выбил три зарплаты — ведь если бы ничего не делал, то попал бы на все четыре. Но
неожиданно за меня вступился технический руководитель, и последнюю зарплату
все-таки выплатили. Буквально за день или два до того, как банк перестал
принимать платежи из-за границы.&lt;/p&gt;

&lt;p&gt;Увы, не все были столь удачливы. Одному коллеге были должны пять зарплат, но за
него никто вступился. Он долго переписывался с финальным боссом, а когда
упомянул про суд, получил примерно такой ответ: делай визу, прилетай в
Калифорнию, нанимай юриста и мы с тобой с радостью посудимся.&lt;/p&gt;

&lt;p&gt;Нет смысла повторять тезисы из начала статьи, надеюсь, они понятны. Добавлю, что
о ваших деньгах никто лучше вас не позаботится — вот такая простая мысль.&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jan 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/get-money/</link>
        <guid isPermaLink="true">https://grishaev.me/get-money/</guid>
        
        <category>life</category>
        
        <category>money</category>
        
        
      </item>
    
      <item>
        <title>Разметка в Телеграме</title>
        <description>&lt;p&gt;Наверняка вы замечали баг в Телеграме. Написал сообщение, поправил разметку, а
она поехала (см. картинку). Выделил болдом одно, а оказалось помечено другое. То
же самое с моноширинным текстом. Ну а самая печаль — разметка кода. Иногда так
плывет, что проще удалить сообщение и разместить по-новой.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aws/telegram-markup/1.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Дело в том, как передается разметка в Телеграме. Многие полагают, что в нем
маркдаун, но на самом деле это не так. Телеграм может принимать маркдаун от
ботов, но разметка приводится ко внутреннему виду, примерно такому:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{:message &quot;Welcome back, Ivan Grishaev!&quot;,
 :entities
 [{:type :text_mention,
   :offset 14,
   :length 13,
   :user {:id 100500 :nickname &quot;igrishaev&quot;}}]}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Смысл в том, что есть сообщение и набор размеченных зон. Каждая зона знает
смещение в символах и длину (поля offset и length). У зоны есть тип и
дополнительные параметры, которые влияют на рендер. В примере выше слова “Ivan
Grishaev” будут выглядеть как ссылка на пользователя с нужными атрибутами.&lt;/p&gt;

&lt;p&gt;У этой системы следствие: если поправить текст, смещения зон должны быть
скорректированы. Например, я поменял Welcome back на просто Welcome. Пропали
пять символов, и смещения всех зон должны уменьшится на 5. На простых случаях
это работает, но когда зон много (болды, италики и прочее), что-то идет не
так. Возможно, виноват многострочный код: он как-то оптимизируется, а смещения
зон не принимают его во внимание.&lt;/p&gt;

&lt;p&gt;Если бы в Телеграме была система тегов вроде markdown или xml/html, такой
проблемы бы не было. Братьям Дуровым, конечно, виднее, но я тоже могу
высказаться.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate>
        <link>https://grishaev.me/telegram-markup/</link>
        <guid isPermaLink="true">https://grishaev.me/telegram-markup/</guid>
        
        <category>telegram</category>
        
        <category>ui</category>
        
        
      </item>
    
  </channel>
</rss>
